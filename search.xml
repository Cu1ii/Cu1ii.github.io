<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTML</title>
      <link href="/Java/HTML/"/>
      <url>/Java/HTML/</url>
      
        <content type="html"><![CDATA[<h1 id="1-初识HTML"><a href="#1-初识HTML" class="headerlink" title="1.初识HTML"></a>1.初识HTML</h1><ul><li><p>Hyper Text  Markup Language</p></li><li><p>W3C 万维网联盟</p></li><li><p>W3C标准包括</p></li><li><p>结构化标准语言（HTML,XML）</p></li><li><p>表现标准语言（CSS）</p></li><li><p>行为标准（ DOM，ECMAScript ）</p></li></ul><h1 id="2-网页基本信息"><a href="#2-网页基本信息" class="headerlink" title="2.网页基本信息"></a>2.网页基本信息</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释 idea快捷键 ctrl+/ --&gt;</span></span><br></pre></td></tr></table></figure><p>title 网页的标题</p><p>meta 描述性标签，用来描述网站的一些信息</p><p>meta 用来做SEO ( 搜索引擎优化 ) </p><p>body  标签代表网页主体  </p><h1 id="3-网页基本标签"><a href="#3-网页基本标签" class="headerlink" title="3.网页基本标签"></a>3.网页基本标签</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用什么规范--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>基本标签学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--标题标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span> 二级标签<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--段落标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>两只老虎<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--换行标签--&gt;</span></span><br><span class="line">跑得快<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--水平线标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--粗体 斜体--&gt;</span></span><br><span class="line">粗体: <span class="tag">&lt;<span class="name">strong</span>&gt;</span>i love you<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">斜体: <span class="tag">&lt;<span class="name">em</span>&gt;</span>i love you<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--特殊符号--&gt;</span></span><br><span class="line">空格<span class="symbol">&amp;nbsp;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="symbol">&amp;gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="symbol">&amp;lt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="symbol">&amp;copy;</span>版权</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4-图像标签"><a href="#4-图像标签" class="headerlink" title="4.图像标签"></a>4.图像标签</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>图像标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--img学习</span></span><br><span class="line"><span class="comment">src：图片地址（必填）</span></span><br><span class="line"><span class="comment">相对地址，绝对地址</span></span><br><span class="line"><span class="comment">../       -- 上一级目录</span></span><br><span class="line"><span class="comment">alt 图片名字，找不到图片会显示（必填）</span></span><br><span class="line"><span class="comment">title 悬停文字</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;&quot;</span> <span class="attr">height</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="5-超链接标签及应用"><a href="#5-超链接标签及应用" class="headerlink" title="5.超链接标签及应用"></a>5.超链接标签及应用</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>链接标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--a标签</span></span><br><span class="line"><span class="comment">href : 必填,表示要跳转到哪个页面</span></span><br><span class="line"><span class="comment">target ： 表示窗口在哪里打开</span></span><br><span class="line"><span class="comment">_blank 在新标签中打开</span></span><br><span class="line"><span class="comment">_self 在自己的网页中打开</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;top&quot;</span>&gt;</span>顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span><span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>点击我跳转到百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--锚链接</span></span><br><span class="line"><span class="comment">1.需要一个锚标记</span></span><br><span class="line"><span class="comment">2.跳转到标记</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#top&quot;</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--功能性链接</span></span><br><span class="line"><span class="comment">邮件链接 ：mailto</span></span><br><span class="line"><span class="comment">qq链接 qq推广官网</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto：123@163.com&quot;</span>&gt;</span>点击联系我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="6-行内元素和块元素"><a href="#6-行内元素和块元素" class="headerlink" title="6.行内元素和块元素"></a>6.行内元素和块元素</h1><p>块元素</p><ul><li>无论内容多少，该内容独占一行</li><li>（ p，h1-h6 … ）</li></ul><p>行内元素</p><ul><li>内容撑开宽度，左右都是行内元素的可以排在一行</li><li>（ a . strong . em …）</li></ul><h1 id="7-列表标签"><a href="#7-列表标签" class="headerlink" title="7.列表标签"></a>7.列表标签</h1><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="什么是列表？"><a href="#什么是列表？" class="headerlink" title="什么是列表？"></a>什么是列表？</h3><p>列表就是信息资源的一种展示形式。它可以使信息结构化和条理化，并以列表的样式显示出来，以便浏览者能更快捷地获得相应的信息</p><h3 id="列表的分类"><a href="#列表的分类" class="headerlink" title="列表的分类"></a>列表的分类</h3><ul><li>无序列表</li><li>有序列表</li><li>定义列表</li></ul><h2 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--有序列表</span></span><br><span class="line"><span class="comment">应用范围：试卷，问答。。。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>运维<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C/C++<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--无序列表</span></span><br><span class="line"><span class="comment">应用范围：导航，侧边栏。。。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>运维<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C/C++<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--自定义列表</span></span><br><span class="line"><span class="comment">    dl：标签</span></span><br><span class="line"><span class="comment">    dt：列表名称</span></span><br><span class="line"><span class="comment">    dd：列表内容</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>学科<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>运维<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>C/C++<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="8-表格标签"><a href="#8-表格标签" class="headerlink" title="8.表格标签"></a>8.表格标签</h1><h2 id="为什么使用表格"><a href="#为什么使用表格" class="headerlink" title="为什么使用表格"></a>为什么使用表格</h2><ul><li>简单通用</li><li>结构稳定</li></ul><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><ul><li>单元格</li><li>行</li><li>列</li><li>跨行</li><li>跨列</li></ul><h2 id="代码实例-1"><a href="#代码实例-1" class="headerlink" title="代码实例"></a>代码实例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--表格</span></span><br><span class="line"><span class="comment">行 tr</span></span><br><span class="line"><span class="comment">列 td</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--colspan 跨列--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;4&quot;</span>&gt;</span>1-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--rowspan 跨行--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="9-媒体元素"><a href="#9-媒体元素" class="headerlink" title="9.媒体元素"></a>9.媒体元素</h1><h2 id="视频和音频"><a href="#视频和音频" class="headerlink" title="视频和音频"></a>视频和音频</h2><h3 id="视频元素"><a href="#视频元素" class="headerlink" title="视频元素"></a>视频元素</h3><ul><li>video</li></ul><h3 id="音频元素"><a href="#音频元素" class="headerlink" title="音频元素"></a>音频元素</h3><ul><li>audio</li></ul><h2 id="代码实例："><a href="#代码实例：" class="headerlink" title="代码实例："></a>代码实例：</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>媒体元素<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--音频和视频</span></span><br><span class="line"><span class="comment">src 资源路径</span></span><br><span class="line"><span class="comment">controls 控制条</span></span><br><span class="line"><span class="comment">autoplay 自动播放</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="10-页面结构分析"><a href="#10-页面结构分析" class="headerlink" title="10.页面结构分析"></a>10.页面结构分析</h1><ul><li>header 标题头部区域的内容（ 用于页面或页面中的一块区域 ）</li><li>footer 标记脚部区域的内容（ 用于整个页面或页面中的一块区域 ）</li><li>section Web页面中的一块独立区域</li><li>article 独立的文章内容</li><li>aside 相关内容或应用  （ 常用于侧边栏 ）</li><li>nav 导航类辅助内容</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>页面结构分析<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页头部<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页主体<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页脚部<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="11-iframe内联框架"><a href="#11-iframe内联框架" class="headerlink" title="11.iframe内联框架"></a>11.iframe内联框架</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>内联框架<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--iframe 内联框架</span></span><br><span class="line"><span class="comment">src 地址</span></span><br><span class="line"><span class="comment">w-h 宽度高度</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1000px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="12-初识表单post和get提交"><a href="#12-初识表单post和get提交" class="headerlink" title="12.初识表单post和get提交"></a>12.初识表单post和get提交</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表单form</span></span><br><span class="line"><span class="comment">action ：表单提交的位置 ，可以是网站 ，也可以是一个请求处理地址</span></span><br><span class="line"><span class="comment">method ：post ，get 提交方式</span></span><br><span class="line"><span class="comment">get 方式提交 ：我们可以在url中看到我们提交的信息 不安全 高效</span></span><br><span class="line"><span class="comment">post ：比较安全 传输大文件</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span><span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--文本输入框：input type=&quot;text&quot;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>名字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--密码框：input type=&quot;password&quot;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="13-文本框和单选框"><a href="#13-文本框和单选框" class="headerlink" title="13.文本框和单选框"></a>13.文本框和单选框</h1><h2 id="表单元素格式"><a href="#表单元素格式" class="headerlink" title="表单元素格式"></a>表单元素格式</h2><table><thead><tr><th>属性</th><th align="left">说明</th></tr></thead><tbody><tr><td>type</td><td align="left">指定元素的类型。text、password、checkbox、radio、submit、reset、file、hidden、image和button，默认为text</td></tr><tr><td>name</td><td align="left">指定表单元素的名称</td></tr><tr><td>value</td><td align="left">元素的初始值。type为radio时必须指定一个值</td></tr><tr><td>size</td><td align="left">指定表单元素的初始宽度。当type为text 或password时，表单元素的大小以字符为单位。对于其他类型，宽度以像素为单位</td></tr><tr><td>maxlength</td><td align="left">type为text或password时，输入的最大字符数</td></tr><tr><td>checked</td><td align="left">type为radio或checkbox时，指定按钮是否是被选中</td></tr></tbody></table><h2 id="代码实例：-1"><a href="#代码实例：-1" class="headerlink" title="代码实例："></a>代码实例：</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表单form</span></span><br><span class="line"><span class="comment">action ：表单提交的位置 ，可以是网站 ，也可以是一个请求处理地址</span></span><br><span class="line"><span class="comment">method ：post ，get 提交方式</span></span><br><span class="line"><span class="comment">get 方式提交 ：我们可以在url中看到我们提交的信息 不安全 高效</span></span><br><span class="line"><span class="comment">post ：比较安全 传输大文件</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;表格.html&quot;</span><span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--文本输入框：input type=&quot;text&quot;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>名字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--密码框：input type=&quot;password&quot;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单选框type=&quot;radio&quot;</span></span><br><span class="line"><span class="comment">values 单选框的值</span></span><br><span class="line"><span class="comment">name 表示组</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;boy&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span>男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="14-按钮和多选框"><a href="#14-按钮和多选框" class="headerlink" title="14.按钮和多选框"></a>14.按钮和多选框</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表单form</span></span><br><span class="line"><span class="comment">action ：表单提交的位置 ，可以是网站 ，也可以是一个请求处理地址</span></span><br><span class="line"><span class="comment">method ：post ，get 提交方式</span></span><br><span class="line"><span class="comment">get 方式提交 ：我们可以在url中看到我们提交的信息 不安全 高效</span></span><br><span class="line"><span class="comment">post ：比较安全 传输大文件</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;表格.html&quot;</span><span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--文本输入框：input type=&quot;text&quot;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>名字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--密码框：input type=&quot;password&quot;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单选框type=&quot;radio&quot;</span></span><br><span class="line"><span class="comment">values 单选框的值</span></span><br><span class="line"><span class="comment">name 表示组</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;boy&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span>男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--多选框</span></span><br><span class="line"><span class="comment">input type=&quot;checkbox&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>爱好：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sleep&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>睡觉</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;code&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>敲代码</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;chat&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>聊天</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>游戏</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--按钮</span></span><br><span class="line"><span class="comment">    input type=&quot;button&quot; 普通按钮</span></span><br><span class="line"><span class="comment">    input type=&quot;image&quot; 图像按钮</span></span><br><span class="line"><span class="comment">    input type=&quot;submit&quot; 提交按钮</span></span><br><span class="line"><span class="comment">    input type=&quot;reset&quot; 重置</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>按钮：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;懂得都懂&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../resources/image/1.jpg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="15-列表框文本域和文本域"><a href="#15-列表框文本域和文本域" class="headerlink" title="15.列表框文本域和文本域"></a>15.列表框文本域和文本域</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表单form</span></span><br><span class="line"><span class="comment">action ：表单提交的位置 ，可以是网站 ，也可以是一个请求处理地址</span></span><br><span class="line"><span class="comment">method ：post ，get 提交方式</span></span><br><span class="line"><span class="comment">get 方式提交 ：我们可以在url中看到我们提交的信息 不安全 高效</span></span><br><span class="line"><span class="comment">post ：比较安全 传输大文件</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;表格.html&quot;</span><span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--文本输入框：input type=&quot;text&quot;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>名字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--密码框：input type=&quot;password&quot;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单选框type=&quot;radio&quot;</span></span><br><span class="line"><span class="comment">values 单选框的值</span></span><br><span class="line"><span class="comment">name 表示组</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;boy&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span>男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--多选框</span></span><br><span class="line"><span class="comment">input type=&quot;checkbox&quot;</span></span><br><span class="line"><span class="comment">checked 默认选项</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>爱好：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sleep&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>睡觉</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;code&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">checked</span>&gt;</span>敲代码</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;chat&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>聊天</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>游戏</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--按钮</span></span><br><span class="line"><span class="comment">    input type=&quot;button&quot; 普通按钮</span></span><br><span class="line"><span class="comment">    input type=&quot;image&quot; 图像按钮</span></span><br><span class="line"><span class="comment">    input type=&quot;submit&quot; 提交按钮</span></span><br><span class="line"><span class="comment">    input type=&quot;reset&quot; 重置</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>按钮：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;懂得都懂&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../resources/image/1.jpg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--下拉框，列表框</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>国家：</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;列表名称&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;China&quot;</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;US&quot;</span>&gt;</span>美国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Japan&quot;</span>&gt;</span>日本<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Russia&quot;</span>&gt;</span>俄罗斯<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  文本域--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>反馈：</span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;textarea&quot;</span>  <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span>文本内容<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--文件域</span></span><br><span class="line"><span class="comment">input type=&quot;file&quot; name=&quot;files&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;files&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span> <span class="attr">name</span>=<span class="string">&quot;upload&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="16-搜索框滑块和简单验证"><a href="#16-搜索框滑块和简单验证" class="headerlink" title="16.搜索框滑块和简单验证"></a>16.搜索框滑块和简单验证</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表单form</span></span><br><span class="line"><span class="comment">action ：表单提交的位置 ，可以是网站 ，也可以是一个请求处理地址</span></span><br><span class="line"><span class="comment">method ：post ，get 提交方式</span></span><br><span class="line"><span class="comment">get 方式提交 ：我们可以在url中看到我们提交的信息 不安全 高效</span></span><br><span class="line"><span class="comment">post ：比较安全 传输大文件</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;表格.html&quot;</span><span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--文本输入框：input type=&quot;text&quot;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>名字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--密码框：input type=&quot;password&quot;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单选框type=&quot;radio&quot;</span></span><br><span class="line"><span class="comment">values 单选框的值</span></span><br><span class="line"><span class="comment">name 表示组</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;boy&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span>男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--多选框</span></span><br><span class="line"><span class="comment">input type=&quot;checkbox&quot;</span></span><br><span class="line"><span class="comment">checked 默认选项</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>爱好：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sleep&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>睡觉</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;code&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">checked</span>&gt;</span>敲代码</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;chat&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>聊天</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>游戏</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--按钮</span></span><br><span class="line"><span class="comment">    input type=&quot;button&quot; 普通按钮</span></span><br><span class="line"><span class="comment">    input type=&quot;image&quot; 图像按钮</span></span><br><span class="line"><span class="comment">    input type=&quot;submit&quot; 提交按钮</span></span><br><span class="line"><span class="comment">    input type=&quot;reset&quot; 重置</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>按钮：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;懂得都懂&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../resources/image/1.jpg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--下拉框，列表框</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>国家：</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;列表名称&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;China&quot;</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;US&quot;</span>&gt;</span>美国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Japan&quot;</span>&gt;</span>日本<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Russia&quot;</span>&gt;</span>俄罗斯<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  文本域--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>反馈：</span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;textarea&quot;</span>  <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span>文本内容<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--文件域</span></span><br><span class="line"><span class="comment">input type=&quot;file&quot; name=&quot;files&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;files&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span> <span class="attr">name</span>=<span class="string">&quot;upload&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    邮件验证--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>邮箱：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--URL--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>URL：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--数字--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>数字：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;num&quot;</span> <span class="attr">max</span>=<span class="string">&quot;666&quot;</span> <span class="attr">min</span>=<span class="string">&quot;520&quot;</span> <span class="attr">step</span>=<span class="string">&quot;6&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--滑块--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>音量：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">name</span>=<span class="string">&quot;voice&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">step</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--搜索框--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>搜索：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清空表单&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="17-表单的应用"><a href="#17-表单的应用" class="headerlink" title="17.表单的应用"></a>17.表单的应用</h1><ul><li><p>隐藏域 –hidden</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">hidden</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>只读 –readonly</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>名字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span> <span class="attr">readonly</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>禁用 –disabled</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">disabled</span>&gt;</span> </span><br></pre></td></tr></table></figure></li></ul><p>小拓展：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--增强鼠标可用性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;mark&quot;</span>&gt;</span>你点我试试<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mark&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="18-表单初级验证"><a href="#18-表单初级验证" class="headerlink" title="18.表单初级验证"></a>18.表单初级验证</h1><h2 id="为什么要进行表单验证？"><a href="#为什么要进行表单验证？" class="headerlink" title="为什么要进行表单验证？"></a>为什么要进行表单验证？</h2><p>安全性 减轻压力</p><h2 id="常用方式"><a href="#常用方式" class="headerlink" title="常用方式"></a>常用方式</h2><ul><li>placeholder 提示信息</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>名字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>required 非空判断</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">required</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>pattern 正则表达式</li></ul><p>需要用到什么就去查</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>自定义邮箱：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;diymail&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;/^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]&#123;2,6&#125;)$/</span></span></span><br><span class="line"><span class="string"><span class="tag">&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/Java/Spring/Spring/"/>
      <url>/Java/Spring/Spring/</url>
      
        <content type="html"><![CDATA[<h1 id="1、Spring"><a href="#1、Spring" class="headerlink" title="1、Spring"></a>1、Spring</h1><h2 id="1-1、简介"><a href="#1-1、简介" class="headerlink" title="1.1、简介"></a>1.1、简介</h2><p>==自己了解==</p><p>导入 Maven 包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.16.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.16.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-2、优点"><a href="#1-2、优点" class="headerlink" title="1.2、优点"></a>1.2、优点</h2><ul><li>Spring 是一个开源的免费的框架 (容器)</li><li>Spring 是一个轻量级的、非入侵式的框架</li><li>控制反转，面向切面编程(AOP)</li><li>支持事务处理，对框架整合的支持</li></ul><p>==Spring 是一个轻量级的控制反转 (IOC) 和面向切面编程 (AOP) 的框架==</p><h2 id="1-3、组成"><a href="#1-3、组成" class="headerlink" title="1.3、组成"></a>1.3、组成</h2><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://images2017.cnblogs.com/blog/1219227/201709/1219227-20170930225010356-45057485.gif" alt="img"></p><h2 id="1-4、拓展"><a href="#1-4、拓展" class="headerlink" title="1.4、拓展"></a>1.4、拓展</h2><p>现代化 Java 开发(基于 Spring 开发)</p><p>Spring (构建一切) —-&gt; Spring Boot(协调一切) ———&gt; Spring Cloud (连接一切)</p><ul><li>Spring Boot <ul><li>一个快速开发的脚手架</li><li>基于 Spring Boot 可以快速的开发单个微服务</li></ul></li><li>Spring Cloud<ul><li>其是基于 Spring Boot 实现的</li></ul></li></ul><h3 id="弊端："><a href="#弊端：" class="headerlink" title="弊端："></a>弊端：</h3><p>​        配置十分繁琐</p><h1 id="2、IOC-理论推导"><a href="#2、IOC-理论推导" class="headerlink" title="2、IOC 理论推导"></a>2、IOC 理论推导</h1><ol><li>UserDao 接口</li><li>UserDaoImpl 实现类</li><li>UserServer 业务接口</li><li>UserServicelImpl 业务实现类</li></ol><p>在之前的业务中 用户的需求可能会影响原来的代码，需要根据用户的需求去修改原代码. 如果程序代码量十分大,     修改一次的代价会十分昂贵! </p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="C:\Users\雷神\AppData\Roaming\Typora\typora-user-images\image-20210916140339691.png" alt="image-20210916140339691"></p><p><strong>使用一个 Set 接口实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//利用 set 进行 动态实现值的注入</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(Userdao userDao)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>之前程序是主动创建对象, 控制权在程序设计者手上</p></li><li><p>使用 set 注入后, 程序不再具有主动性, 而是变成了被动接收对象 </p><p>​    这种思想从本质上解决了问题, 程序设计人员不需要去管理对象的创建. 系统的耦合性大大降低, 可以更加专注的在业务的实现上. IOC 原型</p></li></ul><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="C:\Users\雷神\AppData\Roaming\Typora\typora-user-images\image-20210916140357265.png" alt="image-20210916140357265"></p><p><strong>IOC 本质</strong></p><p>控制反转IoC(Inversion of Control)，是一种设计思想，DI(依赖注入)是实现IoC的一种方法，也有人认为DI只是IoC的另一种说法。没有IoC的程序中 , 我们使用面向对象编程 , 对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓控制反转就是：获得依赖对象的方式反转了。</p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://img-blog.csdnimg.cn/20210302182710529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjYwODM3Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>**Container Overview **(IOC容器)</p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://docs.spring.io/spring-framework/docs/current/reference/html/images/container-magic.png" alt="container magic"></p><h1 id="3、-Hello-Spring"><a href="#3、-Hello-Spring" class="headerlink" title="3、 Hello Spring"></a>3、 Hello Spring</h1><p><strong>beans.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用 Spring 来创建对象, 在 Spring 中这些都称为 Bean</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        类型 变量名 = new 类型();</span></span><br><span class="line"><span class="comment">        Hello hello = new Hello();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        bean == 对象  new Hello();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        id = 变量名</span></span><br><span class="line"><span class="comment">        class = new 的对象</span></span><br><span class="line"><span class="comment">        property 相当于给对象中的属性设置一个值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        ref: 引用 Spring 容器中创建好的对象</span></span><br><span class="line"><span class="comment">        value: 具体的值 基本数据类型</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cu1.pojo.Hello&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Test</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cu1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cu1.pojo.Hello;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取 Spring 的上下文对象 获取 ApplicationContext; 拿到 Spring 容器</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//对象都在 Spring 管理 如果要使用 直接去里面取出来就可以 需要什么 就直接 get 什么</span></span><br><span class="line">        Hello hello = (Hello) context.getBean(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(hello.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Hello 对象是由 Spring 创建</li><li>hello 对象的属性是由 Spring 容器设置的</li></ul><p>这个过程就叫做控制反转:</p><p>​    控制: 谁来控制对象的创建,  传统应用程序的对象是由程序本身控制创建的, 使用 Spring 后, 对象是由 Spring 来创建的</p><p>​    反转: 程序本身不创建对象, 而变成被动的接收对象</p><p>​    依赖注入:  就是利用 set 方法来进行注入</p><p>​    IOC 是一种编程思想, 由主动的编程变为被动的接收</p><p>​    可以通过 new ClassPathXmlApplicationContext 去浏览底层源码</p><p>到了现在, 彻底不需要去程序中改动, 要实现不同的操作, 只需要在 xml 配置文件中进行修改, 所谓的 IOC, 一句话来搞定:</p><p>对象由 Spring 来创建, 管理和装配</p><h1 id="4、IOC-创建对象的方式"><a href="#4、IOC-创建对象的方式" class="headerlink" title="4、IOC 创建对象的方式"></a>4、IOC 创建对象的方式</h1><ol><li><p>使用无参构造创建对象</p></li><li><p>假设要使用有参构造构造对象</p><ol><li><p>下标赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一种, 下标赋值--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cu1.pojo.User&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Cu1&quot;</span>/&gt;</span></span><br><span class="line">      </span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通过参数类型创建</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第二种, 用参数类型进行赋值</span></span><br><span class="line"><span class="comment">       type 为参数类型</span></span><br><span class="line"><span class="comment">       不建议使用</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cu1.pojo.User&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Cuii*&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>参数名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第三种, 直接利用参数名来赋值--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cu1.pojo.User&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Cu1&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>Spring 容器在注册创建时自动创建 bean 中的所有对象, 即已经初始化了,. 且多次 get 对象得到的为同一个对象, 即内存中仅有一个实例</p></li></ol><h1 id="5、Spring-配置"><a href="#5、Spring-配置" class="headerlink" title="5、Spring 配置"></a>5、Spring 配置</h1><h2 id="5-1、别名"><a href="#5-1、别名" class="headerlink" title="5.1、别名"></a>5.1、别名</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--别名, 如果添加了别名, 我们也可以通过别名获取对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;userNew&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-2、Bean-的配置"><a href="#5-2、Bean-的配置" class="headerlink" title="5.2、Bean 的配置"></a>5.2、Bean 的配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      id: bean的唯一标识符, 也就是相当于学的对象名</span></span><br><span class="line"><span class="comment">      class: bean 对象所对应的全限定名: 包名 + 类名</span></span><br><span class="line"><span class="comment">      name: 也是别名, 而且 name 可以同时取多个别名 可以通过 &quot;: &#x27; &#x27; ,&quot; 这三个分割</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cu1.pojo.User&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user2, user3&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Cu1&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-3、Import"><a href="#5-3、Import" class="headerlink" title="5.3、Import"></a>5.3、Import</h2><p>import 一般用于团队开发使用, 其可以将多个配置文件, 导入合并为 1 个</p><p>假设现在项目中有多个人开发 这两个人负责不同的类开发, 不同的类需要注册在不同的 Bean 中, 可以利用 Import 将所有人的 Beans.xml 合并为一个总的</p><ul><li>1 beans.xml</li><li>2 beans1.xml</li><li>合并到 applicationContext.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans1.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>到时候直接使用总的配置就可以了, 假设内容相同 在合并中会被自动合并</p><h1 id="6、-依赖注入"><a href="#6、-依赖注入" class="headerlink" title="6、 依赖注入"></a>6、 依赖注入</h1><h2 id="6-1、构造器注入"><a href="#6-1、构造器注入" class="headerlink" title="6.1、构造器注入"></a>6.1、构造器注入</h2><p>前面已经介绍过</p><h2 id="6-2、Set-方式注入"><a href="#6-2、Set-方式注入" class="headerlink" title="6.2、Set 方式注入"></a>6.2、Set 方式注入</h2><ul><li>依赖注入: Set 注入<ul><li>依赖: bean 对象的创建依赖于容器</li><li>注入: bean 对象中的所有属性, 由容器来注入</li></ul></li></ul><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="[环境搭建]"></a><strong>[环境搭建]</strong></h3><ol><li><p>复杂类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>真实测试对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbys;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; card;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Address address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getBooks() &#123;</span><br><span class="line">        <span class="keyword">return</span> books;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBooks</span><span class="params">(String[] books)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.books = books;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getHobbys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hobbys;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobbys</span><span class="params">(List&lt;String&gt; hobbys)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hobbys = hobbys;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getCard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCard</span><span class="params">(Map&lt;String, String&gt; card)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.card = card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getGames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> games;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGames</span><span class="params">(Set&lt;String&gt; games)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.games = games;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Properties <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInfo</span><span class="params">(Properties info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWife</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wife;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWife</span><span class="params">(String wife)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.wife = wife;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&quot;</span> + address +</span><br><span class="line">                <span class="string">&quot;, books=&quot;</span> + Arrays.toString(books) +</span><br><span class="line">                <span class="string">&quot;, hobbys=&quot;</span> + hobbys +</span><br><span class="line">                <span class="string">&quot;, card=&quot;</span> + card +</span><br><span class="line">                <span class="string">&quot;, games=&quot;</span> + games +</span><br><span class="line">                <span class="string">&quot;, info=&quot;</span> + info +</span><br><span class="line">                <span class="string">&quot;, wife=&#x27;&quot;</span> + wife + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>Beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cu1.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第一种, 普通值注入, value--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Cu1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        Student student = (Student) context.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>==<strong>完善注入信息</strong>==</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cu1.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;烟台&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cu1.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第一种, 普通值注入, value--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Cu1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第二种, bean 注入, 使用 ref 去注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数组注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span> 红楼梦 <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span> 海上灵光 <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span> 水浒 <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span> 西游记 <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--List 注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbys&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span> 听歌 <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span> 电影 <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span> 代码 <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--map 注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;111132372979739487&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;银行卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;329649286896834686&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Set 注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>Nz<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>GTA5<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--null--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Properties</span></span><br><span class="line"><span class="comment">            key = value</span></span><br><span class="line"><span class="comment">            key = value</span></span><br><span class="line"><span class="comment">            key = value</span></span><br><span class="line"><span class="comment">            ...</span></span><br><span class="line"><span class="comment">            key 写括号里面</span></span><br><span class="line"><span class="comment">            value 写 &gt; &lt; 尖括号中间</span></span><br><span class="line"><span class="comment">            可以参考数据库连接的 Property 文件写</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;学号&quot;</span>&gt;</span>19214174<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;性别&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span>Cu1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-3、拓展方式注入"><a href="#6-3、拓展方式注入" class="headerlink" title="6.3、拓展方式注入"></a>6.3、拓展方式注入</h2><p><strong>可以使用 p 命名空间和 c 命名空间进行注入</strong></p><h5 id="官方解释"><a href="#官方解释" class="headerlink" title="官方解释:"></a>官方解释:</h5><p>​    <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-p-namespace">官方文档 1.4.2</a></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用:"></a>使用:</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">&quot;http://www.springframework.org/schema/c&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--p 命名空间注入 可以直接注入属性的值 property--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean id=&quot;user&quot; class=&quot;com.cu1.pojo.User&quot; p:name=&quot;Cu1&quot; p:age=&quot;20&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--c 命名空间注入, 通过构造器注入 construct-args--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cu1.pojo.User&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;Cu1&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试:"></a>测试:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.cu1.pojo.Student;</span><br><span class="line"><span class="keyword">import</span> com.cu1.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> User user = context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点:"></a>注意点:</h4><ul><li>p 命名空间和 c 命名空间不能直接使用, 需要导入 xml 约束</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlns:c=&quot;http://www.springframework.org/schema/c&quot;    </span><br><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br></pre></td></tr></table></figure><h2 id="6-4、Bean-的作用域"><a href="#6-4、Bean-的作用域" class="headerlink" title="6.4、Bean 的作用域"></a>6.4、Bean 的作用域</h2><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="C:\Users\雷神\AppData\Roaming\Typora\typora-user-images\image-20210918202047617.png" alt="image-20210918202047617"></p><h3 id="6-4-1、The-Singleton-Scope-单例模式1-51"><a href="#6-4-1、The-Singleton-Scope-单例模式1-51" class="headerlink" title="6.4.1、The Singleton Scope 单例模式1.51"></a>6.4.1、<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes">The Singleton Scope 单例模式1.51</a></h3><p><strong>==Spring 默认机制==</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">    scope 设置单例模式(默认模式)</span><br><span class="line">    此处为显示设置单例模式</span><br><span class="line">--&gt;</span><br><span class="line">&lt;bean id=&quot;user&quot; class=&quot;com.cu1.pojo.User&quot; c:name=&quot;Cu1&quot; c:age=&quot;20&quot; scope=&quot;singleton&quot;/&gt;</span><br></pre></td></tr></table></figure><h3 id="6-4-2、The-Prototype-Scope-原型模式1-52"><a href="#6-4-2、The-Prototype-Scope-原型模式1-52" class="headerlink" title="6.4.2、The Prototype Scope 原型模式1.52"></a>6.4.2、<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes">The Prototype Scope 原型模式1.52</a></h3><p>==<strong>每一次从容器中 get 的时候都会产生一个新对象</strong>==</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.something.DefaultAccountService&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-4-3、其余的-request-session-application-这些个只能在-Web-开发中使用"><a href="#6-4-3、其余的-request-session-application-这些个只能在-Web-开发中使用" class="headerlink" title="6.4.3、其余的 request, session, application 这些个只能在 Web 开发中使用"></a>6.4.3、其余的 request, session, application 这些个只能在 Web 开发中使用</h3><h1 id="7、Bean-的自动装配"><a href="#7、Bean-的自动装配" class="headerlink" title="7、Bean 的自动装配"></a>7、Bean 的自动装配</h1><ul><li>自动装配是 Spring 满足 Bean 依赖的一种方式</li><li>Spring 会在上下文中自动寻找, 并给Bean 装配属性</li></ul><p>==在 Spring 中有三种装配方式:==</p><ol><li>在 xml 中显示的配置</li><li>在 Java 中显示配置</li><li>==<strong>隐式的自动装配</strong>==</li></ol><h2 id="7-1、测试"><a href="#7-1、测试" class="headerlink" title="7.1、测试"></a>7.1、测试</h2><h3 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul><li><p>一个人有两个宠物</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cu1.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCat</span><span class="params">(Cat cat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cat = cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cat=&quot;</span> + cat.shout() +</span><br><span class="line">                <span class="string">&quot;, dog=&quot;</span> + dog.shout() +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="7-2、ByName-自动装配"><a href="#7-2、ByName-自动装配" class="headerlink" title="7.2、ByName 自动装配"></a>7.2、ByName 自动装配</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  byName 会自动在容器上下文中查找, 和自己对象 set 方法后面的值对应 Bean id</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cu1.pojo.Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Cu1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-3、ByType-自动装配"><a href="#7-3、ByType-自动装配" class="headerlink" title="7.3、ByType 自动装配"></a>7.3、ByType 自动装配</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       byType 会自动在容器上下文中查找, 和自己对象 属性类型相同的 Bean</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cu1.pojo.Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Cu1&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>小结:</p><ul><li><p>ByName 时需要保证所有 Bean 的 id 唯一, 并且这个 Bean 需要和自动注入的属性的 set 方法的值一致</p></li><li><p>ByName 时需要保证所有 Bean 的 class 唯一, 并且这个 Bean 需要和自动注入的属性的属性类型的值一致</p></li></ul><h2 id="7-4、使用注解实现自动装配"><a href="#7-4、使用注解实现自动装配" class="headerlink" title="7.4、使用注解实现自动装配"></a>7.4、使用注解实现自动装配</h2><p>JDK1.5 支持的注解, Spring 在 JDK2.5就开始支持</p><p>要使用注解须知:</p><ol><li><p>导入约束:  context 约束</p></li><li><p>配置注解的支持 ==记得开启配置注解支持     <a href="context:annotation-config/">context:annotation-config/</a>==</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>@Autowired</p><p>​    在属性上使用即可, 也可以在 set 方法上使用 (使用注解不需要再自己写 set 方法)</p><p>​    使用 Autowired 可以不用编写 set 方法, 前提注入的自动装配属性在 IOC (Spring) 容器中存在, 且符合名字 byName</p><p>@Nullable</p><p>​    字段标记了这个注解, 表示这个字段可以为 NULL</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果显示定义了Autowired 的 requid 属性为 false 说明这个对象可以 null 否则不允许为空</span></span><br><span class="line"><span class="meta">@Autowired(required = false)</span></span><br><span class="line"><span class="keyword">private</span> Cat cat;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果显示定义了Autowired 的 requid 属性为 false 说明这个对象可以 null 否则不允许为空</span></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果 @Autowired 自动装配无法通过一个注解装配完成的时候, 可以使用</p><p>@Qualifier(value = “xxx”) 去配置 @Autowired 所指定的唯一 Bean 对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Person &#123;</span><br><span class="line">    //如果显示定义了Autowired 的 requid 属性为 false 说明这个对象可以 null 否则不允许为空</span><br><span class="line">    @Autowired(required = false)</span><br><span class="line">    private Cat cat;</span><br><span class="line">    @Autowired</span><br><span class="line">    @Qualifier(value = &quot;dog&quot;)</span><br><span class="line">    private Dog dog;</span><br><span class="line">    private String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Resource 如果不指定唯一 Bean 对象就先按照名称如果找不到就按照类型</p><p>@Resource(name = “xxx”) 指定唯一 Bean 对象</p><p>小结:</p><p>@Resource 和 @Autowired 的区别:</p><ul><li><p>都是自动装配 都可以放在属性字段上</p></li><li><p>@Autowired 通过 byType 的方式实现 且必须要求这个对象存在</p></li><li><p>@Resoucre 默认通过 byName 的方式实现, 如果找不到名字, 则通过 byType 方式实现, 如果两个都找不到的情况下, 就报错</p><p>[常用]</p></li><li><p>执行顺序不同  @Autowired 通过 byType 寻找 , 在通过 byName 寻找 @Resource 则相反 </p></li></ul><h1 id="8、使用注解开发"><a href="#8、使用注解开发" class="headerlink" title="8、使用注解开发"></a>8、使用注解开发</h1><p>在 Spring 4 之后, 要使用注解开发, 必须要保证 aop 的包导入了</p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="C:\Users\雷神\AppData\Roaming\Typora\typora-user-images\image-20210923133350132.png" alt="image-20210923133350132"></p><p>使用注解需要导入 context 约束 并增加注解支持</p><ul><li>@Component: 组件 放在类上 说明这个类被 Spring 管理了, 也就是 Bean</li></ul><ol><li>Bean</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//等价于&lt;bean id=&quot;user&quot; class=&quot;com.cu1.pojo.User&quot;/&gt;</span></span><br><span class="line"><span class="comment">//@Component 组件</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;Cu1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>属性如何注入</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//等价于&lt;bean id=&quot;user&quot; class=&quot;com.cu1.pojo.User&quot;/&gt;</span></span><br><span class="line"><span class="comment">//@Component 组件</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">//相当于&lt;property name=&quot;name&quot; value=&quot;Cu1&quot;/&gt; 也可以放在 Set 方法上 </span></span><br><span class="line">    <span class="meta">@Value(&quot;Cu1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li><p>衍生的注解</p><p>@Component 有几个衍生的注解 在 Web 开发中 会按照 mvc 三层架构分层</p><ul><li>dao [@Repository]</li><li>service [@Service]</li><li>contronller [@Controller]</li></ul><p>这四个注解功能都是一样的 都是代表将某个类注册到 Spring 中 装配 Bean</p></li><li><p>自动装配置</p></li><li><p>作用域</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope(&quot;&quot;)</span> </span><br></pre></td></tr></table></figure></li><li><p>小结</p><p>xml 与注解:</p><ul><li>xml 更加万能 适用于任何场合 维护简单方便</li><li>注解不是自己的类使用不了 使用相对复杂</li></ul><p>最佳实践:</p><ul><li>xml 负责管理类的注册</li><li>注解负责属性的注入</li><li>在使用过程中只需要注意一个问题 必须要注解生效 就需要开启注解支持</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启注解支持--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--指定要扫描的包 这个包下的注解就会生效--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.cu1&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="9、使用-java-的方式配置-Spring"><a href="#9、使用-java-的方式配置-Spring" class="headerlink" title="9、使用 java 的方式配置 Spring"></a>9、使用 java 的方式配置 Spring</h1><p>现在完全不需要使用 Spring 的 xml 配置了, 全权交给 Java 来做</p><p>JavaConfig 是 Spring 的一个子项目, 在 Spring4 之后 它成为了一个核心功能</p><ul><li><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个注解说明这个类被 Spring 注册到了容器中</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入值</span></span><br><span class="line">    <span class="meta">@Value(&quot;Cu1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置文件</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//类似于 Bean</span><br><span class="line">//这个也会被 Spring 容器托管 因为它本来就是一个 @Component</span><br><span class="line">//@Configuration 代表这是一个配置类就和之前的 Beans.xml 一样</span><br><span class="line">@Configuration</span><br><span class="line">@ComponentScan(&quot;com.cu1.pojo&quot;) //扫描包</span><br><span class="line">//相当于 Bean.xml 中的 import 标签</span><br><span class="line">@Import(MyConfig2.class)</span><br><span class="line">public class MyConfig &#123;</span><br><span class="line">    //注册一个 Bean 就相当于之前写的一个 Bean 标签, </span><br><span class="line">    //这个方法的名字就相当于 Bean 标签中的 Id 属性, 方法的返回值就相当于 Bean 标签中的 Class </span><br><span class="line">    @Bean</span><br><span class="line">    public User getUser() &#123;</span><br><span class="line">        //该返回值就是要注入到 Bean 的对象</span><br><span class="line">        return new User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*如果完全使用了配置类方式去做, 就只能通过 AnnotationConfig 上下文来获取容器, 通过配置类的 Class 对象加载*/</span></span><br><span class="line">        ApplicationContext Context = <span class="keyword">new</span> AnnotationConfigApplicationContext(MyConfig.class);</span><br><span class="line">        User getUser = Context.getBean(<span class="string">&quot;getUser&quot;</span>, User.class);</span><br><span class="line">        System.out.println(getUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>这种纯 Java 的配置方式, 在 SpringBoot 中随处可见</p><h1 id="10、代理模式"><a href="#10、代理模式" class="headerlink" title="10、代理模式"></a>10、代理模式</h1><p><strong>学代理模式的理由</strong>:</p><p>​    因为这即是 SpringAOP 的底层 [SpringAOP 和 SpringMVC]</p><p>代理模式的分类:</p><ul><li>静态代理</li><li>动态代理</li></ul><h2 id="10-1、静态代理"><a href="#10-1、静态代理" class="headerlink" title="10.1、静态代理"></a>10.1、静态代理</h2><p>角色分析:</p><ul><li>抽象角色: 一般会使用接口或者抽象类来解决</li><li>真实角色: 被代理的角色</li><li>代理角色: 代理真实角色, 代理真实角色后, 一般会做一些附属操作</li><li>客户: 访问代理对象的人</li></ul><p>代码步骤:</p><ol><li><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//租房</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>真实角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//房东</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东要租房子!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//中介</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Host host;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Host host)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Host <span class="title">getHost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seeHouse();</span><br><span class="line">        host.rent();</span><br><span class="line">        <span class="keyword">this</span>.hetong();</span><br><span class="line">        <span class="keyword">this</span>.fare();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHost</span><span class="params">(Host host)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//看房</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeHouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介带你看房&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//收中介费</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收中介费&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//签租赁合同</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hetong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;签租赁合同&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>客户端访问代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Host host = <span class="keyword">new</span> Host();</span><br><span class="line">        <span class="comment">//代理 中介帮房东租房子, 但是代理一般会有一些附属操作</span></span><br><span class="line">        Proxy proxy = <span class="keyword">new</span> Proxy(host);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//你不需要面对房东 直接找中介租房即可</span></span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>代理模式的好处:</p><ul><li>可以使真实角色的操作更加纯粹, 不用去关注一些公共的业务</li><li>公共业务就交给代理角色, 实现了业务的分工</li><li>公共业务发生扩展的时候方便集中管理</li></ul><p>缺点:</p><ul><li>一个真实角色就会产生一个代理角色 代码量会翻倍 ———–&gt;开发效率会降低</li></ul><h2 id="10-2、加深理解"><a href="#10-2、加深理解" class="headerlink" title="10.2、加深理解"></a>10.2、加深理解</h2><p>基本架构</p><ul><li><p>Service 层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserSerivce</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>实现类 Impl层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserSerivceImpl</span> <span class="keyword">implements</span> <span class="title">UserSerivce</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用了 add 方法&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;增加了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 1. 改动原来已经写好的代码是大忌</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>代理层 Proxy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceProxy</span> <span class="keyword">implements</span> <span class="title">UserSerivce</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    UserSerivceImpl userSerivceImpl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserSerivceImpl</span><span class="params">(UserSerivceImpl userSerivceImpl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userSerivceImpl = userSerivceImpl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">&quot;:add&quot;</span>);</span><br><span class="line">        userSerivceImpl.add();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">&quot;:delete&quot;</span>);</span><br><span class="line">        userSerivceImpl.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">&quot;:udpate&quot;</span>);</span><br><span class="line">        userSerivceImpl.update();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">&quot;query&quot;</span>);</span><br><span class="line">        userSerivceImpl.query();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//日志方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Debug]使用了&quot;</span> + msg + <span class="string">&quot;方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>控制层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UserSerivceImpl userSerivce = <span class="keyword">new</span> UserSerivceImpl();</span><br><span class="line"></span><br><span class="line">        UserServiceProxy userServiceProxy = <span class="keyword">new</span> UserServiceProxy();</span><br><span class="line">        userServiceProxy.setUserSerivceImpl(userSerivce);</span><br><span class="line"></span><br><span class="line">        userServiceProxy.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="10-3、动态代理"><a href="#10-3、动态代理" class="headerlink" title="10.3、动态代理"></a>10.3、动态代理</h2><ul><li>动态代理和静态代理角色一样</li><li>动态代理的代理类是动态生成的, 不是直接写好的</li><li>动态代理分为两大类: 基于接口的动态代理, 基于类的动态代理<ul><li>基于接口 —– JDK 动态代理 [在此处使用]</li><li>基于类: cglib</li><li>Java 字节码 JavaSist</li></ul></li></ul><p>需要了解两个类: Proxy 代理, InvocationHandler: 调用处理程序</p><h3 id="10-3-1、InvocationHandler"><a href="#10-3-1、InvocationHandler" class="headerlink" title="10.3.1、InvocationHandler"></a>10.3.1、InvocationHandler</h3><p>​    动态代理的好处</p><ul><li>可以使真实角色的操作更加纯粹, 不用去关注一些公共的业务</li><li>公共业务就交给代理角色, 实现了业务的分工</li><li>公共业务发生扩展的时候方便集中管理</li><li>一个动态代理类代理的是一个接口, 一般代理一类的业务</li><li>一个动态代理类可以代理多个类, 只要实现了同一个接口</li></ul><h4 id="ProxyInvocatonHandler-实现"><a href="#ProxyInvocatonHandler-实现" class="headerlink" title="ProxyInvocatonHandler 实现"></a>ProxyInvocatonHandler 实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//会使用这个类自动生成代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocatonHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//被代理的接口</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成得到的代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理代理实例并返回结果</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        log(method.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//动态代理的本质就是使用反射机制实现</span></span><br><span class="line">        Object invoke = method.invoke(target, args);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Object target)</span> </span>&#123; <span class="keyword">this</span>.target = target; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span> </span>&#123; System.out.println(<span class="string">&quot;执行了&quot;</span> + msg + <span class="string">&quot;方法&quot;</span>); &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//真实角色</span></span><br><span class="line">        UserSerivceImpl userSerivce = <span class="keyword">new</span> UserSerivceImpl();</span><br><span class="line">        <span class="comment">//代理角色 不存在</span></span><br><span class="line">        ProxyInvocatonHandler pih = <span class="keyword">new</span> ProxyInvocatonHandler();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置要代理的对象</span></span><br><span class="line">        pih.setTarget(userSerivce);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//动态生成代理类</span></span><br><span class="line">        UserSerivce proxy = (UserSerivce) pih.getProxy();</span><br><span class="line"></span><br><span class="line">        proxy.delete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="结构分析"><a href="#结构分析" class="headerlink" title="结构分析:"></a>结构分析:</h4><ol start="0"><li><p><strong>流程:</strong></p><p>首先通过 利用 Set 方法接收某一个实现接口的类, 在调用<code>public Object getProxy() &#123;&#125;</code> 方法获取到代理类 然后通过代理类去掉用 <code>ProxyInvocatonHandler</code> 类中的<code>public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;&#125;</code> 函数去调用利用代理类要运行的接口的实现类的某个要运行的方法</p></li><li><p><strong>被代理对象</strong></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//被代理的接口</span></span><br><span class="line"><span class="keyword">private</span> Object target;</span><br></pre></td></tr></table></figure><p>target 表示被代理的实体对象, 也即某一个接口的实现类, 即可参考第一个 demo 中的房东</p><ol start="2"><li><p><strong>设置要代理的对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置要代理的对象</span></span><br><span class="line">pih.setTarget(userSerivce);</span><br></pre></td></tr></table></figure></li><li><p> <strong>处理代理实例并返回结果</strong></p></li></ol>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">log(method.getName());</span><br><span class="line">    <span class="comment">//动态代理的本质就是使用反射机制实现</span></span><br><span class="line">    Object invoke = method.invoke(target, args);</span><br><span class="line">    <span class="keyword">return</span> invoke;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>proxy 代理类</li><li>method 代理类要调用的实现类中实现的接口方法</li><li>Object [] args 代理类要调用的实现类中实现的接口方法的参数</li></ul><ol start="4"><li><p><strong>通过 Proxy 类的静态方法得到的 Proxy 代理类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成得到的代理类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(), </span><br><span class="line">                 target.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li> this.getClass().getClassLoder 获取 <code>ProxyInvocatonHandler</code> 类的类加载器</li><li> target.getClass().getInterfaces() 获取当前实现类的接口, 以便获得接口及其方法中的信息, 以便在调用实现类方法时找到相对应的方法及其实现作为参数 <code>method</code> 传递给 <code>invoke</code> 方法</li><li>this 则是提供自身以便代理类 proxy 进行调用 <code>invoke</code> 方法</li></ul></li></ol><h1 id="11、AOP"><a href="#11、AOP" class="headerlink" title="11、AOP"></a>11、AOP</h1><h2 id="11-1、什么是-AOP"><a href="#11-1、什么是-AOP" class="headerlink" title="11.1、什么是 AOP"></a>11.1、什么是 AOP</h2><p>​    AOP : 面向切面编程, 通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术. AOP 是 OOP 的延续, 是 Spring 框架中的一个重要内容, 是函数式编程的一种衍生泛型. 利用 AOP 可以对业务逻辑的各个部分进行隔离, 从而使得业务逻辑各部分之间的耦合度降低, 提高程序的可重用性, 同时提高了开发效率</p><h2 id="11-2、-AOP-在-Spring-中的作用"><a href="#11-2、-AOP-在-Spring-中的作用" class="headerlink" title="11.2、 AOP 在 Spring 中的作用"></a>11.2、 AOP 在 Spring 中的作用</h2><p>==提供声明式事务, 允许用户自定义切面==</p><ul><li>横切关注点: 跨越应用程序多个模块的方法或者功能. 即是, 与业务逻辑无关, 但是需要关注的部分, 就是横切关注点. 如日志, 安全, 缓存,     事务等等</li><li>切面 (ASPECT): 横切关注点 被模块化的特殊对象. 即它是一个类</li><li>通知 (Advice): 切面必须要完成的工作. 即, 它是类中的一个方法</li><li>目标( Target): 被通知对象</li><li>代理 (Proxy): 向目标对象应用通知之后创建的对象</li><li>切入点 (PointCut): 切面通知执行的 “地点的定义”</li><li>连接点 (JointPoint): 于切入点匹配的执行点</li></ul><p>Spring AOP 中 通过 Advice 定义横切逻辑, Spring 中支持五种类型的1 Advice</p><blockquote><p>通知（Advice）</p><p>在特定的连接点，AOP框架执行的动作。</p><p>Spring AOP 提供了5种类型的通知：</p><ul><li>前置通知（Before）：在目标方法被调用之前调用通知功能。</li><li>后置通知（After）：在目标方法完成之后调用通知，无论该方法是否发生异常。</li><li>后置返回通知（After-returning）：在目标方法成功执行之后调用通知。</li><li>异常抛出通知（After-throwing）：在目标方法抛出异常后调用通知。</li><li>环绕通知（Around）：通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为。</li></ul></blockquote><p>即 AOP 在不改变原有代码的情况下, 去增加新的功能</p><h2 id="11-3、使用-Spring-实现-AOP"><a href="#11-3、使用-Spring-实现-AOP" class="headerlink" title="11.3、使用 Spring 实现 AOP"></a>11.3、使用 Spring 实现 AOP</h2><p>使用 AOP 需要导入一个依赖包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>方式一: 使用 Spring 的 API 接口</strong></p><ul><li><p>接口:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>要在原实现功能上增加的两个方法类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterLog</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line">    <span class="comment">//returnValue 返回值</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了&quot;</span> + method.getName() + <span class="string">&quot;方法, 返回结果为: &quot;</span> + returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*method 要执行的目标对象的方法</span></span><br><span class="line"><span class="comment">    * args 参数</span></span><br><span class="line"><span class="comment">    * target 目标对象</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(target.getClass().getName() + <span class="string">&quot;的&quot;</span> + method.getName() + <span class="string">&quot;被执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>XML 文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=</span></span><br><span class="line"><span class="tag">               <span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册 Bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cu1.Service.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cu1.Log.Log&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cu1.Log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--方式一: 使用原生 Spring API 接口--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置 AOP 需要导入 AOP 的约束--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点 experssion: 表达式 execution(要执行的位置 * * * * * *)--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.cu1.Service.UserServiceImpl.*())&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--执行环绕增加--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext Context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//动态代理的是接口</span></span><br><span class="line">        UserService userService = (UserService)Context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line"></span><br><span class="line">        userService.select();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>思考:</strong></p><p>在 <code>ApplicationContext Context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</code> 时 Spring 根据 AOP  标签中的实现类要代理的某些方法以及这个其他要通过代理执行这些方法的其他方法, 并返回一个代理类 其中继承了实现类中要代理方法的接口, 这些接口的实现是通过调用实现类的方法完成, 并加入将一些核心操作之外, 即实现代理模式 </p><p><strong>方式二: 自定义来实现 AOP [相对于第一种更简单]</strong></p><ul><li><p>自定义类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiyPointCut</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======方法执行前=======&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======方法执行后========&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>XML 文件配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式二: 自定义类--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cu1.Diy.DiyPointCut&quot;</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--自定义切面 ref 要引用的类--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diy&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;poincut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.cu1.Service.UserServiceImpl.*())&quot;</span>/&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--通知--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;poincut&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;poincut&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;aop:aspect ref=&quot;diy&quot;&gt;&lt;/aop:aspect&gt;</code> 表示告诉 Spring 要在代理类中加入的代理方法的类是哪一个</p><p><code> &lt;aop:pointcut id=&quot;poincut&quot; expression=&quot;execution(* com.cu1.Service.UserServiceImpl.*())&quot;/&gt;</code></p><p>告诉 Spring Diy 类的对象 diy 中的方法要代理的是哪一个实体类以及它实现的什么方法、</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;poincut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;poincut&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>告诉 Spring Diy 类的 diy 对象中的某些方法在代理类中处于要代理方法的什么位置, 以及在什么被代理类中的什么被代理方法中使用这个方法</p></li></ul><p><strong>方式三:  使用注解实现</strong></p><ul><li><p>XML</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式三: --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotationPointCut&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cu1.AnnotationPoinCut.AnnotationPointCut&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启注解支持 JDK(默认) false  cglib (true)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>java 类的注解实现 AOP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用注解方式实现 AOP</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//标注这个类是一个切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationPointCut</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.cu1.Service.UserServiceImpl.*())&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=======方法执行前========&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.cu1.Service.UserServiceImpl.*())&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=======方法执行前后=======&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在环绕增强中 可以给定一个参数 代表要获取处理切入的点</span></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.cu1.Service.UserServiceImpl.*())&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕前&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        Object proceed = jp.proceed();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;环绕后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="12、整合-MyBatis"><a href="#12、整合-MyBatis" class="headerlink" title="12、整合 MyBatis"></a>12、整合 MyBatis</h1><p>==<strong><a href="http://mybatis.org/spring/zh/getting-started.html">文档</a></strong>==</p><p>步骤:</p><ol><li><p>导入相关 Jar 包</p><ul><li>junit</li><li>MyBatis</li><li>MySQL</li><li>Spring</li><li>AOP 织入</li><li>MyBaits-Spring</li></ul><p><strong>==pom.xml 文件依赖==</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.16.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">     <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--&lt;scope&gt;runtime&lt;/scope&gt;--&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">     <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">     <span class="comment">&lt;!--Spring 操作数据库的话 还需要一个 Spring-jdbc 的包--&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">     <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写配置文件</p></li><li><p>测试</p></li></ol><h2 id="12-1、回忆-MyBatis"><a href="#12-1、回忆-MyBatis" class="headerlink" title="12.1、回忆 MyBatis"></a>12.1、回忆 MyBatis</h2><ol><li>编写实体类</li><li>编写核心配置文件</li><li>编写接口</li><li>编写 Mapper.xml</li><li>测试</li></ol><h2 id="12-2、MyBatis-Spring"><a href="#12-2、MyBatis-Spring" class="headerlink" title="12.2、MyBatis -Spring"></a>12.2、MyBatis -Spring</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一:"></a>方式一:</h3><ol><li><p>编写数据源:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=</span></span><br><span class="line"><span class="tag">               <span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--!DataSource 使用 Spring 的数据源替换 MyBatis 的配置 c3P0, dbcp, druid</span></span><br><span class="line"><span class="comment">        此处使用 Spring 的 JDBC</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://:3306/?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--SqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定 MyBatis 配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/cu1/mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--SqlSessionTemplate 等价于原来使用的 sqlSession--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--只能使用构造器注入 sqlSessionFactory, 因为它没有 Set 方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>SqlSessionFactory</p></li><li><p>SqlSessionTemplate</p></li><li><p>需要给接口加实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span>  <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在原来, 所有操作都使用 SqlSession 来执行, 现在都使用 SqlSessionTemplate</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="keyword">return</span> mapper.selectUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>测试 (将自己写的实现类注入到 Spring 中测试使用)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=</span></span><br><span class="line"><span class="tag">               <span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;Spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cu1.mapper.UserMapperImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="meta">@org</span>.junit.<span class="function">Test</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ApplicationContext classPathXmlApplicationContext = <span class="keyword">new</span>ClassPathXmlApplicationContext(<span class="string">&quot;Spring-dao.xml&quot;</span>);</span><br><span class="line">        UserMapper userMapper = classPathXmlApplicationContext.getBean(<span class="string">&quot;userMapper&quot;</span>, UserMapper.class);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectUser();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二:"></a>方式二:</h3><p>​    利用实现类继承 <code>SqlSessionDaoSupport</code> 类并利用其  <code>getSqlSession()</code> 方法得到 <code>sqlSession</code></p><ol><li>实现类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl2</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession sqlSession = getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="keyword">return</span> mapper.selectUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>在 Spring 中注册实现类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;userMapper2&quot; class=&quot;com.cu1.mapper.UserMapperImpl2&quot;&gt;</span><br><span class="line">       &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;/&gt;</span><br><span class="line"> &lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="meta">@org</span>.junit.<span class="function">Test</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        UserMapper userMapper = context.getBean(<span class="string">&quot;userMapper2&quot;</span>, UserMapper.class);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectUser();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li></ol><h1 id="13、声明式事务"><a href="#13、声明式事务" class="headerlink" title="13、声明式事务"></a>13、声明式事务</h1><h2 id="1、回顾事务"><a href="#1、回顾事务" class="headerlink" title="1、回顾事务"></a>1、回顾事务</h2><ul><li>把一组业务当作一个业务来做, 要么都成功, 要么都失败</li><li>事务在项目开发中, 十分的重要, 涉及到数据的一致性问题, 不能马虎</li><li>确保完整性和一致性</li></ul><p>事务 ACID 原则:</p><ul><li>原子性</li><li>一致性</li><li>隔离性<ul><li>多一个业务可能操作同一个资源, 防止数据损坏</li></ul></li><li>持久性<ul><li>事务一旦提交, 无论系统发生什么问题, 结果都不会再被影响, 被持久化的写到存储器中</li></ul></li></ul><h2 id="2、Spring-中的事务管理"><a href="#2、Spring-中的事务管理" class="headerlink" title="2、Spring 中的事务管理"></a>2、Spring 中的事务管理</h2><ul><li><p>声明式事务: AOP</p></li><li><p>编程式事务: 需要再代码中, 进行事务的管理</p><p>开启事务以及配置事务的 XML</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=</span></span><br><span class="line"><span class="tag">               <span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--!DataSource 使用 Spring 的数据源替换 MyBatis 的配置 c3P0, dbcp, druid</span></span><br><span class="line"><span class="comment">        此处使用 Spring 的 JDBC</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://47.100.227.175:3306/School?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;MysqlRoot&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;370802mysql&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--SqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定 MyBatis 配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/cu1/mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--SqlSessionTemplate 等价于原来使用的 sqlSession--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--只能使用构造器注入 sqlSessionFactory, 因为它没有 Set 方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置声明式事务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--结合 AOP 实现事务的织入--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务通知:--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--给哪一些方法配置事务--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置事务的传播特性: new propagation=&quot;&quot;</span></span><br><span class="line"><span class="comment">            propagation=&quot;REQUIRED 支持当前事务, 如果没有当前事务, 就新建一个事务, 这是最常见的选择, 也是 Spring 默认选择</span></span><br><span class="line"><span class="comment">            propagation=&quot;SUPPORTS&quot; 支持当前事务, 如果当前没有事务, 就以非事务方式执行</span></span><br><span class="line"><span class="comment">            propagation=&quot;MANDATORY&quot; 支持当前事务, 如果当前没有事务, 就抛出异常</span></span><br><span class="line"><span class="comment">            propagation=&quot;REQUIRES_NEW&quot; 新建事务, 如果当前存在事务, 就把当前事务挂起</span></span><br><span class="line"><span class="comment">            propagation=&quot;NOT_SUPPORTED&quot; 以非事务方式执行操作, 如果当前存在事务, 就把当前事务挂起</span></span><br><span class="line"><span class="comment">            propagation=&quot;NEVER&quot; 以非事务方式执行, 如果当前存在事务, 则抛出异常</span></span><br><span class="line"><span class="comment">            propagation=&quot;NESTED&quot; 支持当前事务, 如果当前事务存在, 则执行一个嵌套事务, 如果当前没有事务, 就新建一个事务</span></span><br><span class="line"><span class="comment">            read-only=&quot;true&quot; 只读权限</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置事务切入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.cu1.mapper.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>为什么需要事务?</p><ul><li>如果不配置事务, 可能存在数据提交不一致的情况下:</li><li>如果不在 Spring 中配置声明事务, 就需要在代码中手动配置事务</li><li>事务在项目开发中十分重要, 涉及到数据的一致性和完整性问题, 不容马虎</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring, java, framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="/Java/Spring/SpringMVC/"/>
      <url>/Java/Spring/SpringMVC/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><p><strong>ssm: MyBatis + Spring + SpringMVC</strong> ==MVC 三层架构==</p><p>MVC: 模型 (Dao, Service)  视图 (JSP) 控制器 (Servlet)</p><p>dao</p><p>service</p><p>servlet: 转发, 重定向</p><p>jsp / html</p><h2 id="1、回顾-Servlet"><a href="#1、回顾-Servlet" class="headerlink" title="1、回顾 Servlet"></a>1、回顾 Servlet</h2><ol><li>导入所需依赖:</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.16.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>编写一个 Servlet 类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取前端参数</span></span><br><span class="line">        String method = req.getParameter(<span class="string">&quot;method&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (method.equals(<span class="string">&quot;add&quot;</span>)) &#123;</span><br><span class="line">            req.getSession().setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;执行了 add 方法&quot;</span>);e</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (method.equals(<span class="string">&quot;delete&quot;</span>)) &#123;</span><br><span class="line">            req.getSession().setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;执行了 delete 方法&quot;</span>);e</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.调用业务层</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.重定向</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/test.jsp&quot;</span>).forward(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>编写 Hello.jsp 在 WEB-INF 目录下新建一个 jsp 文件夹, 新建 test.jsp</li></ol><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 雷神</span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">9</span>/<span class="number">30</span></span><br><span class="line">  Time: <span class="number">15</span>:<span class="number">39</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">$&#123;msg&#125;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>在 web.xml 中注册 Servlet</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.cu1.Servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;session-config&gt;</span></span><br><span class="line"><span class="comment">        &amp;lt;!&amp;ndash;设置等待时间&amp;ndash;&amp;gt;</span></span><br><span class="line"><span class="comment">        &lt;session-timeout&gt;15&lt;/session-timeout&gt;</span></span><br><span class="line"><span class="comment">    &lt;/session-config&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--欢迎页面 默认 index--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;welcome-file-list&gt;</span></span><br><span class="line"><span class="comment">        &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</span></span><br><span class="line"><span class="comment">    &lt;/welcome-file-list&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>配置Tomcat 开启启动测试<ul><li><a href="http://localhost:8080/SpringMVC-01/hello?method=add">http://localhost:8080/SpringMVC-01/hello?method=add</a></li><li><a href="http://localhost:8080/SpringMVC-01/hello?method=delete">http://localhost:8080/SpringMVC-01/hello?method=delete</a></li></ul></li></ol><p><strong>MVC 框架要做哪些事情</strong></p><ol><li>将 url 映射到 java 类或 java 类方法</li><li>封装用户提交的数据</li><li>处理请求, 调用相关的业务处理  – 封装相应数据</li><li>将相应数据进行渲染 .jsp / html 等表示层数据</li></ol><p><strong>SpringMVC 特点:</strong></p><ol><li>轻量级</li><li>高效 基于请求相应的 MVC 框架‘</li><li>与 Spring 兼容性好, 无缝结合</li><li>约定优于配置</li><li>功能强大: RESful 数据验证, 格式化, 本地化, 主题等</li><li>简洁灵活</li><li>使用的人多</li></ol><h2 id="2、中心控制器"><a href="#2、中心控制器" class="headerlink" title="2、中心控制器"></a>2、中心控制器</h2><p><strong>DispatcherServlet</strong> 最上层继承了 Servlet 所以其本质就是 Servlet</p><p>​    Spring 的 Web 框架围绕  DispatcherServlet 设计, DispatcherServlet 的作用是将请求分发到不同的处理器</p><p>从 Spring2.5 开始 使用 jAVA 5 或以上版本的用户可以采用基于注解的 <code>controller</code> 声明方式</p><p>​    <strong>SpringMVC 框架像许多其他 MVC 框架一样, 以请求为驱动, 围绕一个中心 Servlet 分派请求以及提供其他功能 DispatcherServlet 是一个实际的 Servlet (它继承自 HttpServlet 基类)</strong></p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy91SkRBVUtyR0M3S3dQT1BXcTAwcE1KaWFLODZsRjZCakk3RU51MGpOaWJQaWFpYWlhQmh5eDZvOVVVeVU4Mk1kZGc0RGp3em5pYWN6bVRMUmJBdEk5cEtKcTF0US82NDA?x-oss-process=image/format,png" alt="img"></p><p><strong>SpringMVC的原理如下图所示</strong>：</p><p>当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy91SkRBVUtyR0M3S3dQT1BXcTAwcE1KaWFLODZsRjZCaklhb3NWemljbFdMRUpRa3pvYnhIcnBIY210dTJ5VGVWV1BtRUk0WXE1UGFpY1M1MlZhSnQ4ZFlmUS82NDA?x-oss-process=image/format,png" alt="img"></p><h2 id="3、Hello-SpringMVC"><a href="#3、Hello-SpringMVC" class="headerlink" title="3、Hello, SpringMVC"></a>3、Hello, SpringMVC</h2><ol><li><p>新建一个Moudle ， springmvc-02-hello ， 添加web的支持！</p></li><li><p>确定导入了SpringMVC 的依赖</p></li><li><p>配置web.xml, 注册DispatcherServlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1.注册DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--启动级别-1--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写SpringMVC 的 配置文件! 名称: springmvc-servlet.xml : [servletname]-servlet.xml</p><p>说明，这里的名称要求是按照官方来的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Handler--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cu1.Controller.HelloController&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加 处理映射器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span><br></pre></td></tr></table></figure></li><li><p>添加 处理器适配器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加 视图解析器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写要操作业务的Controller ，要么实现Controller接口，要么增加注解；需要返回一个ModelAndView，装数据，封视图；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cu1.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：这里我们先导入Controller接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="comment">//ModelAndView 模型和视图</span></span><br><span class="line">            ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">            <span class="comment">//封装对象，放在ModelAndView中。Model</span></span><br><span class="line">            mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;HelloSpringMVC!&quot;</span>);</span><br><span class="line">            <span class="comment">//封装要跳转的视图，放在ModelAndView中</span></span><br><span class="line">            mv.setViewName(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">            <span class="comment">//: /WEB-INF/jsp/hello.jsp</span></span><br><span class="line">            <span class="keyword">return</span> mv;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>将写好的 <code>Controller</code> 类交给SpringIOC容器，注册bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cu1.Controller.HelloController&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>写要跳转的jsp页面，显示ModelandView存放的数据，以及我们的正常页面；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 雷神</span><br><span class="line">  Date: 2021/10/5</span><br><span class="line">  Time: 21:08</span><br><span class="line">  To change this template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">$&#123;msg&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置Tomcat 启动测试</p></li></ol><p><strong>可能遇到的问题：访问出现404，排查步骤：</strong></p><ol><li><p>查看控制台输出，看一下是不是缺少了什么jar包。</p></li><li><p>如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！</p></li></ol><p>新建一个 lib 文件夹后点第一个 选中所有依赖后点击 Ok 即可</p><p>最后重启 Tomcat 即可</p><h2 id="4、SpringMVC-执行原理"><a href="#4、SpringMVC-执行原理" class="headerlink" title="4、SpringMVC 执行原理"></a>4、SpringMVC 执行原理</h2><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy91SkRBVUtyR0M3S3dQT1BXcTAwcE1KaWFLODZsRjZCaklibVBPa1k4VHhGNnF2R0FHWHhDN2RBclljcjh1SmxXb1ZDNGFGNGJmeGdDR0NEOHNIZzhtZ3cvNjQw?x-oss-process=image/format,png" alt="img"></p><p>图为SpringMVC的一个较完整的流程图，实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线表示需要开发者实现</p><p>简要分析执行流程</p><p>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。</p><p>我们假设请求的url为 : <a href="http://localhost:8080/SpringMVC/hello">http://localhost:8080/SpringMVC/hello</a></p><p>如上url拆分成三部分：</p><p><a href="http://localhost:8080服务器域名">http://localhost:8080服务器域名</a></p><p>SpringMVC部署在服务器上的web站点</p><p>hello表示控制器</p><ol start="0"><li><p>通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器。</p></li><li><p>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler。</p></li><li><p>HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器为：hello。</p></li><li><p>HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等。</p></li><li><p>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</p></li><li><p>Handler让具体的Controller执行。</p></li><li><p>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</p></li><li><p>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</p></li><li><p>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。</p></li><li><p>视图解析器将解析的逻辑视图名传给DispatcherServlet。</p></li><li><p>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</p></li><li><p>最终视图呈现给用户。</p></li></ol><h2 id="5、SpringMVC-注解"><a href="#5、SpringMVC-注解" class="headerlink" title="5、SpringMVC 注解"></a>5、SpringMVC 注解</h2><ol><li><p>编写 xml 文件</p><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1.注册DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--启动级别-1--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Springmvc-servlet.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.cu1.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 让Spring MVC不处理静态资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 支持mvc注解驱动</span></span><br><span class="line"><span class="comment">        在spring中一般采用@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">        要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">        必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">        和一个AnnotationMethodHandlerAdapter实例 这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">         而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>编写 controller 文件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">//类里面请求路径前都要加 /h</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/h&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//真实访问地址: 项目名/h/hello</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//封装数据 向模型中添加属性 msg 与值 可以在 jsp 界面中取出并渲染</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Hello, SpringMVCAnnotation!&quot;</span>);</span><br><span class="line">        <span class="comment">//会被视图解析器处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li> <strong>@RequestMapping 注解的功能</strong></li></ul><p>  从注解名称上我们可以看到，<code>@RequestMapping</code> 注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。</p><p>  SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</p><ul><li> <strong>@RequestMapping 注解的位置</strong></li></ul><p>  @RequestMapping 标识一个类：设置映射请求的请求路径的初始信息</p><p>  @RequestMapping 标识一个方法：设置映射请求请求路径的具体信息</p><p>  如果一个类上添加了 <code>@RequestMapping</code> 注解 那么就给这个类中所有的映射加上了一个初始 (父) 地址 </p></li></ol><p><strong>流程:</strong></p><ul><li>首先通过 url 通过映射处理和查找控制器找到注解的相应映射的类中的方法</li><li>通过 <code>HandlerAdapter</code> 表示处理器适配器执行找到的方法</li><li>将返回值中的视图名传递给 <code>HandlerAdapter</code> 以及在类中封装的数据</li><li>显示视图</li></ul><p><strong>==说明==</strong></p><p>​    若出现了 <code>500</code> 错误要将 <code>pom.xml</code> 以及 该项目的 <code>JDK</code>版本降至 <code>11</code></p><h2 id="6、RestFul和控制器"><a href="#6、RestFul和控制器" class="headerlink" title="6、RestFul和控制器"></a>6、RestFul和控制器</h2><h3 id="控制器Controller"><a href="#控制器Controller" class="headerlink" title="控制器Controller"></a>控制器Controller</h3><ul><li>控制器复杂提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现。</li><li>控制器负责解析用户的请求并将其转换为一个模型。</li><li>在Spring MVC中一个控制器类可以包含多个方法</li><li>在Spring MVC中，对于Controller的配置方式有很多种</li></ul><p>控制器 <code>Controller</code> 的使用方式有两种</p><ul><li>在 3 中使用继承 <code>Controller</code> 并实现方法</li><li>使用 <code>Controller</code> 注解 (推荐该使用方式)</li></ul><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a><strong>说明：</strong></h3><ul><li>实现接口Controller定义控制器是较老的办法</li><li>缺点是：一个控制器中只有一个方法，如果要多个方法则需要定义多个Controller；定义的方式比较麻烦；</li></ul><h3 id="使用注解-Controller"><a href="#使用注解-Controller" class="headerlink" title="**使用注解 @Controller **"></a>**使用注解 @Controller **</h3><ul><li><code>Controller</code> 注解类型用于声明Spring类的实例是一个控制器（在讲IOC时还提到了另外3个注解）；</li><li>Spring可以使用扫描机制来找到应用程序中所有基于注解的控制器类，为了保证Spring能找到你的控制器，需要在配置文件中声明组件扫描。</li></ul><p><strong>多个请求都可以指向一个视图，但是页面结果的结果是不一样的，从这里可以看出视图是被复用的，而控制器与视图之间是弱偶合关系。</strong></p><h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a><strong>@RequestMapping</strong></h3><p>在 5 中进行了描述 此处略过</p><h3 id="RestFul-风格"><a href="#RestFul-风格" class="headerlink" title="RestFul 风格"></a><strong>RestFul 风格</strong></h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><p>资源：互联网所有的事物都可以被抽象为资源</p><p>资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。</p><p>分别对应 添加、 删除、修改、查询。</p><p><strong>测试代码</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestFulController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@RequestMapping(&quot;/add/&#123;a&#125;/&#123;b&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/add/&#123;a&#125;/&#123;b&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> a, <span class="meta">@PathVariable</span>  <span class="keyword">int</span> b, Model model)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = a + b;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;add 结果为:&quot;</span> + res);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;add&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/add/&#123;a&#125;/&#123;b&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> a, <span class="meta">@PathVariable</span>  <span class="keyword">int</span> b, Model model)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = a + b;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;add 结果1为:&quot;</span> + res + <span class="number">5</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;11111111111&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;add&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>/&#123;a&#125;</code> 表示取出 <code>add</code> 后参数将其赋值给变量 <code>a</code> <code>@PathVariable</code> 注解为指定这个参数为接收前端传递的相对应的参数</p><p>若前端传递的为一个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里使用 <code>lombok</code> 要注意使用版本不要过低 此处使用的为 1.18 版本</strong></p><p><strong>UserController:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//localhost:8080/user/t1?name = ***;</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/t1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name, Model model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 接收前端参数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;接收到前端的参数为: &quot;</span> + name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 将返回的结果传递给前端</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.跳转视图</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;add&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前端接收的是一个对象: id, name, age</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 1. 接收前端用户传递的参数 判断参数的名字 假设名字直接在方法上 可以直接使用</span></span><br><span class="line"><span class="comment">     * 2. 假设传递的是一个对象 User 匹配 User 对象中的字段名 如果名字与对象中属性名一致则会接收 否则该属性会接收失败</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/t2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;add&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>若是参数名与前端传递的参数不同, 需要 <code>@RequestParam(&quot;username&quot;)</code> 来指定接收参数的名字</p><p><strong>要跳转的 <code>jsp</code> 页面</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 雷神</span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">10</span>/<span class="number">7</span></span><br><span class="line">  Time: <span class="number">15</span>:<span class="number">02</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/SpringMVC_04/add/1/3&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注\： form 表单的路径应写完整 在提交时不会自动补全项目路径</strong></p><ol><li>思考：使用路径变量的好处？<ul><li>使路径变得更加简洁；</li><li>获得参数更加方便，框架会自动进行类型转换。</li><li>通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求方法，如这里访问是的路径是/commit/1/a，则路径与方法不匹配，而不会是参数转换失败。</li></ul></li></ol><h4 id="所有的地址栏请求默认都会是-HTTP-GET-类型的。"><a href="#所有的地址栏请求默认都会是-HTTP-GET-类型的。" class="headerlink" title="所有的地址栏请求默认都会是 HTTP GET 类型的。"></a>所有的地址栏请求默认都会是 HTTP GET 类型的。</h4><p>方法级别的注解变体有如下几个：组合注解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping</span><br><span class="line">@PostMapping</span><br><span class="line">@PutMapping</span><br><span class="line">@DeleteMapping</span><br><span class="line">@PatchMapping</span><br></pre></td></tr></table></figure><h3 id="关于-Model"><a href="#关于-Model" class="headerlink" title="关于 Model"></a>关于 Model</h3><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="C:\Users\雷神\AppData\Roaming\Typora\typora-user-images\image-20211007215256133.png" alt="image-20211007215256133" style="zoom:200%;" /><p>Model 本质为一个接口, <code>model</code> 接收的为某一个实现类 此处大但猜测为 <code>ModelMap</code></p><p><code>ModelMap</code> 实现了除了 Model 必要的功能之外又扩展了更多的功能 但平时使用其实现的 <code>Model</code> 的接口已经够用了 <code>Model</code> 可以理解提供了更简易的功能</p><h2 id="7、解决乱码"><a href="#7、解决乱码" class="headerlink" title="7、解决乱码"></a>7、解决乱码</h2><p>此处没啥好说的 直接使用 <code>SpringMVC</code>提供的过滤器即可 配置在 <code>web.xml</code> 中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更高级的自定义过滤器可以自行搜索</p><h2 id="8、JSON"><a href="#8、JSON" class="headerlink" title="8、JSON"></a>8、JSON</h2><h3 id="8-1、什么是JSON？"><a href="#8-1、什么是JSON？" class="headerlink" title="8.1、什么是JSON？"></a>8.1、什么是JSON？</h3><ul><li>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式，目前使用特别广泛。</li><li>采用完全独立于编程语言的<strong>文本格式</strong>来存储和表示数据。</li><li>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。</li><li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li></ul><p>在 JavaScript 语言中，一切都是对象。因此，任何JavaScript 支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。看看他的要求和语法格式：</p><ul><li>对象表示为键值对，数据由逗号分隔</li><li>花括号保存对象</li><li>方括号保存数组</li></ul><p><strong>JSON 键值对</strong>是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;name&quot;</span>: <span class="string">&quot;QinJiang&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;age&quot;</span>: <span class="string">&quot;3&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>JSON 是 JavaScript 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;; <span class="comment">//这是一个对象，注意键名也是可以使用引号包裹的</span></span><br><span class="line">var json = &#x27;&#123;<span class="attr">&quot;a&quot;</span>: <span class="string">&quot;Hello&quot;</span>, <span class="attr">&quot;b&quot;</span>: <span class="string">&quot;World&quot;</span>&#125;&#x27;; <span class="comment">//这是一个 JSON 字符串，本质是一个字符串</span></span><br></pre></td></tr></table></figure><h3 id="8-2、Jackson-的使用"><a href="#8-2、Jackson-的使用" class="headerlink" title="8.2、Jackson 的使用"></a>8.2、Jackson 的使用</h3><ol start="0"><li><p><strong><code>Json</code> 解决乱码</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--json 乱码问题配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;failOnEmptyBeans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>导入 <code>Jackson</code> 的 <code>jar</code> 包</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure></li><li><p><strong>编写 <code>JsonUtils</code> 工具类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getJson</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getJson(object, <span class="string">&quot;yyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getJson</span><span class="params">(Object o, String dateFormat)</span> </span>&#123;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用 ObjectMapper 来解决进行格式化输出 关闭时间戳的形式</span></span><br><span class="line">        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//自定义日期格式</span></span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(dateFormat);</span><br><span class="line">        mapper.setDateFormat(sdf);</span><br><span class="line"></span><br><span class="line">        String str = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            str = mapper.writeValueAsString(o);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个类下所有相应处理都不会走视图解析器 只会返回字符串</span></span><br><span class="line"><span class="comment">//@RestController</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/j1&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span><span class="comment">//他不会走视图解析器 会直接返回一个字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//jackson  ObejectMapper</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;Cu1&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String str = mapper.writeValueAsString(user);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//JSON 返回多个对象</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/j2&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span><span class="comment">//他不会走视图解析器 会直接返回一个字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json2</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;Cu1&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        User user1 = <span class="keyword">new</span> User(<span class="string">&quot;Cu2&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User(<span class="string">&quot;Cu3&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line"></span><br><span class="line">        userList.add(user);</span><br><span class="line">        userList.add(user1);</span><br><span class="line">        userList.add(user2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JsonUtils.getJson(userList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//JSON 返回时间对象</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/j3&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span><span class="comment">//他不会走视图解析器 会直接返回一个字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json3</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//jackson  ObejectMapper</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JsonUtils.getJson(<span class="keyword">new</span> Date(), <span class="string">&quot;yyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>关于 <code>@RestController</code> 和 <code>ResponseBody</code></strong></p><p><strong><code>@ResponseBody</code></strong>: 放在方法上, 返回值不会被视图解析器解析 而是直接将返回值传递给前端</p><p><strong><code>@RestController</code></strong> 放在类上 即类中所有处理请求的方法返回值都不会被视图解析器解析 而是直接将返回值传递给前端</p></li></ol><h3 id="8-3、fastJson"><a href="#8-3、fastJson" class="headerlink" title="8.3、fastJson"></a>8.3、fastJson</h3><ol><li><p>导入 <code>fastJson</code> 的 <code>jar</code> 包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.78<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>fastJson</code> 三个主要的类:</p></li></ol><ul><li><p><strong>JSONObject 代表 json 对象</strong></p><ul><li><p><code>JSONObject </code> 实现了 <code>Map</code> 接口, 猜想 <code>JSONObject</code> 底层操作是由 <code>Map</code> 实现的</p></li><li><p><code>JSONObejct</code> 对应 <code>Json</code> 对象 通过各种形式的 <code>get()</code>方法可以获取 <code>json</code> 对象中的数据 也可也利用诸如 </p><p><code>size()</code> , <code>isEmpty()</code> 等方法获取 **“键: 值” **对的个数和判断是否为空 其本质是通过 <code>Map</code>接口并调用接口中的方法完成的</p></li></ul></li><li><p><strong>JSONArray 代表 json 的数组对象</strong></p><ul><li>内部是有 <code>List</code> 接口中的方法来完成操作的</li></ul></li><li><p><strong>JSON 代表 JSONObjcet 和 JSONArray 的转化</strong></p><ul><li><code>JSON</code>类源码分析与使用</li><li>主要是实现 <code>json 对象, json 数组对象, javabean 对象, json 字符串</code> 之间的互相转化 </li></ul></li></ul><p>关于具体使用请参考  <a href="https://www.kuangstudy.com/bbs/1415591743440584705">fastJson</a></p><h2 id="9、整合-SSM"><a href="#9、整合-SSM" class="headerlink" title="9、整合 SSM"></a>9、整合 SSM</h2><p>项目结构</p><h3 id="9-1、整合-MyBatis"><a href="#9-1、整合-MyBatis" class="headerlink" title="9.1、整合 MyBatis"></a>9.1、整合 MyBatis</h3><ol><li><p><strong>建立数据库</strong>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `ssmbuild`;</span><br><span class="line">USE `ssmbuild`;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `books`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `books` (</span><br><span class="line">    `bookID` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;书id&#x27;</span>,</span><br><span class="line">    `bookName` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;书名&#x27;</span>,</span><br><span class="line">    `bookCounts` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;数量&#x27;</span>,</span><br><span class="line">    `detail` <span class="type">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;描述&#x27;</span>,</span><br><span class="line">     KEY `bookID` (`bookID`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span> `books`(`bookID`,`bookName`,`bookCounts`,`detail`)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;Java&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;从入门到放弃&#x27;</span>),</span><br><span class="line">       (<span class="number">2</span>,<span class="string">&#x27;MySQL&#x27;</span>,<span class="number">10</span>,<span class="string">&#x27;从删库到跑路&#x27;</span>),</span><br><span class="line">       (<span class="number">3</span>,<span class="string">&#x27;Linux&#x27;</span>,<span class="number">5</span>,<span class="string">&#x27;从进门到进牢&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>将 MyBatis 与 Spring 整合</p><p>由于 MyBatis 与 Spring 整合后不需要再配置数据源 只需要设置别名日志 以及注册 Mapper 就可以了</p><p>mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置数据源 交给 Spring 去做--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--注册mapper.xml--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.cu1.dao.BookMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring-dao.xml</p><p>​    <strong>==友情提示:==</strong> 千万不要使用 <code>c3p0</code> 数据源 不然你会怀疑人生 <code>Spring </code>自带的数据源就可以了 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1. 关联数据库配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:database.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2. 连接池</span></span><br><span class="line"><span class="comment">        dbcp 半自动化操作 不能自动连接</span></span><br><span class="line"><span class="comment">        c3p0 自动化操作(自动化的加载配置文件 并可以自动设置到对象中)</span></span><br><span class="line"><span class="comment">        druidh</span></span><br><span class="line"><span class="comment">        hikari</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.pwd&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3. sqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定 MyBatis 的配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置 dao 接口扫描包 可以动态的实现了 dao 接口可以注入到 Spring 容器中--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--解释 ：https://www.cnblogs.com/jpfss/p/7799806.html--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入 sqlSessionFactory--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--扫描要扫描的 dao 包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.cu1.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加一本书</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除一本书</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="meta">@Param(&quot;bookId&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新一本书</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询一本书</span></span><br><span class="line">    <span class="function">Books <span class="title">queryBookById</span><span class="params">(<span class="meta">@Param(&quot;bookId&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询全部的书</span></span><br><span class="line">    <span class="function">List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按照名称查询书籍</span></span><br><span class="line">    <span class="function">Books <span class="title">queryBookByName</span><span class="params">(String bookName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>BookMapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--绑定接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.cu1.dao.BookMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addBook&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.cu1.pojo.Books&quot;</span>&gt;</span></span><br><span class="line">        insert into ssmbuild.books (bookName, bookCounts, detail)</span><br><span class="line">        values(#&#123;bookName&#125;, #&#123;bookCounts&#125;, #&#123;detail&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBookById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete from ssmbuild.books where bookID = #&#123;bookId&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBook&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.cu1.pojo.Books&quot;</span>&gt;</span></span><br><span class="line">        update ssmbuild.books</span><br><span class="line">        set bookName = #&#123;bookName&#125;, bookCounts = #&#123;bookCounts&#125;, detail = #&#123;detail&#125;</span><br><span class="line">        where bookID = #&#123;bookID&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBookById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.cu1.pojo.Books&quot;</span>&gt;</span></span><br><span class="line">        select * from ssmbuild.books where bookID = #&#123;bookId&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAllBook&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.cu1.pojo.Books&quot;</span>&gt;</span></span><br><span class="line">        select * from ssmbuild.books;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBookByName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.cu1.pojo.Books&quot;</span>&gt;</span></span><br><span class="line">        select * from ssmbuild.books where bookName = #&#123;bookName&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>设计思想:</strong></p><p>​    首先确定要实现的业务, 以接口的方式给出, 再使用 <code>BookMapper.xml</code> 绑定接口的 <code>SQL</code> 语句, 由于已经使用了包扫描机制 所以这里无需再写出接口的实现类 <code>Spring</code> 将以反射的机制来自动实现实现类</p><h3 id="9-2、服务层的搭建"><a href="#9-2、服务层的搭建" class="headerlink" title="9.2、服务层的搭建"></a>9.2、服务层的搭建</h3><p>​    先以接口 <code>BookService</code> 的形式给出 <code>Service</code> 要实现的服务 然后使用 <code>BookServiceImpl</code> 继承 <code>BookService</code> 来实现所需要的服务 同时实现方法时直接调用 <code>Dao</code>  层相对应的服务实现方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">        <span class="comment">//增加一本书</span></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除一本书</span></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新一本书</span></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询一本书</span></span><br><span class="line">        <span class="function">Books <span class="title">queryBooksById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询全部的书</span></span><br><span class="line">        <span class="function">List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//按照名称查询书籍</span></span><br><span class="line">        <span class="function">Books <span class="title">queryBookByName</span><span class="params">(String bookName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Service 实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//service 调 dao 层</span></span><br><span class="line">    <span class="keyword">private</span> BookMapper bookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookMapper</span><span class="params">(BookMapper bookMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookMapper = bookMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books books)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.addBook(books);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.deleteBookById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.updateBook(books);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Books <span class="title">queryBooksById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.queryBookById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.queryAllBook();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Books <span class="title">queryBookByName</span><span class="params">(String bookName)</span> </span>&#123; <span class="keyword">return</span> bookMapper.queryBookByName(bookName); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Spring-Service.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1. 扫描 Service 下的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.cu1.service&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2. 将所有业务类注入到 Spring 可以通过配置或者注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;BookServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cu1.service.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3. 声明式事务配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--4. AOP事务支持--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-3、整合-SpringMVC"><a href="#9-3、整合-SpringMVC" class="headerlink" title="9.3、整合 SpringMVC"></a>9.3、整合 SpringMVC</h3><p><strong>springmvc-servlet.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.cu1.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 让Spring MVC不处理静态资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 支持mvc注解驱动</span></span><br><span class="line"><span class="comment">        在spring中一般采用@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">        要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">        必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">        和一个AnnotationMethodHandlerAdapter实例 这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">         而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>web.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--一定要注意:我们这里加载的是总的配置文件，之前被这里坑了！--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--encodingFilter--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">            org.springframework.web.filter.CharacterEncodingFilter</span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Session过期时间--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">absolute-ordering</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>==注意:==</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--一定要注意:我们这里加载的是总的配置文件，之前被这里坑了！--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>applicationContext.xml</code> 是一个将上面的 <code>Spring-dao.xml Spring-Service.xml    springmvc-servlet.xml</code> 汇总起来的总文件 </p><p><strong>applicationContext.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:Spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:Spring-Service.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:springmvc-servlet.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Controller 层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用 Service 层</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;BookServiceImpl&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询全部的书籍 并且返回到一个书籍展示页面</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/allBook&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        List&lt;Books&gt; books = bookService.queryAllBook();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;list&quot;</span>, books);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;allBook&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*跳转到增加书籍页面*/</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toAddBook&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toAddPaper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;addBook&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*添加书籍的请求*/</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/addBook&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addBook</span><span class="params">(Books books)</span> </span>&#123;</span><br><span class="line">        bookService.addBook(books);</span><br><span class="line">        <span class="comment">//重定向到 RequsetMapping(&quot;/allBook&quot;) 请求</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/book/allBook&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*跳转到修改页面*/</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toUpdateBook/&#123;bookId&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toUpdatePaper</span><span class="params">(<span class="meta">@PathVariable(&quot;bookId&quot;)</span> <span class="keyword">int</span> id, Model model)</span> </span>&#123;</span><br><span class="line">        Books books = bookService.queryBooksById(id);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;books&quot;</span>, books);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;updateBook&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/updateBook&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateBooks</span><span class="params">(Books books)</span> </span>&#123;</span><br><span class="line">        bookService.updateBook(books);</span><br><span class="line">        <span class="comment">//重定向到 RequsetMapping(&quot;/allBook&quot;) 请求</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/book/allBook&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除书籍</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/deleteBook/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteBook</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        bookService.deleteBookById(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/book/allBook&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询书籍</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/queryBook&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryBook</span><span class="params">(String queryBookName, Model model)</span> </span>&#123;</span><br><span class="line">        Books books = bookService.queryBookByName(queryBookName);</span><br><span class="line">        List&lt;Books&gt; list = <span class="keyword">new</span> ArrayList&lt;Books&gt;();</span><br><span class="line">        list.add(books);</span><br><span class="line">        <span class="keyword">if</span> (books == <span class="keyword">null</span>) &#123;</span><br><span class="line">            list = bookService.queryAllBook();</span><br><span class="line">            model.addAttribute(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;未查到&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;list&quot;</span>, list);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;allBook&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>到这里所有架构和配置文件已经完成，但是还没有导入 <code>maven</code> 依赖 如果按照视频上的版本或者不是比较新的版本</p><p>那么就会出现很多问题 排查起来太痛苦</p><p>这里强烈建议所需依赖全部导入最新版本!!!!</p><p><strong>pom.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Junit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Servlet - JSP --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Spring--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当你导入这些依赖之后 问题可能只解决了一部分 之前的问题被下面的错误取代</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">Caused by: java.lang.IllegalArgumentException: More than one fragment with the name [spring_web] was found. This is not legal with relative ordering. See section 8.2.2 2c of the Servlet specification for details. Consider using absolute ordering.</span><br><span class="line">    at org.apache.tomcat.util.descriptor.web.WebXml.orderWebFragments(WebXml.java:2200)</span><br><span class="line">    at </span><br><span class="line">  org.apache.tomcat.util.descriptor.web.WebXml.orderWebFragments(WebXml.java:2159)</span><br><span class="line">    at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1124)</span><br><span class="line">    at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:769)</span><br><span class="line">    at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:299)</span><br><span class="line">    at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:94)</span><br><span class="line">    at </span><br><span class="line"></span><br><span class="line"> org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5176)</span><br><span class="line">    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)</span><br><span class="line">    ... 10 more</span><br><span class="line"></span><br><span class="line">21-Jan-2019 01:51:04.709 SEVERE [localhost-startStop-1] </span><br><span class="line">     org.apache.catalina.startup.HostConfig.deployWAR Error deploying web application archive [C:\Users\dennismo\Dev\Projects\Production Prep\file-upload-module\webapps\file-upload-0.0.1-SNAPSHOT.war]</span><br><span class="line"> java.lang.IllegalStateException: ContainerBase.addChild: start: org.apache.catalina.LifecycleException: Failed to start component [StandardEngine[Catalina].StandardHost[localhost].StandardContext[/file-upload-0.0.1-SNAPSHOT]]</span><br><span class="line">    at </span><br><span class="line"></span><br><span class="line"> org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:758)</span><br><span class="line">    at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:730)</span><br><span class="line">    at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)</span><br><span class="line">    at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:985)</span><br><span class="line">    at </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1857)</span><br><span class="line">    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)</span><br><span class="line">    at java.util.concurrent.FutureTask.run(FutureTask.java:266)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:748)  </span><br></pre></td></tr></table></figure><p>如果是使用了本文提供的 <code>web.xml</code> 应该就不会遇到这种报错 这一切都归功于 <code>web.xml</code> 中的 <code>&lt;absolute-ordering /&gt; </code> 标签</p><h3 id="9-4、前端的构建"><a href="#9-4、前端的构建" class="headerlink" title="9.4、前端的构建"></a>9.4、前端的构建</h3><p>上面都是处于服务端的实现 现在开始构建前端 </p><p><strong>addBook.jsp</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 雷神</span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">10</span>/<span class="number">11</span></span><br><span class="line">  Time: <span class="number">9</span>:<span class="number">55</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;增加&lt;/title&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><br><span class="line">                &lt;h1&gt;</span><br><span class="line">                    &lt;small&gt;新增书籍&lt;/small&gt;</span><br><span class="line">                &lt;/h1&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/addBook&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label <span class="keyword">for</span>=<span class="string">&quot;bkname&quot;</span>&gt;书籍名称&lt;/label&gt;</span><br><span class="line">            &lt;input type=text name=<span class="string">&quot;bookName&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> id=<span class="string">&quot;bkname&quot;</span> required&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label <span class="keyword">for</span>=<span class="string">&quot;bknum&quot;</span>&gt;书籍数量&lt;/label&gt;</span><br><span class="line">            &lt;input type=text name=<span class="string">&quot;bookCounts&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> id=<span class="string">&quot;bknum&quot;</span> required&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label <span class="keyword">for</span>=<span class="string">&quot;bkdetail&quot;</span>&gt;书籍描述&lt;/label&gt;</span><br><span class="line">            &lt;input type=text name=<span class="string">&quot;detail&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> id=<span class="string">&quot;bkdetail&quot;</span> required&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;submit&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> value=<span class="string">&quot;添加&quot;</span>&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>allBook.jsp</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 雷神</span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">10</span>/<span class="number">9</span></span><br><span class="line">  Time: <span class="number">13</span>:<span class="number">29</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;书籍展示页面&lt;/title&gt;</span><br><span class="line">    &lt;%--Bootstrap 美化界面--%&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><br><span class="line">                &lt;h1&gt;</span><br><span class="line">                    &lt;small&gt;书籍列表 -&gt; 显示所有书籍&lt;/small&gt;</span><br><span class="line">                &lt;/h1&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;color-md-4 column&quot;</span>&gt;</span><br><span class="line">                &lt;%--toAddBook--%&gt;</span><br><span class="line">                &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn btn-primary&quot;</span> href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/toAddBook&quot;</span>&gt;新增书籍&lt;/a&gt;</span><br><span class="line">                &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn btn-primary&quot;</span> href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/allBook&quot;</span>&gt;显示全部书籍&lt;/a&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;%--查询书籍--%&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;color-md-4 column&quot;</span>&gt;</span><br><span class="line">                &lt;form <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-inline&quot;</span> action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/queryBook&quot;</span> method=<span class="string">&quot;post&quot;</span> style=<span class="string">&quot;float: right&quot;</span>&gt;</span><br><span class="line">                    &lt;span style=<span class="string">&quot;color: red; font-weight: bold&quot;</span>&gt;$&#123;error&#125;&lt;/span&gt;</span><br><span class="line">                    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;queryBookName&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> placeholder=<span class="string">&quot;请输入要查询的书籍名称&quot;</span>&gt;</span><br><span class="line">                    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;查询&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span><br><span class="line">                &lt;/form&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            </span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">            &lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;table table-hover table-striped&quot;</span>&gt;</span><br><span class="line">                &lt;thead&gt;</span><br><span class="line">                    &lt;tr&gt;</span><br><span class="line">                        &lt;th&gt;书籍编号&lt;/th&gt;</span><br><span class="line">                        &lt;th&gt;书籍名称&lt;/th&gt;</span><br><span class="line">                        &lt;th&gt;书籍数量&lt;/th&gt;</span><br><span class="line">                        &lt;th&gt;书籍详情&lt;/th&gt;</span><br><span class="line">                        &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">                    &lt;/tr&gt;</span><br><span class="line">                &lt;/thead&gt;</span><br><span class="line">                &lt;%-- 书籍从数据库中查询出来 从这个 list 中遍历出来--%&gt;</span><br><span class="line">                &lt;tbody&gt;</span><br><span class="line">                    &lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;book&quot;</span> items=<span class="string">&quot;$&#123;list&#125;&quot;</span>&gt;</span><br><span class="line">                        &lt;tr&gt;</span><br><span class="line">                            &lt;td&gt;$&#123;book.bookID&#125;&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;$&#123;book.bookName&#125;&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;$&#123;book.bookCounts&#125;&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;$&#123;book.detail&#125;&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;</span><br><span class="line">                                &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/toUpdateBook/$&#123;book.bookID&#125;&quot;</span>&gt;修改&lt;/a&gt;</span><br><span class="line">                                &amp;nbsp;| &amp;nbsp;</span><br><span class="line">                                &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/deleteBook/$&#123;book.bookID&#125;&quot;</span>&gt;删除&lt;/a&gt;</span><br><span class="line">                            &lt;/td&gt;</span><br><span class="line">                        &lt;/tr&gt;</span><br><span class="line">                    &lt;/c:forEach&gt;</span><br><span class="line">                &lt;/tbody&gt;</span><br><span class="line">            &lt;/table&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>updateBook.jsp</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 雷神</span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">10</span>/<span class="number">11</span></span><br><span class="line">  Time: <span class="number">10</span>:<span class="number">51</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;修改书籍&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;link href=<span class="string">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><br><span class="line">                &lt;h1&gt;</span><br><span class="line">                    &lt;small&gt;修改书籍&lt;/small&gt;</span><br><span class="line">                &lt;/h1&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/updateBook&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;%--出现的问题 提交了修改 SQL 的请求 但是修改失败 初次考虑是事务出现问题</span><br><span class="line">            事务没有问题的情况下 查看 SQL 语句 看能否执行成功</span><br><span class="line">            此时前端要传递隐藏域</span><br><span class="line">        --%&gt;</span><br><span class="line"></span><br><span class="line">        &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;bookID&quot;</span> value=<span class="string">&quot;$&#123;books.bookID&#125;&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label <span class="keyword">for</span>=<span class="string">&quot;bkname&quot;</span>&gt;书籍名称&lt;/label&gt;</span><br><span class="line">            &lt;input type=text name=<span class="string">&quot;bookName&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> id=<span class="string">&quot;bkname&quot;</span> value=<span class="string">&quot;$&#123;books.bookName&#125;&quot;</span> required&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label <span class="keyword">for</span>=<span class="string">&quot;bknum&quot;</span>&gt;书籍数量&lt;/label&gt;</span><br><span class="line">            &lt;input type=text name=<span class="string">&quot;bookCounts&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> id=<span class="string">&quot;bknum&quot;</span> value=<span class="string">&quot;$&#123;books.bookCounts&#125;&quot;</span> required&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label <span class="keyword">for</span>=<span class="string">&quot;bkdetail&quot;</span>&gt;书籍描述&lt;/label&gt;</span><br><span class="line">            &lt;input type=text name=<span class="string">&quot;detail&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> id=<span class="string">&quot;bkdetail&quot;</span> value=<span class="string">&quot;$&#123;books.detail&#125;&quot;</span> required&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;submit&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> value=<span class="string">&quot;修改&quot;</span>&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>index.jsp</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 雷神</span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">10</span>/<span class="number">8</span></span><br><span class="line">  Time: <span class="number">21</span>:<span class="number">31</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;书籍管理&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    a&#123;</span><br><span class="line">      text-decoration: none;</span><br><span class="line">      color: black;</span><br><span class="line">      font-size: 18px;</span><br><span class="line">    &#125;</span><br><span class="line">    h3&#123;</span><br><span class="line">      width: 180px;</span><br><span class="line">      height: 38px ;</span><br><span class="line">      margin: 100px auto;</span><br><span class="line">      text-align: center;</span><br><span class="line">      line-height: 38px;</span><br><span class="line">      background: deepskyblue;</span><br><span class="line">      border-radius: 5px;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;</span><br><span class="line">  &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/allBook&quot;</span>&gt;进入书籍页面&lt;/a&gt;</span><br><span class="line">&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC, java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/Java/Spring/SpringBoot/"/>
      <url>/Java/Spring/SpringBoot/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="1、创建-SpringBoot-项目"><a href="#1、创建-SpringBoot-项目" class="headerlink" title="1、创建 SpringBoot 项目"></a>1、创建 SpringBoot 项目</h2><h3 id="1-1、利用官网创建"><a href="#1-1、利用官网创建" class="headerlink" title="1.1、利用官网创建"></a>1.1、利用官网创建</h3><ol><li><p>进入 <code>SpringBoot</code> 官网 <a href="https://spring.io/projects/spring-boot#overview">SpringBoot</a> </p></li><li><p>划到 <code>Quickstart Your Project</code> </p></li><li><p>点击  <a href="https://start.spring.io/">Spring Initializr</a></p></li><li><p>如下图</p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="C:\Users\雷神\AppData\Roaming\Typora\typora-user-images\image-20211020171219051.png" alt="image-20211020171219051" style="zoom:80%;" /><p>在 <code>Dependencies</code> 处添加项目依赖 最后点击 <code>GENERATE</code> 会自动下载压缩包, 包中即为创建好的 <code>SpringBoot</code> i项目</p></li></ol><h3 id="1-2、利用-IDEA-创建"><a href="#1-2、利用-IDEA-创建" class="headerlink" title="1.2、利用 IDEA 创建"></a>1.2、利用 IDEA 创建</h3><p>一般开发都是在 IDEA 中创建</p><h3 id="1-3、项目结构"><a href="#1-3、项目结构" class="headerlink" title="1.3、项目结构"></a>1.3、项目结构</h3><p>略</p><p><strong>pom.xml 中的一些信息</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--所有的 SpringBoot 依赖都是使用 spring-boot-starter 开头--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- web 依赖: 自动集成了 Tomcat, dispatcherServlet--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--打 jar 包插件--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>更改端口号:</strong></p><p>在 <code>application.propertise</code> 中</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更改项目端口号</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8081</span></span><br></pre></td></tr></table></figure><p><strong>更改启动页面</strong></p><ul><li>在 <code>resource</code> 下新建 <code>banner.txt</code> 在里面导入自己想要的图案即可</li></ul><h2 id="2、SpringBoot-原理初步"><a href="#2、SpringBoot-原理初步" class="headerlink" title="2、SpringBoot 原理初步"></a>2、SpringBoot 原理初步</h2><p><strong>自动配置:</strong></p><p>​    <code>pom.xml</code></p><ul><li><code>SpingBoot-dependencies:</code> 核心依赖在父工程中</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    &lt;--核心依赖在父工程中--&gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在写一些或者引入 SpringBoot 的一些依赖中不需要写版本号,  就是因为有这些版本仓库</li></ul><p><strong>启动器</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>启动器即为 <code>SpringBoot</code> 的启动场景</p></li><li><p>比如 <code>spring-boot-starter-web</code> 其就会导入 web 依赖</p></li><li><p><code>SpringBoot</code> 会将所有的功能场景 都变为一个一个启动器</p></li><li><p>需要使用什么功能 就只需要找到对应的启动器就可以了</p></li></ul><p><strong>主程序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">P1Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//将 SpringBoot 应用启动</span></span><br><span class="line">        SpringApplication.run(P1Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@SpringBootApplication</code> 标注这个类是一个 <code>SpringBoot</code> 的应用 获取启动类的所有配置 </p><ul><li><p>注解</p><ul><li><p>```<br>@SpringBootConfiguration : SpringBoot 的配置</p><pre><code>@Configuration Spring 配置类@Component 这说明也是一个 Spring 的组件</code></pre><p>@EnableAutoConfiguration : 自动配置</p><pre><code>@AutoConfigurationPackage 自动配置包    @Import(&#123;Registrar.class&#125;) 导入选择器 包注册@Import(&#123;AutoConfigurationImportSelector.class&#125;) 自动配置导入选择</code></pre><p>//获取所有的配置<br>protected List<String> getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">获取候选的配置</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"> protected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) &#123;</span><br><span class="line">        List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(this.getSpringFactoriesLoaderFactoryClass(), this.getBeanClassLoader());</span><br><span class="line">        Assert.notEmpty(configurations, &quot;No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;);</span><br><span class="line">        return configurations;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> <strong>META-INF/spring.factories</strong> 自动配置的核心文件</p><p>​    <img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="C:\Users\雷神\AppData\Roaming\Typora\typora-user-images\image-20211020204954252.png" alt="image-20211020204954252"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果这里面的条件都满足 才会生效</span><br><span class="line"><span class="meta">@ConditionalOnXXX</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>结论</strong>:  <code> SpringBoot</code> 所有的自动配置 都是在启动的时候扫描并加载 <code>spring.factories</code> 所有的自动配置类都在这里面, 但是不一定生效 要判断条件是否 成立 只要导入了对应的 <code>start</code> 就有对应的启动器了 有了启动器，自动装配就会生效 即配置成功</p><ol><li><code>SpringBoot</code>在启动时 从类路径下 <code>/META-INF/spring.factories</code> 获取指定的值</li><li>将这些自动配置的类导入容器, 自动配置类就会生效 进行自动配置</li><li>以前需要自动配置的东西 现在 <code>SpringBoot</code> 帮用户去做了</li><li>整合 JavaEE 解决方案和自动配置的东西都在 <code>spring-boot-autoconfigure:2.5.5</code> 这个包下</li><li>它会把所有需要导入的组件, 以类名的方式返回, 这些组件就会被添加到容器</li><li>容器中也会存在非常多的<code> XXX AutoConfiguration</code> 的文件 就是这些类给容器中导入了这个场景需要的所有组件; 并自动配置 <code>@Configuration, JavaConfig</code></li><li>有了自动配置类 免去了手动编写配置文件的工作</li></ol></li></ul><h2 id="3、主启动类的运行"><a href="#3、主启动类的运行" class="headerlink" title="3、主启动类的运行"></a>3、主启动类的运行</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">P1Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//SpringApplication 类</span></span><br><span class="line">        <span class="comment">//run 方法</span></span><br><span class="line">        SpringApplication.run(P1Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析该方法主要分为两部分, 一部分是 <code>SpringApplication</code> 的实例化, 二是 <code>run</code> 方法的执行    </p><h3 id="3-1、SpringApplication"><a href="#3-1、SpringApplication" class="headerlink" title="3.1、SpringApplication"></a>3.1、SpringApplication</h3><p>这个类主要做了以下四件事情:</p><ul><li>推断应用的类型是普通项目还是 <code>Web</code> 项目</li><li>查找并加载所有的可初始化器 设置到 <code>initializers</code> 属性中</li><li>找出所有的应用程序监听器 设置到 <code>listeners</code> 属性中</li><li>推断并设置 <code>main</code> 方法的定义类 找到运行的主类</li></ul><p><strong>查看构造器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class... primarySources)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    <span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">    <span class="keyword">this</span>.setInitializers(<span class="keyword">this</span>.getSpringFactoriesInstances();</span><br><span class="line">    <span class="keyword">this</span>.setListeners(<span class="keyword">this</span>.getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">    <span class="keyword">this</span>.mainApplicationClass = <span class="keyword">this</span>.deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://img2020.cnblogs.com/i-beta/1418974/202003/1418974-20200309184347408-1065424525.png" alt="img"></p><h2 id="4、SpringBoot-配置"><a href="#4、SpringBoot-配置" class="headerlink" title="4、SpringBoot 配置"></a>4、SpringBoot 配置</h2><p>官方不推荐使用 <code>properties</code> 文件 推荐使用 <code>.yaml</code> 文件</p><h3 id="4-1、配置文件"><a href="#4-1、配置文件" class="headerlink" title="4.1、配置文件"></a>4.1、配置文件</h3><p>SpringBoot使用一个全局的配置文件 ， 配置文件名称是固定的</p><ul><li><p>application.properties</p></li><li><ul><li>语法结构 ：key=value</li></ul></li><li><p>application.yml</p></li><li><ul><li>语法结构 ：key：空格 value</li></ul></li></ul><p><strong>配置文件的作用 ：</strong>修改SpringBoot自动配置的默认值，因为SpringBoot在底层都给我们自动配置好了；</p><p>比如我们可以在配置文件中修改Tomcat 默认启动的端口号！测试一下！</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 普通的 key - value</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">cu1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对象</span></span><br><span class="line"><span class="attr">student:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cu1</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对象的行内写法</span></span><br><span class="line"><span class="attr">student:</span> &#123;<span class="attr">name:</span> <span class="string">Cu1</span>, <span class="attr">age:</span> <span class="number">11</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组</span></span><br><span class="line"><span class="attr">pets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pig</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pets:</span> [<span class="string">cat</span>, <span class="string">dog</span>, <span class="string">pig</span>]</span><br></pre></td></tr></table></figure><p><code>yaml</code> 可以给实体类赋值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//如果不配置使用了这个注解 就会提示报红</span><br><span class="line">//使用该注解来使用 yaml 给实体类赋值</span><br><span class="line">@ConfigurationProperties</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="C:\Users\雷神\AppData\Roaming\Typora\typora-user-images\image-20211021202656376.png" alt="image-20211021202656376"></p><p><strong>实体类</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="comment">//如果不配置使用了这个注解 就会提示报红</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean happy;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt;lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Dog</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;旺财&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;3&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>yaml 配置</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cu1</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">11</span></span><br><span class="line">  <span class="attr">happy:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2001</span><span class="string">/06/23</span></span><br><span class="line">  <span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>, <span class="attr">K2:</span> <span class="string">v2</span>&#125;</span><br><span class="line">  <span class="attr">lists:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">code</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">music</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">girl</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">旺财</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><p>​    关于上面的报红, 不影响使用. 但是可以点击上面的 <code>Open documentation</code> 来打开帮助文档获取了依赖并添加到<code>pom.xml</code> 中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>@ConfigurationPropertie</strong> 的作用</p><ul><li>将配置文件中配置的每一个属性的值, 映射到这个组件中;</li><li>告诉 <code>SpringBoot</code> 将本类中的所有属性和配置文件中相关的配置进行绑定</li><li>参数 <code>prefix = &quot;person&quot;</code>: 将配置文件中的 <code>person</code> 下面的所有属性一 一对应</li><li>只有这个组件是容器中的组件, 才能使用容器提供的 <code>@ConfigurationPropertie</code> 功能</li></ul><p><strong>注:</strong> 在配置文件中使用 <code>properties</code> 会出现乱码 这里在 <code>setting</code> 里把字体编码设置为 <code>UTF-8</code></p><p>使用 <code>properties</code> 进行配置 但是需要自己手动取出配置文件中的值</p><p>在 <code>resources</code> 下新建 <code>Cu1.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name</span>=<span class="string">Cu1</span></span><br><span class="line"><span class="attr">age</span>=<span class="string">11</span></span><br></pre></td></tr></table></figure><p> <strong>实体类中</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Data</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">//加载指定的配置文件</span><br><span class="line">@PropertySource(value = &quot;classpath:Cu1.properties&quot;)</span><br><span class="line">public class Person &#123;</span><br><span class="line"></span><br><span class="line">    //SPEL 表达式取出配置文件的值</span><br><span class="line">    @Value(&quot;$&#123;name&#125;&quot;)</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line">    private Boolean happy;</span><br><span class="line">    private Date birthday;</span><br><span class="line">    private Map&lt;String, Object&gt; maps;</span><br><span class="line">    private List&lt;Object&gt;lists;</span><br><span class="line">    private Dog dog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://img2020.cnblogs.com/i-beta/1418974/202003/1418974-20200310172022780-374285033.png" alt="img"></p><ol><li><p>@ConfigurationProperties只需要写一次即可 ， @Value则需要每个字段都添加</p></li><li><p>松散绑定：这个什么意思呢? 比如我的yml中写的last-name，这个和lastName是一样的， - 后面跟着的字母默认是大写的。这就是松散绑定。可以测试一下</p></li><li><p>JSR303数据校验 ， 这个就是我们可以在字段是增加一层过滤器验证 ， 可以保证数据的合法性</p></li><li><p>复杂类型封装，yml中可以封装对象 ， 使用value就不支持</p></li></ol><p><strong>结论：</strong></p><ul><li><p>配置yml和配置properties都可以获取到值 ， 强烈推荐 yml；</p></li><li><p>如果我们在某个业务中，只需要获取配置文件中的某个值，可以使用一下 @value；</p></li><li><p>如果说，我们专门编写了一个JavaBean来和配置文件进行一一映射，就直接@configurationProperties，不要犹豫！</p></li></ul><h3 id="4-2、JSR303数据校验"><a href="#4-2、JSR303数据校验" class="headerlink" title="4.2、JSR303数据校验"></a>4.2、JSR303数据校验</h3><h4 id="先看看如何使用"><a href="#先看看如何使用" class="headerlink" title="先看看如何使用"></a>先看看如何使用</h4><p>Springboot中可以用@validated来校验数据，如果数据异常则会统一抛出异常，方便异常中心统一处理。我们这里来写个注解让我们的name只能支持Email格式；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Component //注册bean</span><br><span class="line">@ConfigurationProperties(prefix = &quot;person&quot;)</span><br><span class="line">@Validated  //数据校验</span><br><span class="line">public class Person &#123;</span><br><span class="line"></span><br><span class="line">    @Email(message=&quot;邮箱格式错误&quot;) //name必须是邮箱格式</span><br><span class="line">    private String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 运行结果 ：default message [不是一个合法的电子邮件地址];</p><p> <img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://img2020.cnblogs.com/i-beta/1418974/202003/1418974-20200311124206128-825984089.png" alt="img"></p><p> <strong>使用数据校验，可以保证数据的正确性；</strong></p><h5 id="常见参数"><a href="#常见参数" class="headerlink" title="常见参数"></a>常见参数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NotNull(message=&quot;名字不能为空&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line"><span class="meta">@Max(value=120,message=&quot;年龄最大不能查过120&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="meta">@Email(message=&quot;邮箱格式错误&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">空检查</span><br><span class="line"><span class="meta">@Null</span>       验证对象是否为<span class="keyword">null</span></span><br><span class="line"><span class="meta">@NotNull</span>    验证对象是否不为<span class="keyword">null</span>, 无法查检长度为<span class="number">0</span>的字符串</span><br><span class="line"><span class="meta">@NotBlank</span>   检查约束字符串是不是Null还有被Trim的长度是否大于<span class="number">0</span>,只对字符串,且会去掉前后空格.</span><br><span class="line"><span class="meta">@NotEmpty</span>   检查约束元素是否为NULL或者是EMPTY.</span><br><span class="line">    </span><br><span class="line">Booelan检查</span><br><span class="line"><span class="meta">@AssertTrue</span>     验证 Boolean 对象是否为 <span class="keyword">true</span>  </span><br><span class="line"><span class="meta">@AssertFalse</span>    验证 Boolean 对象是否为 <span class="keyword">false</span>  </span><br><span class="line">    </span><br><span class="line">长度检查</span><br><span class="line"><span class="meta">@Size(min=, max=)</span> 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内  </span><br><span class="line"><span class="meta">@Length(min=, max=)</span> string is between min and max included.</span><br><span class="line"></span><br><span class="line">日期检查</span><br><span class="line"><span class="meta">@Past</span>       验证 Date 和 Calendar 对象是否在当前时间之前  </span><br><span class="line"><span class="meta">@Future</span>     验证 Date 和 Calendar 对象是否在当前时间之后  </span><br><span class="line"><span class="meta">@Pattern</span>    验证 String 对象是否符合正则表达式的规则</span><br><span class="line"></span><br><span class="line">.......等等</span><br><span class="line">除此以外，我们还可以自定义一些数据校验规则</span><br></pre></td></tr></table></figure><h3 id="4-3、多环境切换"><a href="#4-3、多环境切换" class="headerlink" title="4.3、多环境切换"></a>4.3、多环境切换</h3><p>profile是Spring对不同环境提供不同配置功能的支持，可以通过激活不同的环境版本，实现快速切换环境；</p><h5 id="4-3-1、配置文件"><a href="#4-3-1、配置文件" class="headerlink" title="4.3.1、配置文件"></a>4.3.1、配置文件</h5><p>我们在主配置文件编写的时候，文件名可以是 application-{profile}.properties/yml , 用来指定多个环境版本；</p><p><strong>例如：</strong></p><p>application-test.properties 代表测试环境配置</p><p>application-dev.properties 代表开发环境配置</p><p>但是Springboot并不会直接启动这些配置文件，它<strong>默认使用application.properties主配置文件</strong>；</p><p>我们需要通过一个配置来选择需要激活的环境：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#比如在配置文件中指定使用dev环境，我们可以通过设置不同的端口号进行测试；</span><br><span class="line">#我们启动SpringBoot，就可以看到已经切换到dev下的配置了；</span><br><span class="line">spring.profiles.active=dev</span><br></pre></td></tr></table></figure><h4 id="4-3-2、yaml的多文档块"><a href="#4-3-2、yaml的多文档块" class="headerlink" title="4.3.2、yaml的多文档块"></a>4.3.2、yaml的多文档块</h4><p>和properties配置文件中一样，但是使用yml去实现不需要创建多个配置文件，更加方便了 !</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="comment">#选择要激活那个环境块</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">prod</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span> <span class="comment">#配置环境的名称</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">prod</span>  <span class="comment">#配置环境的名称</span></span><br></pre></td></tr></table></figure><p><strong>注意：如果yml和properties同时都配置了端口，并且没有激活其他环境 ， 默认会使用properties配置文件的！</strong></p><p><strong>properties 文件优先级最低会导致配置覆盖</strong></p><h4 id="4-3-3、配置文件加载位置"><a href="#4-3-3、配置文件加载位置" class="headerlink" title="4.3.3、配置文件加载位置"></a>4.3.3、配置文件加载位置</h4><p><strong>外部加载配置文件的方式十分多，我们选择最常用的即可，在开发的资源文件中进行配置！</strong></p><p>官方外部配置文件说明参考文档</p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://img2020.cnblogs.com/i-beta/1418974/202003/1418974-20200311124351635-1979908122.png" alt="img"></p><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">优先级1：项目路径下的config文件夹配置文件</span><br><span class="line">优先级2：项目路径下配置文件</span><br><span class="line">优先级3：资源路径下的config文件夹配置文件</span><br><span class="line">优先级4：资源路径下配置文件</span><br></pre></td></tr></table></figure><p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p><p><strong>SpringBoot会从这四个位置全部加载主配置文件；互补配置；</strong></p><p>我们在最低级的配置文件中设置一个项目访问路径的配置来测试互补问题；</p><h4 id="4-3-4、拓展，运维小技巧"><a href="#4-3-4、拓展，运维小技巧" class="headerlink" title="4.3.4、拓展，运维小技巧"></a>4.3.4、拓展，运维小技巧</h4><p>指定位置加载配置文件</p><p>我们还可以通过spring.config.location来改变默认的配置文件位置</p><p>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；这种情况，一般是后期运维做的多，相同配置，外部指定的配置文件优先级最高</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar spring-boot-config.jar --spring.config.location=F:/application.properties</span><br></pre></td></tr></table></figure><h3 id="4-4、自动装配原理深入"><a href="#4-4、自动装配原理深入" class="headerlink" title="4.4、自动装配原理深入"></a>4.4、自动装配原理深入</h3><h4 id="4-4-1、分析自动配置原理"><a href="#4-4-1、分析自动配置原理" class="headerlink" title="4.4.1、分析自动配置原理"></a>4.4.1、分析自动配置原理</h4><p>我们以 <strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong>为例解释自动配置原理；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表示这是一个配置类，和以前编写的配置文件一样，也可以给容器中添加组件；</span></span><br><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//启动指定类的ConfigurationProperties功能；</span></span><br><span class="line">  <span class="comment">//进入这个HttpProperties查看，将配置文件中对应的值和HttpProperties绑定起来；</span></span><br><span class="line">  <span class="comment">//并把HttpProperties加入到ioc容器中</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;HttpProperties.class&#125;)</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//Spring底层@Conditional注解</span></span><br><span class="line">  <span class="comment">//根据不同的条件判断，如果满足指定的条件，整个配置类里面的配置就会生效；</span></span><br><span class="line">  <span class="comment">//这里的意思就是判断当前应用是否是web应用，如果是，当前配置类生效</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(</span></span><br><span class="line"><span class="meta">    type = Type.SERVLET</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;CharacterEncodingFilter.class&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断配置文件中是否存在某个配置：spring.http.encoding.enabled；</span></span><br><span class="line">  <span class="comment">//如果不存在，判断也是成立的</span></span><br><span class="line">  <span class="comment">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(</span></span><br><span class="line"><span class="meta">    prefix = &quot;spring.http.encoding&quot;,</span></span><br><span class="line"><span class="meta">    value = &#123;&quot;enabled&quot;&#125;,</span></span><br><span class="line"><span class="meta">    matchIfMissing = true</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">//他已经和SpringBoot的配置文件映射了</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Encoding properties;</span><br><span class="line">    <span class="comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties.getEncoding();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span> <span class="comment">//判断容器没有这个组件？</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">        filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">        filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type.REQUEST));</span><br><span class="line">        filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type.RESPONSE));</span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//。。。。。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一句话总结 ：根据当前不同的条件判断，决定这个配置类是否生效！</strong></p><ul><li><p>一但这个配置类生效；这个配置类就会给容器中添加各种组件；</p></li><li><p>这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</p></li><li><p>所有在配置文件中能配置的属性都是在xxxxProperties类中封装着；</p></li><li><p>配置文件能配置什么就可以参照某个功能对应的这个属性类</p><p>我们去配置文件里面试试前缀，看提示!</p></li></ul><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://img2020.cnblogs.com/i-beta/1418974/202003/1418974-20200312125622060-142770598.png" alt="img"></p><p><strong>这就是自动装配的原理!</strong></p><h4 id="4-4-2、精髓"><a href="#4-4-2、精髓" class="headerlink" title="4.4.2、精髓"></a>4.4.2、精髓</h4><p>1、SpringBoot启动会加载大量的自动配置类</p><p>2、我们看我们需要的功能有没有在SpringBoot默认写好的自动配置类当中；</p><p>3、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件存在在其中，我们就不需要再手动配置了）</p><p>4、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们只需要在配置文件中指定这些属性的值即可；</p><p><strong>xxxxAutoConfigurartion：自动配置类；</strong>给容器中添加组件</p><p><strong>xxxxProperties:封装配置文件中相关属性；</strong></p><h4 id="4-4-3、了解：-Conditional"><a href="#4-4-3、了解：-Conditional" class="headerlink" title="4.4.3、了解：@Conditional"></a>4.4.3、了解：@Conditional</h4><p>了解完自动装配的原理后，我们来关注一个细节问题，<strong>自动配置类必须在一定的条件下才能生效；</strong></p><p><strong>@Conditional派生注解（Spring注解版原生的@Conditional作用）</strong></p><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://img2020.cnblogs.com/i-beta/1418974/202003/1418974-20200312125749368-824052257.png" alt="img"></p><p> <strong>那么多的自动配置类，必须在一定的条件下才能生效；也就是说，我们加载了这么多的配置类，但不是所有的都生效了。</strong></p><p>我们怎么知道哪些自动配置类生效？</p><p><strong>我们可以通过启用 debug=true属性；来让控制台打印自动配置报告，这样我们就可以很方便的知道哪些自动配置类生效；</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#开启springboot的调试类</span><br><span class="line">debug=<span class="keyword">true</span></span><br></pre></td></tr></table></figure><p><strong>Positive matches:（自动配置类启用的：正匹配）</strong></p><p><strong>Negative matches:（没有启动，没有匹配成功的自动配置类：负匹配）</strong></p><p><strong>Unconditional classes: （没有条件的类）</strong></p><h2 id="5、SpringBoot-Web-开发"><a href="#5、SpringBoot-Web-开发" class="headerlink" title="5、SpringBoot Web 开发"></a>5、SpringBoot Web 开发</h2><p><strong>要解决的问题:</strong></p><ul><li>导入静态资源</li><li>首页</li><li>jsp 模板引擎 Thymeleaf</li><li>装配和扩展 SpringMVC</li><li>增删改查</li><li>拦截器</li><li>国际化</li></ul><h3 id="5-1、静态资源导入"><a href="#5-1、静态资源导入" class="headerlink" title="5.1、静态资源导入"></a>5.1、静态资源导入</h3><h4 id="5-1-1、静态资源映射规则"><a href="#5-1-1、静态资源映射规则" class="headerlink" title="5.1.1、静态资源映射规则"></a>5.1.1、静态资源映射规则</h4><p><strong>首先，我们搭建一个普通的SpringBoot项目，回顾一下HelloWorld程序！</strong></p><p>写请求非常简单，那我们要引入我们前端资源，我们项目中有许多的静态资源，比如css，js等文件，这个SpringBoot怎么处理呢？</p><p>如果我们是一个web应用，我们的main下会有一个webapp，我们以前都是将所有的页面导在这里面的，对吧！但是我们现在的pom呢，打包方式是为jar的方式，那么这种方式SpringBoot能不能来给我们写页面呢？当然是可以的，但是SpringBoot对于静态资源放置的位置，是有规定的！</p><p><strong>我们先来聊聊这个静态资源映射规则：</strong></p><p>SpringBoot中，SpringMVC的web配置都在 WebMvcAutoConfiguration 这个配置类里面；</p><p>我们可以去看看 WebMvcAutoConfigurationAdapter 中有很多配置方法；</p><p>有一个方法：addResourceHandlers 添加资源处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        <span class="comment">// 已禁用默认资源处理</span></span><br><span class="line">        logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 缓存控制</span></span><br><span class="line">    Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">    CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">    <span class="comment">// webjars 配置</span></span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">&quot;/webjars/**&quot;</span>)) &#123;</span><br><span class="line">        customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>)</span><br><span class="line">                                             .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)</span><br><span class="line">                                             .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态资源配置</span></span><br><span class="line">    String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">        customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class="line">                                             .addResourceLocations(getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations()))</span><br><span class="line">                                             .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读一下源代码：比如所有的 <code>/webjars/** </code>， 都需要去 <code>classpath:/META-INF/resources/webjars/</code> 找对应的资源；</p><h4 id="什么是webjars"><a href="#什么是webjars" class="headerlink" title="什么是webjars"></a>什么是webjars</h4><p><code>Webjars</code> 本质就是以jar包的方式引入我们的静态资源 ， 我们以前要导入一个静态资源文件，直接导入即可。</p><p>使用 <code>SpringBoot</code> 需要使用 <code>Webjars</code>，我们可以去搜索一下：</p><p>网站：<code>https://www.webjars.org</code></p><p>要使用jQuery，我们只要要引入jQuery对应版本的pom依赖即可！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>导入完毕，查看webjars目录结构，并访问Jquery.js文件！</p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://img2020.cnblogs.com/i-beta/1418974/202003/1418974-20200317124625447-915223066.png" alt="img"></p><p>访问：只要是静态资源，<code>SpringBoot</code> 就会去对应的路径寻找资源，我们这里访问：<code>http://localhost:8080/webjars/jquery/3.4.1/jquery.js</code></p><h4 id="5-1-2、第二种静态资源映射规则"><a href="#5-1-2、第二种静态资源映射规则" class="headerlink" title="5.1.2、第二种静态资源映射规则"></a>5.1.2、第二种静态资源映射规则</h4><p>项目中使用自己的静态资源该怎么导入；</p><p>我们去找 <code>staticPathPattern</code> 发现第二种映射规则 ：<code>/**</code> , 访问当前的项目任意资源，它会去找 <code>resourceProperties</code> 这个类，我们可以点进去看一下分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进入方法public String[] getStaticLocations() &#123;    return this.staticLocations;&#125;// 找到对应的值private String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;// 找到路径private static final String[] CLASSPATH_RESOURCE_LOCATIONS = &#123;     &quot;classpath:/META-INF/resources/&quot;, &quot;classpath:/resources/&quot;,     &quot;classpath:/static/&quot;,     &quot;classpath:/public/&quot; &#125;;</span></span><br></pre></td></tr></table></figure><p><code>ResourceProperties</code> 可以设置和我们静态资源有关的参数；这里面指向了它会去寻找资源的文件夹，即上面数组的内容。</p><p>所以得出结论，以下四个目录存放的静态资源可以被我们识别：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;classpath:/META-INF/resources/&quot;&quot;classpath:/resources/&quot;&quot;classpath:/static/&quot;&quot;classpath:/public/&quot;</span><br></pre></td></tr></table></figure><p>我们可以在 <code>resources</code> 根目录下新建对应的文件夹，都可以存放我们的静态文件；</p><p>比如我们访问<code>http://localhost:8080/1.js</code>, 他就会去这些文件夹中寻找对应的静态资源文件；</p><h4 id="5-1-3、自定义静态资源路径"><a href="#5-1-3、自定义静态资源路径" class="headerlink" title="5.1.3、自定义静态资源路径"></a>5.1.3、自定义静态资源路径</h4><p>我们也可以自己通过配置文件来指定一下，哪些文件夹是需要我们放静态资源文件的，在 <code>application.properties</code>中配置；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.resources.static-locations=classpath:/coding/,classpath:/kuang/</span><br></pre></td></tr></table></figure><p>一旦自己定义了静态文件夹的路径，原来的自动配置就都会失效了！</p><h4 id="5-1-4、总结"><a href="#5-1-4、总结" class="headerlink" title="5.1.4、总结:"></a>5.1.4、总结:</h4><ul><li><p>参考源码推测出, 如果使用了自定义的配置文件并指定其为静态资源文件目录 那么默认的静态资源目录就会失效</p></li><li><p>在利用 <code>url</code> 访问静态资源目录时 首先判断是不是访问 <code>/webjars/**</code>  如果是, 就会将 <code>url</code> 拼接到 <code>classpath:/META-INF/resources/webjars/</code> 下的静态资源目录下; 否则就会直接去按照第二种静态资源目录的规则去寻找</p></li><li><p>第二种静态资源目录的优先级</p><p><code>resources</code>  &gt; <code>static(默认)</code> &gt; <code>public</code></p></li></ul><h3 id="5-2、首页和图标定制"><a href="#5-2、首页和图标定制" class="headerlink" title="5.2、首页和图标定制"></a>5.2、首页和图标定制</h3><h4 id="5-2-1、首页处理"><a href="#5-2-1、首页处理" class="headerlink" title="5.2.1、首页处理"></a>5.2.1、首页处理</h4><p>继续向下看源码! 可以看到一个欢迎页的映射, 就是我们的首页!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Beanpublic</span> <span class="function">WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext,                                                           FormattingConversionService mvcConversionService,                                                           ResourceUrlProvider mvcResourceUrlProvider)</span> </span>&#123;    WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span> WelcomePageHandlerMapping(  <span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(), <span class="comment">// getWelcomePage 获得欢迎页        this.mvcProperties.getStaticPathPattern());    welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));    return welcomePageHandlerMapping;&#125;</span></span><br></pre></td></tr></table></figure><p>点进去继续看 <code>getWelcomPage()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Optional&lt;Resource&gt; <span class="title">getWelcomePage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String[] locations = getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">    <span class="comment">// ::是java8 中新引入的运算符</span></span><br><span class="line">    <span class="comment">// Class::function的时候function是属于Class的，应该是静态方法。</span></span><br><span class="line">    <span class="comment">// this::function的funtion是属于这个对象的。</span></span><br><span class="line">    <span class="comment">// 简而言之，就是一种语法糖而已，是一种简写</span></span><br><span class="line">    <span class="keyword">return</span> Arrays.stream(locations).map(<span class="keyword">this</span>::getIndexHtml).filter(<span class="keyword">this</span>::isReadable).findFirst();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 欢迎页就是一个location下的的 index.html 而已</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Resource <span class="title">getIndexHtml</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.resourceLoader.getResource(location + <span class="string">&quot;index.html&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于设置欢迎页, 可以放在静态资源文件夹下的 <code>index.html</code> 文件将会被 <code>/**</code> 映射 一般都放在 <code>resouces/static</code> 文件夹下</p><p>比如访问 <code> http://localhost:8080/</code> ，就会找静态资源文件夹下的<code> index.html</code></p><p>新建一个<code>index.html</code>，在我们上面的3个目录中任意一个；然后访问测试  <code>http://localhost:8080/ </code>看结果！</p><p>对于网站图标 如果使用的是 <code>SpringBoot2.x</code> 之后的版本 设置关闭默认图标就失效了</p><h4 id="5-2-2、图标定制"><a href="#5-2-2、图标定制" class="headerlink" title="5.2.2、图标定制"></a>5.2.2、图标定制</h4><p>后来在网上搜怎么自定义图标 找到了一篇博客 但是没有生效在这里将博客链接贴一下, 有兴趣可以去尝试一下,</p><p>这个并不重要 <a href="https://www.jianshu.com/p/ead2269d307f">关于 SpringBoot2.x之后版本的自定义图标</a></p><h3 id="5-3、模板引擎-Thymeleaf"><a href="#5-3、模板引擎-Thymeleaf" class="headerlink" title="5.3、模板引擎 Thymeleaf"></a>5.3、模板引擎 Thymeleaf</h3><h4 id="5-3-1、模板引擎"><a href="#5-3-1、模板引擎" class="headerlink" title="5.3.1、模板引擎"></a>5.3.1、模板引擎</h4><p>​    前端交给我们的页面，是 <code>html</code> 页面。如果是我们以前开发，我们需要把他们转成 <code>jsp</code> 页面，<code>jsp</code>好处就是当我们查出一些数据转发到 <code>JSP</code> 页面以后，我们可以用jsp轻松实现数据的显示，及交互等。</p><p><code>jsp</code> 支持非常强大的功能，包括能写 <code>Java</code> 代码，但是呢，我们现在的这种情况，<code>SpringBoot</code> 这个项目首先是以 <code>jar</code> 的方式，不是 <code>war</code>，像第二，我们用的还是嵌入式的 <code>Tomcat</code>，所以呢，<strong>他现在默认是不支持jsp的</strong>。</p><p>那不支持 <code>jsp</code> ，如果我们直接用纯静态页面的方式，那给我们开发会带来非常大的麻烦，那怎么办呢？</p><p><strong>SpringBoot 推荐你可以来使用模板引擎：</strong></p><p>模板引擎，我们其实大家听到很多，其实jsp就是一个模板引擎，还有用的比较多的 <code>freemarker</code> ，包括<code>SpringBoot</code> 给我们推荐的 <code>Thymeleaf</code>，模板引擎有非常多，但再多的模板引擎，他们的思想都是一样的，什么样一个思想呢我们来看一下这张图：</p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://img2020.cnblogs.com/blog/1418974/202003/1418974-20200318131836219-1993983957.png" alt="img"></p><p>模板引擎的作用就是我们来写一个页面模板，比如有些值呢，是动态的，我们写一些表达式。而这些值，从哪来呢，就是我们在后台封装一些数据。然后把这个模板和这个数据交给我们模板引擎，模板引擎按照我们这个数据帮你把这表达式解析、填充到我们指定的位置，然后把这个数据最终生成一个我们想要的内容给我们写出去，这就是我们这个模板引擎，不管是jsp还是其他模板引擎，都是这个思想。只不过呢，就是说不同模板引擎之间，他们可能这个语法有点不一样。其他的我就不介绍了，我主要来介绍一下 <code>SpringBoot</code> 给我们推荐的 <code>Thymeleaf</code> 模板引擎，这模板引擎呢，是一个高级语言的模板引擎，他的这个语法更简单。而且呢，功能更强大。</p><h4 id="5-3-2、引入Thymeleaf"><a href="#5-3-2、引入Thymeleaf" class="headerlink" title="5.3.2、引入Thymeleaf"></a>5.3.2、引入Thymeleaf</h4><p>怎么引入呢，对于springboot来说，什么事情不都是一个start的事情嘛，我们去在项目中引入一下。给大家三个网址：</p><p><a href="https://www.thymeleaf.org/">Thymeleaf 官网</a></p><p><a href="https://github.com/thymeleaf/thymeleaf">Thymeleaf 在Github 的主页</a></p><p><a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter">Spring官方文档:找到对应的版本</a></p><p>导入 <code>pom</code> 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--thymeleaf--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-3-4、Thymeleaf分析"><a href="#5-3-4、Thymeleaf分析" class="headerlink" title="5.3.4、Thymeleaf分析"></a>5.3.4、Thymeleaf分析</h4><p>前面呢，我们已经引入了 <code>Thymeleaf</code>，那这个要怎么使用呢？</p><p>我们首先得按照 <code>SpringBoot</code> 的自动配置原理看一下我们这个<code>Thymeleaf</code>的自动配置规则，在按照那个规则，我们进行使用。</p><p>我们去找一下 <code>Thymeleaf</code> 的自动配置类：<code>ThymeleafProperties</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.thymeleaf&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">&quot;classpath:/templates/&quot;</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">&quot;.html&quot;</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplate = <span class="keyword">true</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplateLocation = <span class="keyword">true</span>;</span><br><span class="line">   <span class="keyword">private</span> String prefix = <span class="string">&quot;classpath:/templates/&quot;</span>;</span><br><span class="line">   <span class="keyword">private</span> String suffix = <span class="string">&quot;.html&quot;</span>;</span><br><span class="line">   <span class="keyword">private</span> String mode = <span class="string">&quot;HTML&quot;</span>;</span><br><span class="line">   <span class="keyword">private</span> Charset encoding;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以在其中看到默认的前缀和后缀！</p><p>只需要把需要的 <code>html</code> 页面放在类路径下的 <code>templates</code> 下，<code>thymeleaf</code> 就可以代替我们自动渲染了。</p><p>使用 <code>thymeleaf</code> 什么都不需要配置，只需要将其放在指定的文件夹下即可！</p><h4 id="5-3-5、测试"><a href="#5-3-5、测试" class="headerlink" title="5.3.5、测试"></a>5.3.5、测试</h4><p><strong>test.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>test<span class="comment">&lt;!--所有的 html 元素都可以被 thymeleaf 替换接管 th:元素名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 template 目录下的所有页面 只能通过 Controller 来跳转</span></span><br><span class="line"><span class="comment">// 这个需要模板引擎支持</span></span><br><span class="line"><span class="meta">@Controllerpublic</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">      model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;helloSpringBoot&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-6、Thymeleaf-语法"><a href="#5-3-6、Thymeleaf-语法" class="headerlink" title="5.3.6、Thymeleaf 语法"></a>5.3.6、Thymeleaf 语法</h4><p>学习语法, 最好是参考官方文档:  <a href="https://www.thymeleaf.org/">Thymeleaf 官网</a></p><ol><li>修改测试请求，增加数据传输；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/t1&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//存入数据    </span></span><br><span class="line">  model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Hello,Thymeleaf&quot;</span>);</span><br><span class="line">  <span class="comment">//classpath:/templates/test.html    </span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>要使用thymeleaf，需要在html文件中导入命名空间的约束，方便提示; </p><p>去官方文档的#3中看一下命名空间拿来过来：</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:th=&quot;http://www.thymeleaf.org&quot;</span><br></pre></td></tr></table></figure><ol start="3"><li>编写下前端页面</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>test<span class="comment">&lt;!--所有的 html 元素都可以被 thymeleaf 替换接管 th: 元素名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">th:each</span>=<span class="string">&quot;user:$&#123;users&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>对于语法的深入</strong></p><p><strong>1. 可以使用任意的 th:attr 来替换Html中原生属性的值！</strong></p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://img2020.cnblogs.com/blog/1418974/202003/1418974-20200318132240409-1760266878.png" alt="img"></p><p><strong>2. 能写哪些表达式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">Simple expressions:（表达式语法）</span><br><span class="line">Variable Expressions: $&#123;...&#125;：获取变量值；OGNL；</span><br><span class="line">    1）、获取对象的属性、调用方法</span><br><span class="line">    2）、使用内置的基本对象：#18</span><br><span class="line">         #ctx : the context object.</span><br><span class="line">         #vars: the context variables.</span><br><span class="line">         #locale : the context locale.</span><br><span class="line">         #request : (only in Web Contexts) the HttpServletRequest object.</span><br><span class="line">         #response : (only in Web Contexts) the HttpServletResponse object.</span><br><span class="line">         #session : (only in Web Contexts) the HttpSession object.</span><br><span class="line">         #servletContext : (only in Web Contexts) the ServletContext object.</span><br><span class="line"></span><br><span class="line">    3）、内置的一些工具对象：</span><br><span class="line">　　　　　　#execInfo : information about the template being processed.</span><br><span class="line">　　　　　　#uris : methods for escaping parts of URLs/URIs</span><br><span class="line">　　　　　　#conversions : methods for executing the configured conversion service (if any).</span><br><span class="line">　　　　　　#dates : methods for java.util.Date objects: formatting, component extraction, etc.</span><br><span class="line">　　　　　　#calendars : analogous to #dates , but for java.util.Calendar objects.</span><br><span class="line">　　　　　　#numbers : methods for formatting numeric objects.</span><br><span class="line">　　　　　　#strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span><br><span class="line">　　　　　　#objects : methods for objects in general.</span><br><span class="line">　　　　　　#bools : methods for boolean evaluation.</span><br><span class="line">　　　　　　#arrays : methods for arrays.</span><br><span class="line">　　　　　　#lists : methods for lists.</span><br><span class="line">　　　　　　#sets : methods for sets.</span><br><span class="line">　　　　　　#maps : methods for maps.</span><br><span class="line">　　　　　　#aggregates : methods for creating aggregates on arrays or collections.</span><br><span class="line">==================================================================================</span><br><span class="line"></span><br><span class="line">  Selection Variable Expressions: *&#123;...&#125;：选择表达式：和$&#123;&#125;在功能上是一样；</span><br><span class="line">  Message Expressions: #&#123;...&#125;：获取国际化内容</span><br><span class="line">  Link URL Expressions: @&#123;...&#125;：定义URL；</span><br><span class="line">  Fragment Expressions: ~&#123;...&#125;：片段引用表达式</span><br><span class="line"></span><br><span class="line">Literals（字面量）</span><br><span class="line">      Text literals: &#x27;one text&#x27; , &#x27;Another one!&#x27; ,…</span><br><span class="line">      Number literals: 0 , 34 , 3.0 , 12.3 ,…</span><br><span class="line">      Boolean literals: true , false</span><br><span class="line">      Null literal: null</span><br><span class="line">      Literal tokens: one , sometext , main ,…</span><br><span class="line">      </span><br><span class="line">Text operations:（文本操作）</span><br><span class="line">    String concatenation: +</span><br><span class="line">    Literal substitutions: |The name is $&#123;name&#125;|</span><br><span class="line">    </span><br><span class="line">Arithmetic operations:（数学运算）</span><br><span class="line">    Binary operators: + , - , * , / , %</span><br><span class="line">    Minus sign (unary operator): -</span><br><span class="line">    </span><br><span class="line">Boolean operations:（布尔运算）</span><br><span class="line">    Binary operators: and , or</span><br><span class="line">    Boolean negation (unary operator): ! , not</span><br><span class="line">    </span><br><span class="line">Comparisons and equality:（比较运算）</span><br><span class="line">    Comparators: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span><br><span class="line">    Equality operators: == , != ( eq , ne )</span><br><span class="line">    </span><br><span class="line">Conditional operators:条件运算（三元运算符）</span><br><span class="line">    If-then: (if) ? (then)</span><br><span class="line">    If-then-else: (if) ? (then) : (else)</span><br><span class="line">    Default: (value) ?: (defaultvalue)</span><br><span class="line">    </span><br><span class="line">Special tokens:</span><br><span class="line">    No-Operation: _</span><br></pre></td></tr></table></figure><p><strong>测试</strong> 循环取出数组中内容</p><p><strong>Controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controllerpublic</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">      model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;helloSpringBoot&quot;</span>);</span><br><span class="line">      model.addAttribute(<span class="string">&quot;users&quot;</span>, Arrays.asList(<span class="string">&quot;Cu1&quot;</span>, <span class="string">&quot;Cu2&quot;</span>));</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>test<span class="comment">&lt;!--所有的 html 元素都可以被 thymeleaf 替换接管 th: 元素名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">th:each</span>=<span class="string">&quot;user:$&#123;users&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-4、SpringMVC-配置"><a href="#5-4、SpringMVC-配置" class="headerlink" title="5.4、SpringMVC 配置"></a>5.4、SpringMVC 配置</h3><h5 id="5-4-1、MVC自动配置原理"><a href="#5-4-1、MVC自动配置原理" class="headerlink" title="5.4.1、MVC自动配置原理"></a>5.4.1、MVC自动配置原理</h5><h6 id="官网阅读"><a href="#官网阅读" class="headerlink" title="官网阅读"></a>官网阅读</h6><p>在进行项目编写前，还需要知道一个东西，就是 <code>SpringBoot</code> 对 <code>SpringMVC</code> 还做了哪些配置，包括如何扩展，如何定制.</p><p>只有把这些都搞清楚了，在之后使用才会更加得心应手. 途径一：源码分析，途径二：官方文档！<a href="%EF%BC%9Ahttps://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-auto-configuration">地址</a> </p><blockquote><p>Spring MVC Auto-configuration<br>// Spring Boot为Spring MVC提供了自动配置，它可以很好地与大多数应用程序一起工作。<br>Spring Boot provides auto-configuration for Spring MVC that works well with most applications.<br>// 自动配置在Spring默认设置的基础上添加了以下功能：<br>The auto-configuration adds the following features on top of Spring’s defaults:<br>// 包含视图解析器<br>Inclusion of ContentNegotiatingViewResolver and BeanNameViewResolver beans.<br>// 支持静态资源文件夹的路径，以及webjars<br>Support for serving static resources, including support for WebJars<br>// 自动注册了Converter：<br>// 转换器，这就是我们网页提交数据到后台自动封装成为对象的东西，比如把”1”字符串自动转换为int类型<br>// Formatter：【格式化器，比如页面给我们了一个2019-8-10，它会给我们自动格式化为Date对象】<br>Automatic registration of Converter, GenericConverter, and Formatter beans.<br>// HttpMessageConverters<br>// SpringMVC用来转换Http请求和响应的的，比如我们要把一个User对象转换为JSON字符串，可以去看官网文档解释；<br>Support for HttpMessageConverters (covered later in this document).<br>// 定义错误代码生成规则的<br>Automatic registration of MessageCodesResolver (covered later in this document).<br>// 首页定制<br>Static index.html support.<br>// 图标定制<br>Custom Favicon support (covered later in this document).<br>// 初始化数据绑定器：帮我们把请求数据绑定到JavaBean中！<br>Automatic use of a ConfigurableWebBindingInitializer bean (covered later in this document).</p><p>/*<br>如果您希望保留Spring Boot MVC功能，并且希望添加其他MVC配置（拦截器、格式化程序、视图控制器和其他功能），则可以添加自己<br>的@configuration类，类型为webmvcconfiguer，但不得添加@EnableWebMvc。如果希望提供<br>RequestMappingHandlerMapping、RequestMappingHandlerAdapter或ExceptionHandlerExceptionResolver的自定义<br>实例，则可以声明WebMVCregistrationAdapter实例来提供此类组件。<br>*/<br>If you want to keep Spring Boot MVC features and you want to add additional MVC configuration<br>(interceptors, formatters, view controllers, and other features), you can add your own<br>@Configuration class of type WebMvcConfigurer but without @EnableWebMvc. If you wish to provide<br>custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter, or<br>ExceptionHandlerExceptionResolver, you can declare a WebMvcRegistrationsAdapter instance to provide such components.</p><p>// 如果您想完全控制Spring MVC，可以添加自己的@Configuration，并用@EnableWebMvc进行注释。<br>If you want to take complete control of Spring MVC, you can add your own @Configuration annotated with @EnableWebMvc.</p></blockquote><p>仔细对照，看一下它怎么实现的，它告诉我们SpringBoot已经帮我们自动配置好了SpringMVC，然后自动配置了哪些东西呢？</p><h6 id="ContentNegotiatingViewResolver-内容协商视图解析器"><a href="#ContentNegotiatingViewResolver-内容协商视图解析器" class="headerlink" title="ContentNegotiatingViewResolver 内容协商视图解析器"></a><strong>ContentNegotiatingViewResolver 内容协商视图解析器</strong></h6><p>==<strong>注:</strong> 如果想要看更透彻的源码 需要降低 <code>SpringBoot</code>  的版本==</p><p>自动配置了 <code>ViewResolver</code>，就是我们之前学习的 <code>SpringMVC</code> 的视图解析器；</p><p>即根据方法的返回值取得视图对象 <code>(View)</code>，然后由视图对象决定如何渲染(转发, 重定向).  进入内部看这里的源码：可以找到 <code>WebMvcAutoConfiguration</code> ， 然后搜索 <code>ContentNegotiatingViewResolver</code>。找到如下方法！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(ViewResolver.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = &quot;viewResolver&quot;, value = ContentNegotiatingViewResolver.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ContentNegotiatingViewResolver <span class="title">viewResolver</span><span class="params">(BeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">   ContentNegotiatingViewResolver resolver = <span class="keyword">new</span> ContentNegotiatingViewResolver();</span><br><span class="line">   resolver.setContentNegotiationManager(beanFactory.getBean(ContentNegotiationManager.class));    <span class="comment">// ContentNegotiatingViewResolver使用所有其他视图解析器来定位视图，因此它应该具有较高的优先级   </span></span><br><span class="line">   resolver.setOrder(Ordered.HIGHEST_PRECEDENCE);</span><br><span class="line">   <span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入 <code>resolver</code> 类可以找到对应解析视图的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span> <span class="comment">// 注解说明：@Nullable 即参数可为null</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      RequestAttributes attrs = RequestContextHolder.getRequestAttributes();</span><br><span class="line">      Assert.state(attrs <span class="keyword">instanceof</span> ServletRequestAttributes, <span class="string">&quot;No current ServletRequestAttributes&quot;</span>);</span><br><span class="line">      List&lt;MediaType&gt; requestedMediaTypes = <span class="keyword">this</span>.getMediaTypes(((ServletRequestAttributes) attrs).getRequest());</span><br><span class="line">      <span class="keyword">if</span> (requestedMediaTypes != <span class="keyword">null</span>) &#123;        <span class="comment">// 获取候选的视图对象        </span></span><br><span class="line">         List&lt;View&gt; candidateViews = <span class="keyword">this</span>.getCandidateViews(viewName, locale, requestedMediaTypes);</span><br><span class="line">         <span class="comment">// 选择一个最适合的视图对象，然后把这个对象返回        </span></span><br><span class="line">         View bestView = <span class="keyword">this</span>.getBestView(candidateViews, requestedMediaTypes, attrs);</span><br><span class="line">         <span class="keyword">if</span> (bestView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> bestView;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;    <span class="comment">// .....</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>可以看到在 <code>resolveViewName</code> 方法中首先判断是否有用户自己定义的视图对象, 如果有就调用 <code>getBestView</code> 方法去调用<code>getCandidateViews</code> 得到 <code>List&lt;&gt;</code> 中获取的候选视图进行选择, 得到一个 <code>bestView</code> </p><p>继续点进去看 <code>getCandidateViews</code> 是怎么获得候选的视图的呢</p><p><code>getCandidateViews</code> 中看到他是把所有的视图解析器拿来，进行 <code>while</code> 循环，挨个解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Iterator var5 = <span class="keyword">this</span>.viewResolvers.iterator();</span><br></pre></td></tr></table></figure><p>所以得出结论：<strong>ContentNegotiatingViewResolver 这个视图解析器就是用来组合所有的视图解析器的</strong></p><p>再去研究下他的组合逻辑，看到有个属性viewResolvers，看看它是在哪里进行赋值的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initServletContext</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 这里它是从beanFactory工具中获取容器中的所有视图解析器    </span></span><br><span class="line">      <span class="comment">// ViewRescolver.class 把所有的视图解析器来组合的    </span></span><br><span class="line">      Collection&lt;ViewResolver&gt; matchingBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(<span class="keyword">this</span>.obtainApplicationContext(), ViewResolver.class).values();</span><br><span class="line">      ViewResolver viewResolver;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.viewResolvers == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">this</span>.viewResolvers = <span class="keyword">new</span> ArrayList(matchingBeans.size());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// ...............</span></span><br><span class="line">   &#125;</span><br><span class="line">      </span><br></pre></td></tr></table></figure><p>既然它是在容器中去找视图解析器，是否可以猜想，能够去实现一个视图解析器了呢？</p><p>可以手动给容器中去添加一个视图解析器；这个类就会帮我们自动的将它组合进来；<strong>下面即可以实现一下</strong></p><ul><li>在主程序中去写一个视图解析器来试试 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="comment">//放到bean中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ViewResolver <span class="title">myViewResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> MyViewResolver();</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">//我们写一个静态内部类，视图解析器就需要实现ViewResolver接口</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewResolver</span> <span class="keyword">implements</span> <span class="title">ViewResolver</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String s, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p><strong>这里更推荐将静态内部类拆分为一个独立的类 然后再单独写一个配置类用来返回自定义的配置类</strong></p><ul><li>怎么看自定义实现的视图解析器有没有起作用呢？</li></ul><p>给 <code>DispatcherServlet</code> 中的 <code>doDispatch</code> 方法 加个断点进行调试一下，因为所有的请求都会走到这个方法中</p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://img2020.cnblogs.com/blog/1418974/202003/1418974-20200320135649063-435423503.png" alt="img"></p><ul><li>启动项目，随后随便访问一个页面，看一下 Debug 信息, 找到 <code>this</code></li></ul><p>找到视图解析器，看到自定义的视图解析器的就在这里了；</p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://img2020.cnblogs.com/blog/1418974/202003/1418974-20200320135721808-908348729.png" alt="img"></p><h6 id="转换器和格式化器"><a href="#转换器和格式化器" class="headerlink" title="转换器和格式化器"></a>转换器和格式化器</h6><p>在 <code>WebMvcAutoConfiguration</code> 中找到格式化转换器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FormattingConversionService <span class="title">mvcConversionService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   Format format = <span class="keyword">this</span>.mvcProperties.getFormat();</span><br><span class="line">   <span class="comment">// 拿到配置文件中的格式化规则    </span></span><br><span class="line">   WebConversionService conversionService = <span class="keyword">new</span> WebConversionService((<span class="keyword">new</span> DateTimeFormatters()).</span><br><span class="line">           dateFormat(format.getDate()).timeFormat(format.getTime()).</span><br><span class="line">           dateTimeFormat(format.getDateTime()));</span><br><span class="line">   <span class="keyword">this</span>.addFormatters(conversionService);</span><br><span class="line">   <span class="keyword">return</span> conversionService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击进 <code>format.getXXX()</code> 中如果是新版本就会发现里面有默认属性但是具体是什么并不知道, 猜测是封装起来,  并通过 绑定配置文件在容器中进行初始化</p><p>如果是老版本就会有下面的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDateFormat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">this</span>.dateFormat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** Date format to use. For instance, `dd/MM/yyyy`. 默认的 */</span></span><br><span class="line"><span class="keyword">private</span> String dateFormat;</span><br></pre></td></tr></table></figure><p>可以看到在 <code>Properties</code> 或 <code>yaml</code> 文件中，可以自动配置它！</p><p>如果配置了自定义的格式化方式，就会注册到 <code>Bean</code> 中生效, 就可以在配置文件中配置日期格式化的规则：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">format:</span></span><br><span class="line">      <span class="attr">date-time:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate</span><span class="params">(String date)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.date = date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>其余的就不一一举例, 可以自行去了解</strong></p><h6 id="修改SpringBoot的默认配置"><a href="#修改SpringBoot的默认配置" class="headerlink" title="修改SpringBoot的默认配置"></a>修改SpringBoot的默认配置</h6><p>这么多的自动配置，原理都是一样的，通过 <code>WebMVC</code> 的自动配置原理分析，需要学会一种学习方式，通过源码探究，得出结论；这个结论一定是属于自己的，而且一通百通。</p><p><code>SpringBoot</code> 的底层，大量用到了这些设计细节思想，所以，需要多阅读源码! 得出结论；</p><p><strong><code>SpringBoot</code> 在自动配置很多组件的时候，先看容器中有没有用户自己配置的 (如果用户自己配置 <code>@bean</code> )，如果有就用用户配置的，如果没有就用自动配置的；</strong></p><p><strong>如果有些组件可以存在多个，比如我们的视图解析器，就将用户配置的和自己默认的组合起来！</strong></p><h6 id="扩展使用SpringMVC"><a href="#扩展使用SpringMVC" class="headerlink" title="扩展使用SpringMVC"></a><strong>扩展使用SpringMVC</strong></h6><p>官方文档如下：</p><blockquote><p>If you want to keep Spring Boot MVC features and you want to add additional MVC configuration (interceptors, formatters, view controllers, and other features), you can add your own @Configuration class of type WebMvcConfigurer but without @EnableWebMvc. If you wish to provide custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter, or ExceptionHandlerExceptionResolver, you can declare a WebMvcRegistrationsAdapter instance to provide such components.</p></blockquote><p>用户要做的就是编写一个 <code>@Configuration</code> 注解类，并且类型要为 <code>WebMvcConfigurer</code> ，并且不能标注<code>@EnableWebMvc</code> 注解；</p><p>下面去自定义一个；新建一个包叫config，写一个类 <code>MyMvcConfig</code>；</p><p>​    <img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="C:\Users\雷神\AppData\Roaming\Typora\typora-user-images\image-20211024165818485.png" alt="image-20211024165818485"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//全面扩展 springMVC</span><br><span class="line">// 如果要扩展 SpringMVC 官方建议这样去做</span><br><span class="line">@Configuration</span><br><span class="line">//@EnableWebMvc </span><br><span class="line">// 其导入了一个类 DelegatingWebMvcConfiguration 从容器中获取所有的 webMvcConfig:</span><br><span class="line">public class MyMvcConfig implements WebMvcConfigurer &#123;</span><br><span class="line">   public interface ViewResolver //实现了视图解析器接口的类 就可以把它看作视图解析器    </span><br><span class="line">   // 视图跳转    </span><br><span class="line">   @Override</span><br><span class="line">   public void addViewControllers(ViewControllerRegistry registry) &#123;</span><br><span class="line">      registry.addViewController(&quot;/Cu1&quot;).setViewName(&quot;test&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试请自行启动 <code>SpringBoot</code> 项目进行测试 最后发现自定义视图解析器中访问 <code>/Cu1</code> 后跳转到 <code>test.html</code></p><p><strong>所以说，要扩展SpringMVC，官方就推荐这么去使用，既保SpringBoot留所有的自动配置，也能使用用户扩展的配置！</strong></p><p><strong>可以去分析一下原理：</strong></p><ol><li><p><code>WebMvcAutoConfiguration </code>是 <code>SpringMVC</code> 的自动配置类，里面有一个类<code>WebMvcAutoConfigurationAdapter</code></p></li><li><p>这个类上有一个注解，在做其他自动配置时会导入：<code>@Import(EnableWebMvcConfiguration.class)</code></p></li><li><p>点进 <code>EnableWebMvcConfiguration</code> 这个类，它继承了一个父类：<code>DelegatingWebMvcConfiguration</code> , 这个父类中有这样一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> WebMvcConfigurerComposite configurers = <span class="keyword">new</span> WebMvcConfigurerComposite();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 从容器中获取所有的webmvcConfigurer    </span></span><br><span class="line">   <span class="meta">@Autowired(required = false)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line">         <span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以在这个类中去寻找一个刚才设置的 <code>viewController</code> 当做参考，发现它调用了一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;    <span class="keyword">this</span>.configurers.addViewControllers(registry);&#125;</span><br></pre></td></tr></table></figure></li><li><p>点击进入 <code>addViewControllers</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">  Iterator var2 = <span class="keyword">this</span>.delegates.iterator();</span><br><span class="line">  <span class="keyword">while</span> (var2.hasNext()) &#123;</span><br><span class="line"><span class="comment">// 将所有的WebMvcConfigurer相关配置来一起调用！包括我们自己配置的和Spring给我们配置的     </span></span><br><span class="line">      WebMvcConfigurer delegate = (WebMvcConfigurer) var2.next();</span><br><span class="line">      delegate.addViewControllers(registry);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>所以得出结论：所有的WebMvcConfiguration都会被作用，不止Spring自己的配置类，用户自己的配置类当然也会被调用；</strong></p></li></ol><h6 id="全面接管SpringMVC"><a href="#全面接管SpringMVC" class="headerlink" title="全面接管SpringMVC"></a>全面接管SpringMVC</h6><p>官方文档：</p><blockquote><p>If you want to take complete control of Spring MVC<br>you can add your own @Configuration annotated with @EnableWebMvc.</p></blockquote><p>全面接管即：<code>SpringBoot对SpringMVC</code> 的自动配置不需要了，所有都是用户自己去配置！</p><p>只需在我们的配置类中要加一个 <code>@EnableWebMvc</code> 。</p><p>如果用户选择全面接管了 <code>SpringMVC</code> 了，那么之前 <code>SpringBoot</code> 默认配置的静态资源映射一定会无效，我们可以去测试一下；</p><p><strong>当然，在开发中，不推荐使用全面接管SpringMVC</strong></p><p>思考问题？为什么加了一个注解，自动配置就失效了！继续看下源码：</p><ol><li><p>进入<code>@EnableWebMvc</code> 发现它是导入了一个类，可以继续进去看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;DelegatingWebMvcConfiguration.class&#125;)</span><span class="keyword">public</span> <span class="meta">@interface</span> EnableWebMvc &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>进入 <code>DelegatingWebMvcConfiguration</code> 类 发现它继承了一个父类 <code>WebMvcConfigurationSupport</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;  <span class="comment">// ......&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>现在来回顾一下Webmvc自动配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class&#125;)</span></span><br><span class="line"><span class="comment">// 这个注解的意思就是：容器中没有这个组件的时候，这个自动配置类才生效</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123;DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class, ValidationAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure></li><li><p>总结一句话：<code>@EnableWebMvc</code> 将 <code>WebMvcConfigurationSupport</code> 组件导入进来了, 导致了 SpringMVC 的配置失效</p><p>而导入的 <code>WebMvcConfigurationSupport</code> 只是 <code>SpringMVC</code> 最基本的功能！</p><p>==<strong>在SpringBoot中会有非常多的扩展配置，只要看见了这个，就应该多留心注意~</strong>==</p></li></ol><h2 id="6、数据库"><a href="#6、数据库" class="headerlink" title="6、数据库"></a>6、数据库</h2><h3 id="6-1、SpringData简介"><a href="#6-1、SpringData简介" class="headerlink" title="6.1、SpringData简介"></a>6.1、SpringData简介</h3><p>对于数据访问层，无论是 SQL(关系型数据库) 还是 NOSQL(非关系型数据库)，Spring Boot 底层都是采用 Spring Data 的方式进行统一处理。</p><p>Spring Boot 底层都是采用 Spring Data 的方式进行统一处理各种数据库，Spring Data 也是 Spring 中与 Spring Boot、Spring Cloud 等齐名的知名项目。</p><p><a href="https://spring.io/projects/spring-data">Sping Data 官网</a></p><p>数据库相关的启动器 ：<a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter">可以参考官方文档</a></p><h3 id="6-2、整合JDBC-建议快速看过即可"><a href="#6-2、整合JDBC-建议快速看过即可" class="headerlink" title="6.2、整合JDBC (建议快速看过即可)"></a>6.2、整合JDBC (建议快速看过即可)</h3><h4 id="创建测试项目测试数据源"><a href="#创建测试项目测试数据源" class="headerlink" title="创建测试项目测试数据源"></a>创建测试项目测试数据源</h4><ol><li><p>新建一个项目测试：springboot-data-jdbc ; 引入相应的模块！基础模块</p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://img2020.cnblogs.com/i-beta/1418974/202003/1418974-20200314125500009-472778612.png" alt="img"></p></li><li><p><strong>编写yaml配置文件连接数据库；</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment">#?serverTimezone=UTC解决时区的报错(如果不是 mysql 8.0+ 的话不需要设置时区)</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure></li></ol><p>配置完后，就可以直接去使用了，因为 <code>SpringBoot</code> 已经默认进行了自动配置</p><p><strong>测试类测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTestclass</span></span><br><span class="line">SpringBoot04DataApplicationTests &#123;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   DataSource dataSource;</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span> <span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">      <span class="comment">//查看默认数据源        </span></span><br><span class="line">      System.out.println(dataSource.getClass());</span><br><span class="line">      <span class="comment">//获取数据源class com.zaxxer.hikari.HikariDataSource 默认的数据源       </span></span><br><span class="line">      Connection connection = dataSource.getConnection();</span><br><span class="line">      <span class="comment">// xxxx Template: springBoot 已经配置好的模板 Bean 拿来即用        </span></span><br><span class="line">      <span class="comment">// 关闭连接         </span></span><br><span class="line">      connection.close();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果</strong>：可以看到默认配置的数据源为 : <code>class com.zaxxer.hikari.HikariDataSource </code>， 并不需要手动配置</p><p>进行全局搜索, 找到数据源的所有自动配置都在: <code>DataSourceAutoConfiguration</code> 文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;Hikari.class, Tomcat.class, Dbcp2.class, Generic.class, DataSourceJmxConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PooledDataSourceConfiguration</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="title">PooledDataSourceConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可以使用 spring.datasource.type 指定自定义的数据源类型，值为 要使用的连接池实现的完全限定名。</strong></p><p><code>SpringBoot</code> 也提供了数据库连接的类 <code>JDBCTemplate</code></p><h4 id="JDBCTemplate"><a href="#JDBCTemplate" class="headerlink" title="JDBCTemplate"></a>JDBCTemplate</h4><ol><li><p>有了数据源 <code>(com.zaxxer.hikari.HikariDataSource)</code> ，可以拿到数据库连接 <code>(java.sql.Connection)</code> ，有了连接，就可以使用原生的 JDBC 语句来操作数据库；</p></li><li><p>即使不使用第三方第数据库操作框架，如 <code>MyBatis</code> 等，<code>Spring</code> 本身也对原生的 <code>JDBC</code> 做了轻量级的封装，即 <code>JdbcTemplate</code></p></li><li><p>数据库操作的所有 <code>CRUD</code> 方法都在 <code>JdbcTemplate</code> 中。</p></li><li><p><code>Spring Boot</code> 不仅提供了默认的数据源，同时默认已经配置好了<code> JdbcTemplate</code> 放在了容器中，用户只需自己注入即可使用</p></li><li><p><code>JdbcTemplate</code> 的自动配置是依赖 <code>org.springframework.boot.autoconfigure.jdbc</code> 包下的<code> JdbcTemplateConfiguration</code> 类</p><p><strong>JdbcTemplate主要提供以下几类方法：</strong></p><ul><li>execute方法：可以用于执行任何SQL语句，一般用于执行DDL语句；</li><li>update方法及batchUpdate方法：update方法用于执行新增、修改、删除等语句；batchUpdate方法用于执行批处理相关语句；</li><li>query方法及queryForXXX方法：用于执行查询相关语句；</li><li>call方法：用于执行存储过程、函数相关语句。</li></ul></li></ol><p> <strong>测试</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/jdbc&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcController</span> </span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Spring Boot 默认提供了数据源，默认提供了 org.springframework.jdbc.core.JdbcTemplate</span></span><br><span class="line"><span class="comment">    * * JdbcTemplate 中会自己注入数据源，用于简化 JDBC操作</span></span><br><span class="line"><span class="comment">    * * 还能避免一些常见的错误,使用起来也不用再自己来关闭数据库连接</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//查询employee表中所有数据    </span></span><br><span class="line"><span class="comment">// List 中的1个 Map 对应数据库的 1行数据    </span></span><br><span class="line"><span class="comment">// Map 中的 key 对应数据库的字段名，value 对应数据库的字段值    </span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; userList() &#123;</span><br><span class="line">      String sql = <span class="string">&quot;select * from employee&quot;</span>;</span><br><span class="line">      List&lt;Map&lt;String, Object&gt;&gt; maps = jdbcTemplate.queryForList(sql);</span><br><span class="line">      <span class="keyword">return</span> maps;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//新增一个用户    </span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/add&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//插入语句，注意时间问题        </span></span><br><span class="line">      String sql = <span class="string">&quot;insert into employee(last_name, email,gender,department,birth)&quot;</span> + <span class="string">&quot; values (&#x27;狂神说&#x27;,&#x27;24736743@qq.com&#x27;,1,101,&#x27;&quot;</span> + <span class="keyword">new</span> Date().toLocaleString() + <span class="string">&quot;&#x27;)&quot;</span>;</span><br><span class="line">      jdbcTemplate.update(sql);</span><br><span class="line">      <span class="comment">//查询        </span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;addOk&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//修改用户信息    </span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/update/&#123;id&#125;&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 插入语句        </span></span><br><span class="line">      <span class="comment">// String sql = &quot;update employee set last_name=?,email=? where id=&quot;+id;        </span></span><br><span class="line">      <span class="comment">// 数据        </span></span><br><span class="line">      Object[] objects = <span class="keyword">new</span> Object[<span class="number">2</span>];</span><br><span class="line">      objects[<span class="number">0</span>] = <span class="string">&quot;秦疆&quot;</span>;</span><br><span class="line">      objects[<span class="number">1</span>] = <span class="string">&quot;24736743@sina.com&quot;</span>;</span><br><span class="line">      jdbcTemplate.update(sql, objects);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;updateOk&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 删除用户    </span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">delUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 插入语句        </span></span><br><span class="line">      String sql = <span class="string">&quot;delete from employee where id=?&quot;</span>;</span><br><span class="line">      jdbcTemplate.update(sql, id);                </span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;deleteOk&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3、-集成Druid"><a href="#6-3、-集成Druid" class="headerlink" title="6.3、 集成Druid"></a>6.3、 集成Druid</h3><h4 id="Druid简介"><a href="#Druid简介" class="headerlink" title="Druid简介"></a>Druid简介</h4><p><code>Java</code> 程序很大一部分要操作数据库，为了提高性能操作数据库的时候，又不得不使用数据库连接池。</p><p><code>Druid</code> 是阿里巴巴开源平台上一个数据库连接池实现，结合了 <code>C3P0、DBCP</code> 等 <code>DB</code> 池的优点，同时加入了<strong>日志监控</strong>。</p><p><code>Druid</code> 监控 <code>DB</code> 池连接和 <code>SQL</code> 的执行情况，是针对监控而生的 <code>DB</code> 连接池。</p><p><code>Spring Boot 2.0</code> 以上默认使用 <code>Hikari</code> 数据源，可以说 <code>Hikari</code> 与 <code>Driud</code> 都是当前<code>Java Web</code>上最优秀的数据源，讲来重点介绍 <code>Spring Boot</code> 如何集成 <code>Druid</code>数据源，实现数据库监控。<a href="https://github.com/alibaba/druid/">Github地址</a></p><p><strong>com.alibaba.druid.pool.DruidDataSource 基本配置参数如下：</strong></p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://img2020.cnblogs.com/i-beta/1418974/202003/1418974-20200315130100616-1363003780.png" alt="img"></p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://img2020.cnblogs.com/i-beta/1418974/202003/1418974-20200315130120347-1640632477.png" alt="img"></p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://img2020.cnblogs.com/i-beta/1418974/202003/1418974-20200315130155468-660906104.png" alt="img"></p><h4 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--druid 数据源--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>切换数据源  <code>Spring Boot 2.0</code> 以上默认使用 <code>com.zaxxer.hikari.HikariDataSource</code> 数据源，但可以 通过 <code>spring.datasource.type</code> 指定数据源</p></li><li><p>下面是 <code>Druid</code> 的配置</p><p>可以设置数据源连接初始化大小、最大连接数、等待时间、最小连接数 等设置项；可以查看源码</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> </span><br><span class="line">    <span class="attr">password:</span> </span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://47.100.227.175:3306/School?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="comment"># 切换为 druid 数据源</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line">      <span class="comment">#druid 数据源专有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">    <span class="comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span></span><br><span class="line">    <span class="comment">#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure><h4 id="导入Log4j-的依赖"><a href="#导入Log4j-的依赖" class="headerlink" title="导入Log4j 的依赖"></a>导入Log4j 的依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>进行了上面的配置之后, 就不再使用 <code>SprinhBoot</code> 提供的默认 <code>Druid</code> 数据源了, 而是想要 <code>SpringBoot</code> 使用自定义配置的数据源, 需要自行利用配置类将数据源 <code>DruidDataSource</code> 组件添加到容器中并绑定属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用 Druid 数据源</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置Druid数据源监控"><a href="#配置Druid数据源监控" class="headerlink" title="配置Druid数据源监控"></a>配置Druid数据源监控</h4><p><code>Druid</code> 数据源具有监控的功能，并提供了一个 web 界面方便用户查看，类似安装 路由器 时，同时也提供了一个默认的 <code>web</code> 页面。</p><p>所以第一步需要设置 <code>Druid</code> 的后台管理页面，比如 登录账号、密码 等；配置后台管理；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后台监控 相当于 web.xml</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *  因为 SpringBoot 内置了 servlet 容器 所以没有 web.xml 替代方法 ServletRegistrationBean</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">StatViewServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServletRegistrationBean&lt;StatViewServlet&gt; bean = <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(<span class="keyword">new</span> StatViewServlet(), <span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line">        HashMap&lt;String, String&gt; initParameters = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加配置</span></span><br><span class="line">        <span class="comment">//登录的 key 是固定的</span></span><br><span class="line">        initParameters.put(<span class="string">&quot;loginUsername&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        initParameters.put(<span class="string">&quot;loginPassword&quot;</span>, <span class="string">&quot;35157210&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 允许谁可以访问</span></span><br><span class="line"><span class="comment">        * 若为空 则所有人都可以访问</span></span><br><span class="line"><span class="comment">        * 可以填具体的人</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        initParameters.put(<span class="string">&quot;allow&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 禁止谁可以访问</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="comment">//initParameters.put(&quot;用户名&quot;, &quot;用户 Ip&quot;);</span></span><br><span class="line">        <span class="comment">//后台有人需要登录 账号密码配置</span></span><br><span class="line">        bean.setInitParameters(initParameters); <span class="comment">//初始化参数</span></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//filter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStarFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean&lt;Filter&gt; bean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;();</span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以过滤哪些请求</span></span><br><span class="line">        HashMap&lt;String, String&gt; initParameters = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这些东西不进行统计</span></span><br><span class="line">        initParameters.put(<span class="string">&quot;exclusions&quot;</span>, <span class="string">&quot;*.js, *.css, /druid/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        bean.setInitParameters(initParameters);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>配置完毕后，我们可以选择访问 ：<a href="http://localhost:8080/druid/login.html">http://localhost:8080/druid/login.html</a></p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="C:\Users\雷神\AppData\Roaming\Typora\typora-user-images\image-20211031201739958.png" alt="image-20211031201739958"></p><p> 进入之后</p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="C:\Users\雷神\AppData\Roaming\Typora\typora-user-images\image-20211031201813993.png" alt="image-20211031201813993"></p><h4 id="配置-Druid-web-监控-filter-过滤器"><a href="#配置-Druid-web-监控-filter-过滤器" class="headerlink" title="配置 Druid web 监控 filter 过滤器"></a><strong>配置 Druid web 监控 filter 过滤器</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//filter    @Bean    public FilterRegistrationBean webStarFilter() &#123;        FilterRegistrationBean&lt;Filter&gt; bean = new FilterRegistrationBean&lt;&gt;();        bean.setFilter(new WebStatFilter());        //可以过滤哪些请求        HashMap&lt;String, String&gt; initParameters = new HashMap&lt;&gt;();        //这些东西不进行统计        initParameters.put(&quot;exclusions&quot;, &quot;*.js, *.css, /druid/*&quot;);        bean.setInitParameters(initParameters);        return bean;    &#125;</span></span><br></pre></td></tr></table></figure><p><strong>平时在工作中，按需求进行配置即可，主要用作监控！</strong></p><p>完整代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">@Configurationpublic</span><br><span class="line">class DruidConfig &#123;</span><br><span class="line">    //使用 Druid 数据源</span><br><span class="line">    @ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span><br><span class="line">    @Bean</span><br><span class="line">    public DataSource druidDataSource() &#123;</span><br><span class="line">        return new DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //后台监控 相当于 web.xml</span><br><span class="line">    /**</span><br><span class="line">     * 因为 SpringBoot 内置了 servlet 容器 所以没有 web.xml 替代方法 ServletRegistrationBean</span><br><span class="line">     * */</span><br><span class="line">    @Bean</span><br><span class="line">    public ServletRegistrationBean StatViewServlet() &#123;</span><br><span class="line">        ServletRegistrationBean&lt;StatViewServlet&gt; bean = new ServletRegistrationBean&lt;&gt;(new StatViewServlet(), &quot;/druid/*&quot;);</span><br><span class="line">        HashMap&lt;String, String&gt; initParameters = new HashMap&lt;&gt;();</span><br><span class="line">        //添加配置</span><br><span class="line">        // 登录的 key 是固定的</span><br><span class="line">        initParameters.put(&quot;loginUsername&quot;, &quot;admin&quot;);</span><br><span class="line">        initParameters.put(&quot;loginPassword&quot;, &quot;35157210&quot;);</span><br><span class="line">        /** 允许谁可以访问</span><br><span class="line">         * 若为空 则所有人都可以访问       * 可以填具体的人        </span><br><span class="line">         **/</span><br><span class="line">        initParameters.put(&quot;allow&quot;, &quot;&quot;);</span><br><span class="line">        /** </span><br><span class="line">         * 禁止谁可以访问</span><br><span class="line">         **/</span><br><span class="line">        initParameters.put(&quot;用户名&quot;, &quot;用户 Ip&quot;);</span><br><span class="line">        //后台有人需要登录 账号密码配置        </span><br><span class="line">        bean.setInitParameters(initParameters);</span><br><span class="line">        //初始化参数        </span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //filter    </span><br><span class="line">    @Bean</span><br><span class="line">    public FilterRegistrationBean webStarFilter() &#123;</span><br><span class="line">        FilterRegistrationBean&lt;Filter&gt; bean = new FilterRegistrationBean&lt;&gt;();</span><br><span class="line">        bean.setFilter(new WebStatFilter());</span><br><span class="line">        //可以过滤哪些请求     </span><br><span class="line">        HashMap&lt;String, String&gt; initParameters = new HashMap&lt;&gt;();</span><br><span class="line">        //这些东西不进行统计        </span><br><span class="line">        initParameters.put(&quot;exclusions&quot;, &quot;*.js, *.css, /druid/*&quot;);</span><br><span class="line">        bean.setInitParameters(initParameters);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-4、整合-MyBatis"><a href="#6-4、整合-MyBatis" class="headerlink" title="6.4、整合 MyBatis"></a>6.4、整合 MyBatis</h3><p><a href="http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/">官方文档</a></p><p><a href="https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter/2.1.1">Maven仓库地址</a></p><h4 id="整合测试"><a href="#整合测试" class="headerlink" title="整合测试"></a>整合测试</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis 整合 mybatis-spring-boot-starter 非 SpringBoot 官方--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置数据库连接信息（不变）"><a href="#配置数据库连接信息（不变）" class="headerlink" title="配置数据库连接信息（不变）"></a>配置数据库连接信息（不变）</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 47.100.227.175</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">username:</span></span><br><span class="line">  <span class="attr">password:</span></span><br><span class="line">  <span class="attr">url:</span></span><br><span class="line">    <span class="attr">jdbc:</span> <span class="string">mysql://47.100.227.175:3306/School?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span>    <span class="comment"># 配置 druid 数据源    </span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span>      </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">#Spring Boot    #druid</span></span><br><span class="line">  <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500#</span> <span class="string">配置</span></span><br><span class="line">    <span class="attr">MyBatismybatis:</span></span><br><span class="line">      <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br><span class="line">    <span class="comment"># type-aliases-package: com.cu1.pojo 扫描包</span></span><br></pre></td></tr></table></figure><p><strong>测试数据库是否连接成功！</strong></p><h4 id="创建实体类，导入-Lombok"><a href="#创建实体类，导入-Lombok" class="headerlink" title="创建实体类，导入 Lombok"></a><strong>创建实体类，导入 Lombok</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructorpublic</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建mapper目录以及对应的-Mapper-接口"><a href="#创建mapper目录以及对应的-Mapper-接口" class="headerlink" title="创建mapper目录以及对应的 Mapper 接口"></a><strong>创建mapper目录以及对应的 Mapper 接口</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个注解表示了这是一个 MyBatis 的 Mapper 类</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span><span class="comment">//这个不需要 只需要 mapper 就可以</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">queryUserList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">queryUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="对应的Mapper映射文件"><a href="#对应的Mapper映射文件" class="headerlink" title="对应的Mapper映射文件"></a><strong>对应的Mapper映射文件</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.cu1.mapper.UserMapper&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;queryUserList&quot; resultType=&quot;com.cu1.pojo.User&quot; useCache=&quot;true&quot;&gt;</span><br><span class="line">        select * from School.User;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;queryUserById&quot; resultType=&quot;com.cu1.pojo.User&quot;&gt;</span><br><span class="line">        select * from School.User where id = #&#123;id&#125;;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;insert id=&quot;addUser&quot; parameterType=&quot;com.cu1.pojo.User&quot;&gt;</span><br><span class="line">        insert into School.User (id, name) values (#&#123;id&#125;, #&#123;name&#125;);</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;update id=&quot;updateUser&quot; parameterType=&quot;com.cu1.pojo.User&quot;&gt;</span><br><span class="line">        update School.User set name = #&#123;name&#125; where id = #&#123;id&#125;;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line"></span><br><span class="line">    &lt;delete id=&quot;deleteUser&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">        delete from School.User where id = #&#123;id&#125;;</span><br><span class="line">    &lt;/delete&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>**然后设置 <code>mapper.xml</code> 的路径 **</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置 MyBatis</span></span><br><span class="line"><span class="attr">mybatis: mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br><span class="line"><span class="comment"># type-aliases-package: com.cu1.pojo 扫描包</span></span><br></pre></td></tr></table></figure><p>这样就把 <code>.xml</code> 配置文件加入到 <code>MyBatis</code> 中</p><p>如果不想配置可以选择在</p><p>​    <img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="C:\Users\雷神\AppData\Roaming\Typora\typora-user-images\image-20211101220446773.png" alt="image-20211101220446773"></p><p>中加入 <code>MyBatis</code> 扫描包的注解 但是建议把配置文件放到 <code>resources</code> 中统一配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//扫描某个包下的 mapper 类似于之前的扫描包</span></span><br><span class="line"><span class="comment">//@MapperScan(&quot;com.cu1.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot05MyBatisApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBoot05MyBatisApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写-Controller-进行测试！"><a href="#编写-Controller-进行测试！" class="headerlink" title="编写 Controller 进行测试！"></a><strong>编写 Controller 进行测试！</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/queryUserList&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.queryUserList();</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7、SpringSecurity"><a href="#7、SpringSecurity" class="headerlink" title="7、SpringSecurity"></a>7、SpringSecurity</h2><h3 id="安全简介"><a href="#安全简介" class="headerlink" title="安全简介"></a>安全简介</h3><ul><li><p>在 Web 开发中，安全一直是非常重要的一个方面。安全虽然属于应用的非功能性需求，但是应该在应用开发的初期就考虑进来。如果在应用开发的后期才考虑安全的问题，就可能陷入一个两难的境地：一方面，应用存在严重的安全漏洞，无法满足用户的要求，并可能造成用户的隐私数据被攻击者窃取；另一方面，应用的基本架构已经确定，要修复安全漏洞，可能需要对系统的架构做出比较重大的调整，因而需要更多的开发时间，影响应用的发布进程。因此，从应用开发的第一天就应该把安全相关的因素考虑进来，并在整个应用的开发过程中。</p></li><li><p>存在比较有名的：<code>Shiro</code>，<code>Spring Security</code> ！</p></li><li><p>这里需要阐述一下的是，每一个框架的出现都是为了解决某一问题而产生了，那么 <code>Spring Security</code> 框架的出现是为了解决什么问题呢？</p></li><li><p><a href="https://docs.spring.io/spring-security/site/docs/5.5.2-SNAPSHOT/reference/html5/">Spring Security官网地址</a></p></li></ul><blockquote><p>Spring Security is a powerful and highly customizable authentication and access-control framework. It is the de-facto standard for securing Spring-based applications.</p><p>Spring Security is a framework that focuses on providing both authentication and authorization to Java applications. Like all Spring projects, the real power of Spring Security is found in how easily it can be extended to meet custom requirement</p></blockquote><p><code>Spring Security</code> 是一个功能强大且高度可定制的身份验证和访问控制框架。它实际上是保护基于 <code>spring</code>的应用程序的标准。</p><p><code>Spring Security</code> 是一个框架，侧重于为 <code>Java</code> 应用程序提供身份验证和授权。与所有 <code>Spring</code> 项目一样，<code>Spring</code> 安全性的真正强大之处在于它可以轻松地扩展以满足定制需求</p><ul><li><p>从官网的介绍中可以知道这是一个 <strong>权限框架</strong>  想我们之前做项目是没有使用框架是怎么控制权限的？对于权限 一般会细分为 ==功能权限，访问权限，和菜单权限==。代码会写的非常的繁琐，冗余。</p></li><li><p>怎么解决之前写权限代码繁琐，冗余的问题，一些主流框架就应运而生而 <code>Spring Scecurity</code> 就是其中的一种。</p></li><li><p><strong>Spring 是一个非常流行和成功的 Java 应用开发框架。<code>Spring Security</code> 基于 <code>Spring</code> 框架，提供了一套 Web 应用安全性的完整解决方案。一般来说，Web 应用的安全性包括==用户认证====Authentication==）和==用户授权==（==Authorization==）两个部分。用户认证指的是验证某个用户是否为系统中的合法主体，也就是说用户能否访问该系统。用户认证一般要求用户提供用户名和密码。系统通过校验用户名和密码来完成认证过程。用户授权指的是验证某个用户是否有权限执行某个操作。在一个系统中，不同用户所具有的权限是不同的。比如对一个文件来说，有的用户只能进行读取，而有的用户可以进行修改。一般来说，系统会为不同的用户分配不同的角色，而每个角色则对应一系列的权限。</strong></p></li><li><p>对于上面提到的两种应用情景，<code>Spring Security</code> 框架都有很好的支持。在用户认证方面，<code>Spring Security</code>框架支持主流的认证方式，包括 <code>HTTP基本认证</code>、<code>HTTP 表单验证</code>、<code>HTTP 摘要认证</code>、<code>OpenID</code> 和 <code>LDAP</code> 等。在用户授权方面，<code>Spring Security</code> 提供了基于角色的访问控制和访问控制列表（<code>Access Control List</code>，<code>ACL</code>），可以对应用中的领域对象进行细粒度的控制。</p></li></ul><h3 id="导入-SpringSecurity"><a href="#导入-SpringSecurity" class="headerlink" title="导入 SpringSecurity"></a>导入 SpringSecurity</h3><p><strong>pom.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--Thymeleaf 与 security 整合包--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.thymeleaf.extras/thymeleaf-extras-springsecurity5 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里注意一下 <code>thymeleaf</code> 和 <code>thymeleaf-extras-springsecurity</code> 的版本号问题</p><h3 id="认识SpringSecurity"><a href="#认识SpringSecurity" class="headerlink" title="认识SpringSecurity"></a>认识SpringSecurity</h3><ol><li>Spring Security 是针对Spring项目的安全框架，也是Spring Boot底层安全模块默认的技术选型，他可以实现强大的Web安全控制，对于安全控制，我们仅需要引入 spring-boot-starter-security 模块，进行少量的配置，即可实现强大的安全管理！</li><li>核心的几个类：<ul><li><code>WebSecurityConfigurerAdapter</code>自定义Security策略</li></ul></li></ol><ul><li><code>AuthenticationManagerBuilder</code>：自定义认证策略</li><li><code>@EnableWebSecurity</code>：开启WebSecurity模式 【<a href="https://github.com/Enablexxx">@Enablexxx</a>开启某个功能】</li></ul><ol><li><p>Spring Security的两个主要目标是 “认证” 和 “授权”（访问控制）。</p><p><strong>“认证”（Authentication）</strong></p><p>身份验证是关于验证您的凭据，如用户名/用户ID和密码，以验证您的身份。</p><p>身份验证通常通过用户名和密码完成，有时与身份验证因素结合使用。</p><p><strong>“授权” （Authorization）</strong></p><p>授权发生在系统成功验证您的身份后，最终会授予您访问资源（如信息，文件，数据库，资金，位置，几乎任何内容）的完全权限。</p><p>这个概念是通用的，而不是只在Spring Security 中存在。</p></li></ol><h3 id="编写-Spring-Security-配置类"><a href="#编写-Spring-Security-配置类" class="headerlink" title="编写 Spring Security 配置类"></a>编写 Spring Security 配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AOP 拦截器</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//首页所有人都可以访问 功能页只能有对应权限的人才能访问</span></span><br><span class="line"></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasRole(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level3/**&quot;</span>).hasRole(<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//没有权限会默认到登录界面 需要开启登录的页面</span></span><br><span class="line">        <span class="comment">// .loginPage(&quot;&quot;) 定制登录页 参数为跳转登录页的请求</span></span><br><span class="line">        http.formLogin().loginPage(<span class="string">&quot;/toLogin&quot;</span>).usernameParameter(<span class="string">&quot;username&quot;</span>).passwordParameter(<span class="string">&quot;password&quot;</span>).loginProcessingUrl(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭防攻击</span></span><br><span class="line">        http.csrf().disable();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注销 开启了注销功能 跳到首页</span></span><br><span class="line">        http.logout().logoutSuccessUrl(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启 &#x27;记住我&#x27; 功能 cookie 默认保存两周</span></span><br><span class="line">        http.rememberMe().rememberMeParameter(<span class="string">&quot;remmeber&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证 SpringBoot 2.1.x 可以直接使用</span></span><br><span class="line">    <span class="comment">//密码编码: PasswordEncoder</span></span><br><span class="line">    <span class="comment">//在 Spring Security 5.0+ 新增了很多加密方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//从数据库中认证</span></span><br><span class="line">        <span class="comment">//auth.jdbcAuthentication();</span></span><br><span class="line">        <span class="comment">//从内存中认证</span></span><br><span class="line">        <span class="comment">//这些数据正常应该在数据库读</span></span><br><span class="line">        auth.inMemoryAuthentication().passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder())</span><br><span class="line">                .withUser(<span class="string">&quot;Cu1&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip2&quot;</span>, <span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">&quot;root&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>, <span class="string">&quot;vip2&quot;</span>, <span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">&quot;guest&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>**下面将上面的代码拆分解释一下: **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecuritypublic</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span></span></span><br></pre></td></tr></table></figure><p><code>@EnableWebSecurity</code> 配合  继承 <code>WebSecurityConfigurerAdapter</code> 就可以达到开启 <code>Spring Security</code> 的自定义配置</p><p>部分自定义配置功能以重写 <code>WebSecurityConfigurerAdapter</code> 中的方法来实现</p><ol><li><p><code>protected void configure(HttpSecurity http) throws Exception</code> 用来配置用户访问 url 的权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//授权</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//首页所有人都可以访问 功能页只能有对应权限的人才能访问</span></span><br><span class="line">   </span><br><span class="line">       http.authorizeRequests()</span><br><span class="line">               .antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">               .antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasRole(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">               .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">               .antMatchers(<span class="string">&quot;/level3/**&quot;</span>).hasRole(<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line">   </span><br><span class="line">       <span class="comment">//没有权限会默认到登录界面 需要开启登录的页面</span></span><br><span class="line">       <span class="comment">// .loginPage(&quot;&quot;) 定制登录页 参数为跳转登录页的请求</span></span><br><span class="line">       http.formLogin().loginPage(<span class="string">&quot;/toLogin&quot;</span>).usernameParameter(<span class="string">&quot;username&quot;</span>).passwordParameter(<span class="string">&quot;password&quot;</span>).loginProcessingUrl(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">   </span><br><span class="line">       <span class="comment">//关闭防攻击</span></span><br><span class="line">       http.csrf().disable();</span><br><span class="line">   </span><br><span class="line">       <span class="comment">//注销 开启了注销功能 跳到首页</span></span><br><span class="line">       http.logout().logoutSuccessUrl(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">   </span><br><span class="line">       <span class="comment">//开启 &#x27;记住我&#x27; 功能 cookie 默认保存两周</span></span><br><span class="line">       http.rememberMe().rememberMeParameter(<span class="string">&quot;remmeber&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>关于 <code>loginProcessingUrl(&quot;/login&quot;) </code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.formLogin().loginPage(<span class="string">&quot;/toLogin&quot;</span>).usernameParameter(<span class="string">&quot;username&quot;</span>).passwordParameter(<span class="string">&quot;password&quot;</span>).loginProcessingUrl(<span class="string">&quot;/login&quot;</span>);</span><br></pre></td></tr></table></figure><p> <code>loginProcessingUrl(&quot;/login&quot;)</code>  表示登录页提交信息的时候是以 <code>“/login”</code> 的 <code>URL</code> 向 <code>Spring Security</code>   并由登录界面 <code>&lt;form th:action=&quot;@&#123;/login&#125;&quot; method=&quot;post&quot;&gt;</code> 以 之前设定好的 <strong>URL</strong> 向后台提交数据来由 <code>Spring Security</code> 实现的权限验证功能进行验证 但是在验证成功后有下面两种结果:</p><ul><li>通过主动点击登录 <strong>(指进入没有权限的页面导致跳转至登录界面)</strong> 进行登陆时, 点击登录并由后台验证通过后将自动回到 当前界面</li><li>进入没有权限的页面导致跳转至登录界面登录成功且权限符合当前页面的权限后会进入该页面</li></ul><p>写完发现好像登录成功后不论之前进入的是有没有权限的页面 都会自动回到进入之前的页面….</p><ol start="2"><li><p><code>protected void configure(AuthenticationManagerBuilder auth) throws Exception</code> 记录合法的登录信息 用来在后台进行匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//认证 SpringBoot 2.1.x 可以直接使用</span></span><br><span class="line">   <span class="comment">//密码编码: PasswordEncoder</span></span><br><span class="line">   <span class="comment">//在 Spring Security 5.0+ 新增了很多加密方法</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//从数据库中认证</span></span><br><span class="line">       <span class="comment">//auth.jdbcAuthentication();</span></span><br><span class="line">       <span class="comment">//从内存中认证</span></span><br><span class="line">       <span class="comment">//这些数据正常应该在数据库读</span></span><br><span class="line">       auth.inMemoryAuthentication().passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder())</span><br><span class="line">               .withUser(<span class="string">&quot;Cu1&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip2&quot;</span>, <span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">               .and()</span><br><span class="line">               .withUser(<span class="string">&quot;root&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>, <span class="string">&quot;vip2&quot;</span>, <span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">               .and()</span><br><span class="line">               .withUser(<span class="string">&quot;guest&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>现在有一个需求: 用户没有登录的时候, 导航栏上只显示登录按钮, 用户登录之后, 导航栏可以显示登录的用户信息及注销按钮. 以及下面的功能: 比如 <code>Cu1</code> 这个用户, 其只有 <code>vip2</code>,<code> vip3</code> 功能, 那么登录则只显示这两个功能, 而 <code>vip1</code> 的功能菜单不显示.</p><p>实现上面的需求需要结合 <code>thymeleaf</code> 中的一些功能</p><p><code>sec：authorize=”isAuthenticated()</code> :是否认证登录！来显示不同的页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui segment&quot;</span> <span class="attr">id</span>=<span class="string">&quot;index-header-nav&quot;</span> <span class="attr">th:fragment</span>=<span class="string">&quot;nav-menu&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui secondary menu&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>  <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index&#125;&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">           <span class="comment">&lt;!--登录注销--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right menu&quot;</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--如果未登录--&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--&lt;a class=&quot;item&quot; th:href=&quot;@&#123;/toLogin&#125;&quot;&gt;</span></span><br><span class="line"><span class="comment">                   &lt;i class=&quot;address card icon&quot;&gt;&lt;/i&gt; 登录</span></span><br><span class="line"><span class="comment">               &lt;/a&gt;--&gt;</span></span><br><span class="line">      </span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;!isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;sign-out icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 登录</span><br><span class="line">                   <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">               <span class="comment">&lt;!--如果注销 用户名和注销按钮--&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- &lt;a class=&quot;item&quot; th:href=&quot;@&#123;/logout&#125;&quot;&gt;</span></span><br><span class="line"><span class="comment">                   &lt;i class=&quot;sign-out icon&quot;&gt;&lt;/i&gt; 注销</span></span><br><span class="line"><span class="comment">               &lt;/a&gt;--&gt;</span></span><br><span class="line">      </span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                       用户名: <span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;sign-out icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 注销</span><br><span class="line">                   <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>sec:authentication=&quot;name&quot;</code> 获取登录时用户名</p><p>关于根据权限决定是否显示 这里只举一个例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--菜单根据用户的角色动态的实现--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip1&#x27;)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 1<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>            </span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>sec:authorize=&quot;hasRole(&#39;vip1&#39;)&quot;</code> 判断该用户是否有 <code>vip1</code> 的权限</p><p>==<strong>问题:</strong>==</p><p>​    如果现在依旧按照视频中的配置进行配置的话会发现 <code>thymeleaf</code> 提供的这个功能并没有生效</p><p>视频中选择的是降低版本 这种行为我不提倡. 其实出现这个问题的原因在于 <code>thymeleaf</code> 和 <code>thymeleaf-extras-springsecurity</code> 以及 <code>Spring Security</code> 的版本不兼容出现的问题</p><p>这里给出 <a href="https://github.com/thymeleaf/thymeleaf-extras-springsecurity">thymeleaf 官方文档</a> 和 <a href="https://segmentfault.com/a/1190000021529294">一篇文章</a> 可以去阅读一下 如果使用的是上面提供的 <code>pom.xml</code> 中的依赖应该是没有问题的</p></li></ol></li></ol><h2 id="8、Shrio"><a href="#8、Shrio" class="headerlink" title="8、Shrio"></a>8、Shrio</h2><p><a href="https://shiro.apache.org/">官方文档</a></p><h3 id="提前了解一些什么"><a href="#提前了解一些什么" class="headerlink" title="提前了解一些什么"></a>提前了解一些什么</h3><h4 id="了解-Shiro-的三大对象"><a href="#了解-Shiro-的三大对象" class="headerlink" title="了解 Shiro 的三大对象"></a>了解 <code>Shiro </code>的三大对象</h4><ul><li><p><code>Subject</code>：<strong>当前用户</strong>（与当前应用交互的任何东西）—所有 <code>Subject</code> 都绑定到 <code>SecurityManager</code>，与 <code>Subject</code> 的所有交互都会委托给 <code>SecurityManager</code>；可以把 <code>Subject</code>认为是一个门面；<code>SecurityManager</code> 才是实际的执行者；</p></li><li><p><code>SecurityManager</code> :  <strong>管理所有用户</strong>，负责与后边介绍的其他组件进行交互</p></li><li><p><code>Realm</code>: <strong>安全数据源用于认证和授权</strong>，<code>Shiro</code> 从 <code>Realm</code> 获取安全数据（如用户、角色、权限），就是说 <code>SecurityManager</code> 要验证用户身份，那么它需要从 Realm 获取相应的用户进行比较以确定用户身份是否合法；也需要从 <code>Realm</code> 得到用户相应的角色 / 权限进行验证.</p></li></ul><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/05/08/kuangstudya7f8c589-083f-4d74-9bb8-b02214c5048e.png" alt="img"></p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/03/23/kuangstudy7288ba59-90d0-4df9-af44-4834ebed5f21.jpg" alt="img"></p><p><strong>总结</strong>：Subject表示当前用户，Security Manager管理所有用户，负责用户与其他组件的交互（认证，授权，Session管理..），从Realm中获取数据.</p><h3 id="SpringBoot-整合-Shrio"><a href="#SpringBoot-整合-Shrio" class="headerlink" title="SpringBoot 整合 Shrio"></a>SpringBoot 整合 Shrio</h3><h4 id="导入-Shrio-的包"><a href="#导入-Shrio-的包" class="headerlink" title="导入 Shrio 的包"></a>导入 <code>Shrio</code> 的包</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-spring --&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置-Shrio-的配置类"><a href="#配置-Shrio-的配置类" class="headerlink" title="配置 Shrio 的配置类"></a>配置 <code>Shrio</code> 的配置类</h4><p> 由上面的前置芝士可以发现 要使用 <code>Shrio</code> 就必须要有 <code>Subject</code> , <code>SecurityManager</code>,  <code>Realm</code> 三层结构的配置所以在 <code>SpringBoot</code> 的配置包下需要有这些结构</p><p>由于 <code>Reaml</code> 层是没有默认实现的, 所以需要用户自己自定义的 所以需要用户自己去实现一个配置类</p><p>关于 <code>UserRealm</code> (用于了登录时的 <strong>认证</strong> 和 <strong>授权</strong>) 配置类的自定义实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义的 realm</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">继承了 AuthorizingRealm 就可以被 SpringBoot 认为是一个Realm 层的实现</span></span><br><span class="line"><span class="comment">而且必须要实现两个方法 </span></span><br><span class="line"><span class="comment">1.protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) 实现在用户进行登陆时给与用户相应的权限</span></span><br><span class="line"><span class="comment">        2.rotected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException  实现用户在提交登录表单后进行后台的验证验证用户的用户名密码是否正确</span></span><br><span class="line"><span class="comment">    具体某些认证授权方法在下面代码中有说明和解释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行授权</span></span><br><span class="line">        SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拿到当前登录的这个对象</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        User currentUser = (User) subject.getPrincipal(); <span class="comment">//拿到 user 对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置当前用户权限</span></span><br><span class="line">        info.addStringPermission(currentUser.getPerms());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line"></span><br><span class="line">        UsernamePasswordToken userToken = (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        <span class="comment">//密码认证, Shiro 来做</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//连接真实数据库</span></span><br><span class="line">        User user = userService.queryUserByName(userToken.getUsername());</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line">        Session session = currentUser.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;loginUser&quot;</span>, user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user, user.getPwd(),<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ShrioConfig</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">关于用户访问某个 url 时的拦截要求//</span><br><span class="line">添加 Shiro 的内置过滤器</span><br><span class="line">//添加 Shiro 的内置过滤器</span><br><span class="line">/*</span><br><span class="line">* anno 无需认证就可以访问</span><br><span class="line">* authc 必须认证了才能访问</span><br><span class="line">* user 必修拥有 记住我 功能才能使用</span><br><span class="line">* perms 拥有对某个资源的权限才能访问</span><br><span class="line">* role 拥有某个角色权限才能访问</span><br><span class="line">* */</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class ShiroConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    //ShiroFilterFactoryBean step 2</span><br><span class="line">    public ShiroFilterFactoryBean getShiroFilterFactoryBean(</span><br><span class="line">            @Qualifier(&quot;getDefaultWebSecurityManager&quot;) DefaultWebSecurityManager defaultWebSecurityManager) &#123;</span><br><span class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();</span><br><span class="line">        //设置安全管理器</span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        Map&lt;String, String&gt; filterMap = new LinkedHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        //拦截</span><br><span class="line">        /*filterMap.put(&quot;/user/add&quot;, &quot;authc&quot;);</span><br><span class="line">        filterMap.put(&quot;/user/update&quot;, &quot;authc&quot;);*/</span><br><span class="line"></span><br><span class="line">        //授权 正常情况下 没有授权会跳转到 未授权页面</span><br><span class="line">        filterMap.put(&quot;/user/add&quot;, &quot;perms[user:add]&quot;);</span><br><span class="line">        filterMap.put(&quot;/user/update&quot;, &quot;perms[user:update]   &quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line"></span><br><span class="line">        //设置返回登录页面的请求</span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(&quot;/toLogin&quot;);</span><br><span class="line"></span><br><span class="line">        //设置未授权页面</span><br><span class="line">        shiroFilterFactoryBean.setUnauthorizedUrl(&quot;/noauth&quot;);</span><br><span class="line"></span><br><span class="line">        return shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //DafaultWebSecurityManager step 2</span><br><span class="line">    @Bean(name = &quot;getDefaultWebSecurityManager&quot;)</span><br><span class="line">    public DefaultWebSecurityManager getDefaultWebSecurityManager(@Qualifier(&quot;userRealm&quot;) UserRealm userRealm) &#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();</span><br><span class="line">        //关联 UserRealm</span><br><span class="line">        securityManager.setRealm(userRealm);</span><br><span class="line">        return securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //创建 realm 对象 需要自定义 step 1</span><br><span class="line">    @Bean(name = &quot;userRealm&quot;)</span><br><span class="line">    public UserRealm userRealm() &#123; return new UserRealm(); &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    //整合 ShiroDialect : 用来整合 Shiro 和 thymeleaf</span><br><span class="line">    public ShiroDialect getShiroDialect() &#123;</span><br><span class="line">        return new ShiroDialect();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于 <code>SpringBoot</code> 为用户提供了默认实现的 <code>SecurityManager</code> 和 <code>ShiroFilterFactoryBean</code> ，所以不需要用户先提供自定义的类才能将其配置类放置进 <code>SpringBoot</code> 的容器中 PS( <code>@Bean(name=“xxx”) </code>表示可以不使用 <code>Spring</code> 容器提供的默认名称, 而是指定 <code>Spring</code> 容器中的对象名称为 <code>“xxx”</code>)</p><h3 id="Shrio-整合-MyBatis"><a href="#Shrio-整合-MyBatis" class="headerlink" title="Shrio 整合 MyBatis"></a>Shrio 整合 MyBatis</h3><h4 id="导入-MySQL-Druid-MyBatis-的-pom-依赖"><a href="#导入-MySQL-Druid-MyBatis-的-pom-依赖" class="headerlink" title="导入 MySQL  Druid, MyBatis 的 pom 依赖"></a>导入 <code>MySQL</code>  <code>Druid</code>, <code>MyBatis</code> 的 <code>pom</code> 依赖</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--druid 数据源--&gt;</span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.6&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!--链接 Mysql 驱动--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--mybatis 整合 mybatis-spring-boot-starter 非 SpringBoot 官方--&gt;</span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.2.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="配置-MyBatis-配置文件"><a href="#配置-MyBatis-配置文件" class="headerlink" title="配置 MyBatis 配置文件"></a>配置 <code>MyBatis</code> 配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> </span><br><span class="line">    <span class="attr">password:</span> </span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://47.100.227.175:3306/School?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="comment"># 配置 druid 数据源</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#Spring Boot</span></span><br><span class="line">    <span class="comment">#druid</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置 MyBatis</span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mybatis/mapper/*.xml</span></span><br></pre></td></tr></table></figure><p>**总结: ** 其实和之前整合数据库时没有什么区别</p><h3 id="Shrio-整合-thymeleaf"><a href="#Shrio-整合-thymeleaf" class="headerlink" title="Shrio 整合 thymeleaf"></a>Shrio 整合 thymeleaf</h3><h4 id="导入-pom-依赖"><a href="#导入-pom-依赖" class="headerlink" title="导入 pom 依赖"></a>导入 <code>pom</code> 依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--shiro-thymeleaf 整合--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.theborakompanioni/thymeleaf-extras-shiro --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="在-html-文件上加入命名空间"><a href="#在-html-文件上加入命名空间" class="headerlink" title="在 html 文件上加入命名空间"></a><strong>在 <code>html</code> 文件上加入命名空间</strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">&quot;http://www.thymeleaf.org/extras/spring-security&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:shiro</span>=<span class="string">&quot;http://www.pollix.at/thymeleaf/shiro&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Shrio-与-thymeleaf-在-html-中的使用"><a href="#Shrio-与-thymeleaf-在-html-中的使用" class="headerlink" title="Shrio 与 thymeleaf 在 html 中的使用"></a><code>Shrio</code> 与 <code>thymeleaf</code> 在 <code>html</code> 中的使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">&quot;http://www.thymeleaf.org/extras/spring-security&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:shiro</span>=<span class="string">&quot;http://www.pollix.at/thymeleaf/shiro&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:add&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/add&#125;&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:update&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/update&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;session.loginUser==null&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;logout&#125;&quot;</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Shrio-在-SpringBoot-中的使用"><a href="#Shrio-在-SpringBoot-中的使用" class="headerlink" title="Shrio 在 SpringBoot 中的使用"></a><code>Shrio</code> 在 <code>SpringBoot</code> 中的使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class MyController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&#123; &quot;/&quot;, &quot;/index&quot;&#125;)</span><br><span class="line">    public String toIndex(Model model) &#123;</span><br><span class="line">        model.addAttribute(&quot;msg&quot;, &quot;hello shiro&quot;);</span><br><span class="line">        return &quot;index&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/user/add&quot;)</span><br><span class="line">    public String add() &#123; return &quot;User/add&quot;; &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/user/update&quot;)</span><br><span class="line">    public String update() &#123;</span><br><span class="line">        return &quot;User/update&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/toLogin&quot;)</span><br><span class="line">    public String toLogin() &#123; return &quot;login&quot;; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/login&quot;)</span><br><span class="line">    public String login(String username,</span><br><span class="line">                        String  password, Model model) &#123;</span><br><span class="line">        //获取当前用户</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        //封装用户的登录数据</span><br><span class="line">        UsernamePasswordToken token = new UsernamePasswordToken(username, password);</span><br><span class="line">        try &#123;</span><br><span class="line">            subject.login(token); //执行登录的方法 如果没有异常就说明可以了</span><br><span class="line">            return &quot;redirect:/index&quot;;</span><br><span class="line">        &#125; catch (UnknownAccountException e) &#123; //用户名不存在</span><br><span class="line">            model.addAttribute(&quot;msg&quot;,&quot;用户名错误&quot;);</span><br><span class="line">            return &quot;login&quot;;</span><br><span class="line">        &#125; catch (IncorrectCredentialsException e) &#123; //密码不存在</span><br><span class="line">            model.addAttribute(&quot;msg&quot;, &quot;密码错误&quot;);</span><br><span class="line">            return &quot;login&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/noauth&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String unAuthorized() &#123;</span><br><span class="line">        return &quot;未经授权无法访问此页面&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //注销</span><br><span class="line">    @RequestMapping(&quot;/logout&quot;)</span><br><span class="line">    public String logout() &#123;</span><br><span class="line">        Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line">        currentUser.logout();</span><br><span class="line">        return &quot;redirect:/index&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩展："><a href="#扩展：" class="headerlink" title="扩展："></a>扩展：</h3><ul><li><p><a href="https://github.com/qualifier">@qualifier </a>注解消除依赖注入冲突（当 <code>SpringBoot</code> 注入了相同的 <code>Bean/Componet</code> ），可以指明我们要用哪个</p></li><li><p><a href="https://github.com/primary">@primary</a> 可以设置优先级</p></li><li><p><a href="https://shiro.apache.org/java-authorization-guide.html">https://shiro.apache.org/java-authorization-guide.html</a> 更多安全控制</p></li><li><p><code>thymeleaf</code> 整合 <code>shiro</code> 的标签</p><p><code>guest</code> 标签<br>　　<a href="shiro:guest">shiro:guest</a><br>　　</shiro:guest><br>　　用户没有身份验证时显示相应信息，即游客访问信息。</p><p><code>user</code> 标签<br>　　<a href="shiro:user">shiro:user</a>　　<br>　　</shiro:user><br>　　用户已经身份验证/记住我登录后显示相应的信息。</p><p><code>authenticated</code>标签<br>　　<a href="shiro:authenticated">shiro:authenticated</a>　　<br>　　</shiro:authenticated><br>　　用户已经身份验证通过，即 <code>Subject.login</code> 登录成功，不是记住我登录的。</p><p><code>notAuthenticated</code> 标签<br>　　<a href="shiro:notAuthenticated">shiro:notAuthenticated</a><br>　　<br>　　</shiro:notAuthenticated><br>　　用户已经身份验证通过，即没有调用 <code>Subject.login </code>进行登录，包括记住我自动登录的也属于未进行身份验证。</p><p><code>principal</code> 标签<br>　　<code>&lt;shiro: principal/&gt;</code><br><code>　　&lt;shiro:principal property=&quot;username&quot;/&gt;</code>　　</p><p>相当于 <code>((User)Subject.getPrincipals()).getUsername()</code> 。</p><p><code>lacksPermission</code> 标签<br>　　<code>&lt;shiro:lacksPermission name=&quot;org:create&quot;&gt;</code><br>　<br>　　</shiro:lacksPermission><br>　　如果当前 <code>Subject </code>没有权限将显示 <code>body</code> 体内容。</p><p><code>hasRole</code> 标签<br>　　<code>&lt;shiro:hasRole name=&quot;admin&quot;&gt;　　</code><br>　　</shiro:hasRole><br>　　如果当前 <code>Subject</code> 有角色将显示 <code>body</code> 体内容。</p><p><code>hasAnyRoles</code> 标签<br>　　<code>&lt;shiro:hasAnyRoles name=&quot;admin,user&quot;&gt;</code><br>　　　<br>　　</shiro:hasAnyRoles><br>　　如果当前 <code>Subject </code>有任意一个角色（或的关系）将显示 <code>body</code> 体内容。</p><p><code>lacksRole</code> 标签<br>　　<code>&lt;shiro:lacksRole name=&quot;abc&quot;&gt;</code>　　<br>　　</shiro:lacksRole><br>　　如果当前 <code>Subject </code>没有角色将显示 <code>body </code>体内容。</p><p><code>hasPermission </code>标签<br>　　<code>&lt;shiro:hasPermission name=&quot;user:create&quot;&gt;</code>　　<br>　　</shiro:hasPermission><br>　　如果当前 <code>Subject </code>有权限将显示 <code>body</code> 体内容</p><p>验证当前用户是否拥有指定权限<br><a shiro:hasPermission="user:add" href="">添加</a></p></li></ul><h2 id="9、Swagger"><a href="#9、Swagger" class="headerlink" title="9、Swagger"></a>9、Swagger</h2><h4 id="Swagger简介"><a href="#Swagger简介" class="headerlink" title="Swagger简介"></a>Swagger简介</h4><blockquote><p>前后端分离时代</p></blockquote><p>前端：控制层和视图层<br>后端：控制层，数据访问层，服务层</p><p><strong>特点：</strong><br>前端调用 &gt;— 后端的API接口<br>即：松耦合</p><p><strong>产生的问题：</strong><br>前端和后端工作人员之间的交互问题（武器的变多）</p><p><strong>解决</strong><br>Swagger的诞生！</p><h4 id="Swagger是什么？"><a href="#Swagger是什么？" class="headerlink" title="Swagger是什么？"></a>Swagger是什么？</h4><ul><li>号称世界上最流行的API框架</li><li>Restful Api 文档在线自动生成器 =&gt; API 文档 与API 定义同步更新</li><li>直接运行，在线测试API</li><li>支持多种语言 （如：Java，PHP等）</li><li>官网：<a href="https://swagger.io/">https://swagger.io/</a></li></ul><h4 id="SpringBoot-整合-Swagger"><a href="#SpringBoot-整合-Swagger" class="headerlink" title="SpringBoot 整合 Swagger"></a><code>SpringBoot</code> 整合 <code>Swagger</code></h4><h5 id="导入-pom-依赖-1"><a href="#导入-pom-依赖-1" class="headerlink" title="导入 pom 依赖"></a>导入 pom 依赖</h5><h4 id="编写-Swagger-配置类"><a href="#编写-Swagger-配置类" class="headerlink" title="编写 Swagger 配置类"></a>编写 <code>Swagger</code> 配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//开启 swagger2</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置 Swagger 的 docket 的 bean 实例</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span></span>&#123;</span><br><span class="line">        <span class="comment">//设置要显示 Swagger 环境</span></span><br><span class="line">        Profiles profiles = Profiles.of(<span class="string">&quot;dev&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="comment">//获取项目环境:</span></span><br><span class="line">        <span class="comment">//通过 environment.acceptsProfiles(profiles) 判断是否处在自己设定的环境之中</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = environment.acceptsProfiles(profiles);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .groupName(<span class="string">&quot;cu1&quot;</span>)</span><br><span class="line">                <span class="comment">//enalbe 是否启用 Swagger 如果为 False 则 Swagger 不能在浏览器中访问</span></span><br><span class="line">                .enable(flag)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * basePackage() 配置要扫描接口的方式 basePackage() 基于某个包扫描</span></span><br><span class="line"><span class="comment">                * any() 扫描全部</span></span><br><span class="line"><span class="comment">                * none() 都不扫描</span></span><br><span class="line"><span class="comment">                * 表示只会扫描类上有 @RestController 注解的接口</span></span><br><span class="line"><span class="comment">                * withClassAnnotation(RestController.class) 扫描类上的注解 参数是一个注解的反射对象</span></span><br><span class="line"><span class="comment">                * withMethodAnnotation(GetMapping.class) 扫描方法上的注解</span></span><br><span class="line"><span class="comment">                * */</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.cu1.swagger.Controller&quot;</span>))</span><br><span class="line">                <span class="comment">//过滤路径 表示不扫描 某个路径下的所有文件</span></span><br><span class="line">                <span class="comment">//.paths(PathSelectors.ant(&quot;/cu1/**&quot;))</span></span><br><span class="line">                .build(); <span class="comment">//工厂模式</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置 Swagger 信息</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//作者信息</span></span><br><span class="line">        Contact contact = <span class="keyword">new</span> Contact(<span class="string">&quot;Cu1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;https://blog.csdn.net/CUCUC1?spm=1000.2115.3001.5343&quot;</span>,</span><br><span class="line">                <span class="string">&quot;cu1universe@gmail.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfo(<span class="string">&quot;Cu1&#x27;s SwaggerAPI document&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Wuhu Qifei&quot;</span>,</span><br><span class="line">                <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;https://blog.csdn.net/CUCUC1?spm=1000.2115.3001.5343&quot;</span>,</span><br><span class="line">                contact,</span><br><span class="line">                <span class="string">&quot;Apache 2.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> ArrayList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//只要接口中返回值中存在实体类 它就会被扫描</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Operation 接口 不是放在类上 是放在方法上 给接口方法提供注释</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;Hello 控&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello2&quot;)</span></span><br><span class="line">    <span class="comment">//@ApiParam(&quot;用户名&quot;) 给接口参数加注释</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@ApiParam(&quot;用户名&quot;)</span> String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span> + username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;post 测试&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/postt&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">postt</span><span class="params">(<span class="meta">@ApiParam(&quot;用户名&quot;)</span> User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><p>Swagger的所有注解定义在io.swagger.annotations包下</p><p>下面列一些经常用到的，未列举出来的可以另行查阅说明：</p><table><thead><tr><th>Swagger注解</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://github.com/ApiModel">@ApiModel</a>（”说明这是什么类”）</td><td>用于pojo下的实体类</td></tr><tr><td><a href="https://github.com/ApiModelProperty">@ApiModelProperty</a>(value=”属性说明”,hidden=ture)</td><td>用于实体类下的属性，hidden为true表示可以隐藏</td></tr><tr><td><a href="https://github.com/Api">@Api</a>(“模块说明”)</td><td>用于controller层继续模块说明</td></tr><tr><td><a href="https://github.com/ApiOperation">@ApiOperation</a>（”方法说明”）</td><td>用于controller层下的方法</td></tr><tr><td><a href="https://github.com/ApiParm">@ApiParm</a>(“参数说明”)</td><td>用于controller层下的方法参数</td></tr></tbody></table><h4 id="希望-Swagger-在生产环境中使用-在发布后不能使用"><a href="#希望-Swagger-在生产环境中使用-在发布后不能使用" class="headerlink" title="希望 Swagger 在生产环境中使用 在发布后不能使用"></a>希望 <code>Swagger</code> 在生产环境中使用 在发布后不能使用</h4><ul><li>判断是不是生产环境 <code>flag = false</code></li><li>注入 <code>enable(flag)</code></li></ul><h4 id="配置-API-文档分组"><a href="#配置-API-文档分组" class="headerlink" title="配置 API 文档分组"></a>配置 <code>API</code> 文档分组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.groupName(<span class="string">&quot;cu1&quot;</span>)</span><br></pre></td></tr></table></figure><p>配置多个 <code>API</code> 文档 向 <code>Spring</code> 容器中配置多个 <code>Docket</code> 实例即可</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结:"></a><strong>总结:</strong></h4><ol><li><p>可以通过 <code>Swagger</code> 给一些比较难理解的属性或者接口, 增加注释信息</p></li><li><p>接口文档实时更新</p></li><li><p>可以在线测试</p></li></ol><h4 id="注意点-在正式发布时-关闭-Swagger-出于安全考虑-而且节省内存空间"><a href="#注意点-在正式发布时-关闭-Swagger-出于安全考虑-而且节省内存空间" class="headerlink" title="注意点 : 在正式发布时 关闭 Swagger 出于安全考虑 而且节省内存空间"></a><strong>注意点</strong> : 在正式发布时 关闭 <code>Swagger</code> 出于安全考虑 而且节省内存空间</h4><h4 id="扩展：皮肤！！"><a href="#扩展：皮肤！！" class="headerlink" title="扩展：皮肤！！"></a>扩展：皮肤！！</h4><p>我们可以导入不同的包实现不同的皮肤定义：</p><ol><li>默认的 访问 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入swagger-ui-layer包 /docs.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.caspar-chen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-ui-layer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>bootstrap-ui 访问 <a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入swagger-ui-layer包 /document.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zyplayer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-mg-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>Layui-ui 访问 <a href="http://localhost:8080/docs.html">http://localhost:8080/docs.html</a></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入swagger-ui-layer包 /docs.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.caspar-chen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-ui-layer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>mg-ui 访问 <a href="http://localhost:8080/document.html">http://localhost:8080/document.html</a></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入swagger-ui-layer包 /document.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zyplayer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-mg-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="10、关于异步任务"><a href="#10、关于异步任务" class="headerlink" title="10、关于异步任务"></a>10、关于异步任务</h2><p><strong>请浏览</strong> <a href="https://www.jianshu.com/p/20a4e37314fc">https://www.jianshu.com/p/20a4e37314fc</a></p><h4 id="邮件发送"><a href="#邮件发送" class="headerlink" title="邮件发送"></a>邮件发送</h4><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="C:\Users\雷神\AppData\Roaming\Typora\typora-user-images\image-20211109164724576.png" alt="image-20211109164724576"></p><p><strong>开启第一个</strong></p><p><strong>导入 pom 依赖</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--javax.mail: 配置--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>调用 SpringBoot 的接口即可</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">JavaMailSenderImpl mailSender;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//一个简单的邮件</span></span><br><span class="line">    SimpleMailMessage simpleMailMessage = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">    simpleMailMessage.setSubject(<span class="string">&quot;Cu1 Hello&quot;</span>);</span><br><span class="line">    simpleMailMessage.setText(<span class="string">&quot;芜湖起飞&quot;</span>);</span><br><span class="line">    simpleMailMessage.setTo(<span class="string">&quot;1178079301@qq.com&quot;</span>);</span><br><span class="line">    simpleMailMessage.setFrom(<span class="string">&quot;1178079301@qq.com&quot;</span>);</span><br><span class="line">    mailSender.send(simpleMailMessage);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads1</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">    <span class="comment">//一个复杂的邮件</span></span><br><span class="line">    MimeMessage message = mailSender.createMimeMessage();</span><br><span class="line">    <span class="comment">//组装 利用 Helper 去组装 message 是否支持多文本上传 第二个参数</span></span><br><span class="line">    MimeMessageHelper mimeMessageHelper = <span class="keyword">new</span> MimeMessageHelper(message, <span class="keyword">true</span>, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    mimeMessageHelper.setSubject(<span class="string">&quot;Cu1 hello - plus&quot;</span>);</span><br><span class="line">    <span class="comment">//第二参数为是否将消息解析为 html</span></span><br><span class="line">    mimeMessageHelper.setText(<span class="string">&quot;&lt;p style=&#x27;color: red&#x27;&gt;芜湖起飞&lt;/p&gt;&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//添加附件</span></span><br><span class="line">    <span class="comment">//mimeMessageHelper.addAttachment(&quot;1.jpg&quot;, new File());</span></span><br><span class="line">    mimeMessageHelper.setTo(<span class="string">&quot;1178079301@qq.com&quot;</span>);</span><br><span class="line">    mimeMessageHelper.setFrom(<span class="string">&quot;1178079301@qq.com&quot;</span>);</span><br><span class="line">    mailSender.send(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TaskScheduler 任务调度者</span><br><span class="line">TaskExecutor 任务执行者</span><br><span class="line">//开启定时功能的注解</span><br><span class="line">@EnableScheduling</span><br><span class="line">@Scheduled</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Cron 表达式</span></span><br><span class="line">    <span class="comment">// 秒 分 时 日 月 周几 (表示 22H 13Min 0S 执行)</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 13 22 * * ?&quot;)</span></span><br><span class="line">    <span class="comment">//在特定的时间执行这个方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello 你被执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11、SpringBoot-整合-Redis"><a href="#11、SpringBoot-整合-Redis" class="headerlink" title="11、SpringBoot 整合 Redis"></a>11、SpringBoot 整合 Redis</h2><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(</span></span><br><span class="line"><span class="meta">    name = &#123;&quot;redisTemplate //可以自定义一共 redisTemplate 来替换默认的</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@ConditionalOnSingleCandidate(RedisConnectionFactory.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line"> <span class="comment">//默认的 RedisTemplate 没有过多设置 redis 对象都需要序列化</span></span><br><span class="line">    <span class="comment">//两个泛型都是 Object Object 的类型 在后面使用中通常需要强制转换为 &lt;String, Object&gt;</span></span><br><span class="line">    RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate();</span><br><span class="line">    template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">    <span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span> <span class="comment">//由于 String 是 redis 中最常用的类型 所以说单独提出来一个 Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnSingleCandidate(RedisConnectionFactory.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">    StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate();</span><br><span class="line">    template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">    <span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="整合测试-1"><a href="#整合测试-1" class="headerlink" title="整合测试"></a>整合测试</h4><p>1、导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--操作 redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、配置连接</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#自动配置类都会绑定一个 properties 配置文件 RedisProperties</span></span><br><span class="line"><span class="comment">#配置 redis</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br></pre></td></tr></table></figure><p>3、测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Redis02SpringBootApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * RedisTemplate 操作不同的数据类型 api 和 指令是一样的</span></span><br><span class="line"><span class="comment">        * .opsForValue() 操作字符串 类似 String</span></span><br><span class="line"><span class="comment">        * .opsForList() 操作 List</span></span><br><span class="line"><span class="comment">        * .opsForSet() 操作 Set</span></span><br><span class="line"><span class="comment">        * .opsForHash()</span></span><br><span class="line"><span class="comment">        * .opsForZSet() ...</span></span><br><span class="line"><span class="comment">        * .opsForGeo()</span></span><br><span class="line"><span class="comment">        * 除了基本操作 常用的方法都可以通过 RedisTemplate 操作 比如事务和基本的 CRUD</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="comment">//获取 redis 的连接对象</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span></span><br><span class="line"><span class="comment">            connection.flushDb();</span></span><br><span class="line"><span class="comment">            connection.flushAll();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;myKey&quot;</span>, <span class="string">&quot;Cu1&quot;</span>);</span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;mykey&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RedisTemplate-序列化配置"><a href="#RedisTemplate-序列化配置" class="headerlink" title="RedisTemplate 序列化配置"></a>RedisTemplate 序列化配置</h4><p>默认是使用 <code>JDK</code> 的序列化方式 但是可能需要使用 <code>json</code> 进行序列化 这时就需要自定义配置类</p><p>==<strong>关于对象的保存 如果没有序列化则会报错</strong>== 在企业中 所有的 <code>pojo</code> 类都会序列化</p><h4 id="自定义-Qualifier"><a href="#自定义-Qualifier" class="headerlink" title="自定义 @Qualifier()"></a>自定义 @Qualifier()</h4><p><strong>编写一个自定义的 RedisTemplate</strong> 如果出现多个 <code>RedisTemplate</code> 可以使用 <code>@Qualifier()</code> 来指定自定义的 <code>@Qualifier()</code></p><p>在企业开发中 有 <code>80%</code> 的情况下都不会使用原生的方式去编写代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//固定模板 在企业中直接使用</span></span><br><span class="line">    <span class="comment">//编写自己的 RedisTemplate</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//为方便开发 一般直接使用 &lt;String, Object&gt;</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">//创建一个序列化方式的对象 序列化配置</span></span><br><span class="line">        <span class="comment">//Json 序列化</span></span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; objectJackson2JsonRedisSerializer</span><br><span class="line">                = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;Object&gt;(Object.class);</span><br><span class="line"></span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        objectJackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String 的序列化</span></span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        <span class="comment">//key 采用 String 的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//hash 的 key 也采用 String 的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Value 序列化方式采用 Jackson</span></span><br><span class="line">        template.setValueSerializer(objectJackson2JsonRedisSerializer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置具体的序列化方式</span></span><br><span class="line">        template.setKeySerializer(objectJackson2JsonRedisSerializer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//hash 的 value 序列化方式采用 jackson</span></span><br><span class="line">        template.setHashValueSerializer(objectJackson2JsonRedisSerializer);</span><br><span class="line"></span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>RedisUtil 类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @ClassName RedisClient</span></span><br><span class="line"><span class="comment">     * @Desc TODO   设置缓存（没有时间限制）</span></span><br><span class="line"><span class="comment">     * @Date 2021-07-24 16:11</span></span><br><span class="line"><span class="comment">     * @Version 1.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @ClassName RedisClient</span></span><br><span class="line"><span class="comment">     * @Desc TODO   设置缓存（有时间限制，单位为 秒）</span></span><br><span class="line"><span class="comment">     * @Date 2021-07-24 16:11</span></span><br><span class="line"><span class="comment">     * @Version 1.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, Object value, <span class="keyword">long</span> timeout)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, timeout, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @ClassName RedisClient</span></span><br><span class="line"><span class="comment">     * @Desc TODO   删除缓存，并返回是否删除成功</span></span><br><span class="line"><span class="comment">     * @Date 2021-07-24 16:11</span></span><br><span class="line"><span class="comment">     * @Version 1.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        redisTemplate.delete(key);</span><br><span class="line">        <span class="comment">// 如果还存在这个 key 就证明删除失败</span></span><br><span class="line">        <span class="keyword">if</span> (redisTemplate.hasKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="comment">// 不存在就证明删除成功</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @ClassName RedisClient</span></span><br><span class="line"><span class="comment">     * @Desc TODO   取出缓存</span></span><br><span class="line"><span class="comment">     * @Date 2021-07-24 16:12</span></span><br><span class="line"><span class="comment">     * @Version 1.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (redisTemplate.hasKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForValue().get(key);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @ClassName RedisClient</span></span><br><span class="line"><span class="comment">     * @Desc TODO   获取失效时间（-2：失效 / -1：没有时间限制）</span></span><br><span class="line"><span class="comment">     * @Date 2021-07-24 16:15</span></span><br><span class="line"><span class="comment">     * @Version 1.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getExpire</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (redisTemplate.hasKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.getExpire(key);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Long.parseLong(-<span class="number">2</span> + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot, java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>叠字</title>
      <link href="/%E7%94%9F%E6%B4%BB/%E6%9C%89%E8%B6%A3%E6%9D%82/2022-05-07-%E5%8F%A0%E5%AD%97/"/>
      <url>/%E7%94%9F%E6%B4%BB/%E6%9C%89%E8%B6%A3%E6%9D%82/2022-05-07-%E5%8F%A0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h1 id="叠字"><a href="#叠字" class="headerlink" title="叠字"></a>叠字</h1><ul><li>三个金念<strong>鑫</strong>（xīn）</li><li>三个水念<strong>淼</strong>（miǎo）</li><li> 三个火念<strong>焱</strong>（yàn） </li><li>三个土念<strong>垚</strong>（yáo）</li><li> 三个牛念<strong>犇</strong>（bēn） </li><li>三个手念<strong>掱</strong>（pá） </li><li>三个目念<strong>瞐</strong>（mò） </li><li>三个田念<strong>畾</strong>（lěi） </li><li>三个马念<strong>骉</strong>（biāo） </li><li>三个羊念<strong>羴</strong>（shān） </li><li>三个犬念<strong>猋</strong>（biāo） </li><li>三个鹿念<strong>麤</strong>（cū）</li><li>三个鱼念<strong>鱻</strong>（xiān） </li><li>三个贝念<strong>赑</strong>（bì）</li><li> 三个力念<strong>劦</strong>（lie）</li><li> 三个毛念<strong>毳</strong>（cuì） </li><li>三个耳念<strong>聶</strong>（niè） </li><li>三个车念<strong>轟</strong>（hōng） </li><li>三个直念<strong>矗</strong>（chù） </li><li>三个龙念<strong>龘</strong>（tà、dá） </li><li>三个原念<strong>厵</strong>（yuán） </li><li>三个雷念<strong>靐</strong>（bìng） </li><li>三个飞念<strong>飝</strong>（fēi） </li><li>三个刀念<strong>刕</strong>（lí） </li><li>三个又念<strong>叒</strong>（ruò） </li><li>三个士念<strong>壵</strong>（zhuàng） </li><li>三个小念<strong>尛</strong>（mó） </li><li>三个子念<strong>孨</strong>（zhuǎn） </li><li>三个止念<strong>歮</strong>（sè）</li><li> 三个风念<strong>飍</strong>（xiū） </li><li>三个隼念<strong>雥</strong>（zá） </li><li>三个吉念<strong>嚞</strong>（zhé）</li><li> 三个言念<strong>譶</strong>（tà） </li><li>三个舌念<strong>舙</strong>（qì）</li><li>三个香念<strong>馫</strong>（xīn） </li><li>三个泉念<strong>灥</strong>（xún）</li><li> 三个心念<strong>惢</strong>（suǒ）</li><li> 三个白念<strong>皛</strong>（xiǎo）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 有趣杂 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 有趣 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TinySTL 文档 1.0</title>
      <link href="/STL-%E6%BA%90%E7%A0%81/TinySTL/TinySTL%E6%96%87%E6%A1%A31.0/"/>
      <url>/STL-%E6%BA%90%E7%A0%81/TinySTL/TinySTL%E6%96%87%E6%A1%A31.0/</url>
      
        <content type="html"><![CDATA[<h1 id="TinySTL"><a href="#TinySTL" class="headerlink" title="TinySTL"></a>TinySTL</h1><h2 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h2><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><p><strong>模板参数:</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tmplate &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">vector</span></span></span><br><span class="line"><span class="class">&#123;</span> ... &#125;;</span><br></pre></td></tr></table></figure><p>​    <strong>T:</strong> 数据类型</p><h4 id="内部类型表示"><a href="#内部类型表示" class="headerlink" title="内部类型表示:"></a>内部类型表示:</h4><ul><li><code>typedef mystl::allocator&lt;T&gt; allocator_type;</code> 分配器类型</li><li><code>typedef mystl::allocator&lt;T&gt;  data_allocator;</code> 分配数据内存类型</li><li><code>typedef typename allocator_type::value_type value_type;</code> 内部数据类型</li><li><code>typedef typename allocator_type::pointer pointer;</code> 内部指针类型, 下面的引用类似</li><li><code>typedef typename allocator_type::const_pointer const_pointer;</code></li><li><code>typedef typename allocator_type::reference reference;</code></li><li><code>typedef typename allocator_type::const_reference const_reference;</code></li><li><code>typedef typename allocator_type::size_type size_type;</code> 容量类型</li><li><code>typedef typename allocator_type::difference_type difference_type;</code> 两个<strong>迭代器</strong>之间的距离</li><li><code>typedef value_type*  iterator;</code> 迭代器类型</li><li><code>typedef const value_type* const_iterator;</code></li><li><code>typedef mystl::reverse_iterator&lt;iterator&gt; reverse_iterator;</code>  反向迭代器</li><li><code>typedef mystl::reverse_iterator&lt;const_iterator&gt; const_reverse_iterator;</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">T* start; <span class="comment">// vector 的第一个元素的位置</span></span><br><span class="line">T* finish; <span class="comment">// vecotr 的最后一个元素的下一个位置</span></span><br><span class="line">T* end_of_storage; <span class="comment">//vector 容量的最后一个位置的下一个位置</span></span><br></pre></td></tr></table></figure><p><strong>方法关系图:</strong></p><p>[<img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://s1.ax1x.com/2022/05/07/OlZhGV.png" alt="OlZhGV.png"></p><h4 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h4><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_aux</span><span class="params">(iterator position, <span class="keyword">const</span> T&amp; value)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>position: 插入的位置</li><li>value: 插入的值</li></ul><p><strong>内部调用:</strong></p><ul><li><code>clear()</code></li></ul><p>对插入的数据进行内部调整, 如果剩余容量可以插入, 就直接插入, 反之则重新进行空间分配后再插入元素</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;class ...Args&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_aux</span><span class="params">(iterator position, Args&amp;&amp; ...args)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>模板参数:</strong></p><ul><li>…Args:  要传入的数据列表</li></ul><p><strong>方法参数:</strong></p><ul><li>position: 要插入的位置</li><li>args: 传入的参数列表的右值引用</li></ul><p>对插入的数据进行内部调整, 如果剩余容量可以插入, 就直接插入, 反之则重新进行空间分配后再插入元素, 且元素为右值, 用于插入右值时使用</p><p><strong>内部调用:</strong></p><ul><li><code>clear()</code></li></ul></li></ul><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deallocate</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>释放 <code>vector</code> 管理的内存</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fill_initialize</span><span class="params">(size_type n, <span class="keyword">const</span> T&amp; value)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p>n:  给 <code>vector</code> 初始化的大小</p></li><li><p>value: <code>vector</code> 中元素的初始值</p></li></ul></li></ul><p><strong>内部调用:</strong> </p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">space_initialize</span><span class="params">(size_type size, size_type cap)</span></span></span><br></pre></td></tr></table></figure>将 <code>vector</code> 的空间初始化为 <code>n</code>,  且所有元素的值都是 <code>value</code></li></ul><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Iter</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">range_initialize</span><span class="params">(Iter first, Iter last)</span></span>;</span><br></pre></td></tr></table></figure><strong>模板参数:</strong> <ul><li>Iter: 需要一个迭代器</li></ul><strong>方法参数:</strong><ul><li>first: 区间起始位置</li><li>last: 区间最后位置的下一个位置</li></ul><strong>内部调用:</strong></li><li>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">space_initialize</span><span class="params">(size_type size, size_type cap)</span></span></span><br></pre></td></tr></table></figure>接受两个迭代器并将 $[first, last)$ 中的内容作为 <code>vector</code> 的初始内容, 此时 vector 的大小为 <code>distance(first, last)</code></li></ul><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">try_init</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>给 <code>vector</code>  分配默认大小, 当前设置默认大小为 16, 且内部没有元素</p><p>保证不抛出异常</p></li></ul><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">space_initialize</span><span class="params">(size_type size, size_type cap)</span></span></span><br></pre></td></tr></table></figure><ul><li>size: 要给 <code>vector</code> 初始化的大小</li><li>cap: 给 <code>vector</code> 初始化时设置的最大容量</li></ul><p>使 <code>vector</code> 留出 size 大小, 同时容量为 cap</p></li></ul><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><ul><li><p><strong>默认构造:</strong> <code>vector()</code> 内部调用 <code>try_init()</code> 来为 <code>vector</code> 分配初始大小</p></li><li><p><strong>有参构造 1:</strong> <code> explicit vector(size_type n)</code>  </p><ul><li><p>n :  <code>vector</code> 的大小, 容器内的元素都将初始化为 <code> value_type</code> 的默认值**(有构造函数则调用 T 的默认构造)**</p></li><li><p>explicit: 防止出现隐式转换为 <code>vector</code></p></li></ul></li><li><p><strong>有参构造 2:</strong><code>vector(size_type n, const T&amp; value)</code> </p><ul><li><p>n: 同 1</p></li><li><p>value: <code>vector</code> 中元素的初始值</p></li></ul><p><strong>内部调用:</strong></p><p>​     <code>fill_initialize(n, value)</code> </p></li><li><p><strong>有参构造 3:</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Iter</span>, <span class="title">typename</span> <span class="title">std</span>:</span>:enable_if&lt;</span><br><span class="line">        mystl::is_input_iterator&lt;Iter&gt;::value, <span class="keyword">int</span>&gt;::type = <span class="number">0</span>&gt;</span><br><span class="line"><span class="built_in">vector</span>(Iter first, Iter last)</span><br></pre></td></tr></table></figure><p><strong>模板参数:</strong> </p><ul><li><p>Iter: 接收的迭代器类型</p></li><li><p>第二个模板参数则是进行判断是否为 <code>input_iterator</code> , 若不是则该方法失效</p></li></ul><p><strong>方法参数:</strong></p><ul><li><p>first: 区间起始位置的迭代器</p></li><li><p>last: 为区间结束位置的下一位置迭代器, 且该位置为开区间</p></li></ul><p><strong>内部调用:</strong></p><p>​    <code>range_initialize(first, last)</code></p></li><li><p><strong>初始化列表构造函数:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>(std::initializer_list&lt;T&gt; ilist) &#123; ... &#125;</span><br></pre></td></tr></table></figure><ul><li>ilist: 初始化列表</li></ul><p><strong>内部调用:</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Iter</span>&gt;</span>    </span><br><span class="line"><span class="built_in">range_initialize</span>(Iter first, Iter last)</span><br></pre></td></tr></table></figure></li></ul><h4 id="复制构造函数"><a href="#复制构造函数" class="headerlink" title="复制构造函数:"></a>复制构造函数:</h4><ol><li><p><code> vector(const vector&lt;T&gt;&amp; other)</code></p><ul><li>other:  要复制的  <code>vecotr&lt;T&gt;</code> 对象引用</li></ul><p><strong>内部调用:</strong>  <code>range_initialize(other.begin(), other.end())</code></p></li><li></li></ol>   <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>(vector&lt;T&gt;&amp;&amp; other)</span><br><span class="line">    :<span class="built_in">start</span>(other.start),</span><br><span class="line">     <span class="built_in">finish</span>(other.finish),</span><br><span class="line">     <span class="built_in">end_of_storage</span>(other.end_of_storage) &#123; ... &#125;</span><br></pre></td></tr></table></figure><ul><li>other: 要复制的 <code>vector</code> 的右值引用</li></ul><p>   <strong>保证不抛出异常</strong></p><h4 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~<span class="built_in">vector</span>()</span><br></pre></td></tr></table></figure><p>将 vector 内部元素全部析构, 再将 vector 内部空间释放</p><p><strong>内部调用:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">deallocate</span>()</span><br></pre></td></tr></table></figure><h4 id="获取容器信息"><a href="#获取容器信息" class="headerlink" title="获取容器信息:"></a>获取容器信息:</h4><ul><li><code>iterator begin() noexcept</code></li></ul><p>​       获取容器第一个元素位置, 并返回迭代器, 保证不抛出异常</p><ul><li><p><code>const_iterator begin() const noexcept</code></p><p>返回常量迭代器, 当 vector 对象是 const 时会被调用, 其他同上</p></li><li><p><code>iterator end() noexcept</code></p><p>返回 <code>vector</code> 最后一个元素的后一个位置</p></li><li><p><code>const_iterator end() const noexcept</code></p><p>参考 <code>begin()</code></p></li><li><p><code>reverse_iterator rbegin() noexcept</code></p><p>返回一个反向迭代器, 其本质指向 <code>vector</code> 的 <code>end()</code> 保证不抛出异常</p></li><li><p><code>const_reverse_iterator  rbegin()    const noexcept</code></p><p>参考 <code>begin()</code></p></li><li><p><code>reverse_iterator rend() noexcept</code></p><p>返回一个反向迭代器, 指本质向 <code>vector</code> 的 <code>begin()</code> 保证不抛出异常</p></li><li><p><code>const_reverse_iterator rend() const noexcept</code></p><p>参考 <code>begin()</code></p></li><li><p><code>const_iterator cbegin() const noexcept</code></p><p>返回 <code>vector</code> 首部位置的迭代器, 且其是一个常量, 保证不抛出异常 </p></li><li><p><code>const_iterator cend() const noexcept</code></p><p>参考 <code>cbegin()</code></p></li><li><p><code>const_reverse_iterator  crbegin()   const noexcept</code></p><p>参考 <code>cbegin()</code></p></li><li><p><code>const_reverse_iterator  crend()     const noexcept</code></p><p>参考 <code>cbegin()</code></p></li><li><p><code>bool empty() const noexcept</code></p><p>判断 <code>vector</code> 是否为空, 根据 <code>start</code> 是否和 <code>finish</code> 指向同一位置来判断 <code>vector</code> 是否为空. 保证不抛出异常</p></li><li><p><code>size_type size()     const noexcept</code></p><p>返回 <code>vector</code> 中元素个数. 保证不抛出异常</p></li><li><p><code>size_type max_size() const noexcept</code></p><p><code>vector</code>  可纳最大元素个数. 保证不抛出异常</p></li><li><p><code>size_type capacity() const noexcept</code></p><p>返回 <code>vector</code> 容量. 保证不抛出异常</p></li><li><p><code>void reserve(size_type n);</code></p><ul><li>n: 要求重新分配的大小</li></ul><p><strong>内部调用:</strong></p><ul><li><code>clear()</code></li></ul><p>重新分配 vector 容量, 且只有原容量小于要求大小时才会重新分配</p></li><li><p><code>reference at(size_type n)</code></p><ul><li>n: 要获取的下标位置</li></ul><p>获取指定下标处元素, 当指定下标超出有效范围后会抛出异常</p></li><li><p><code>const_reference at(size_type n) const</code></p><p>效果同上, 返回的是常量引用, 作为 <code>const vector</code> 对象调用时的版本</p></li><li><p><code>reference front()</code></p><p>获取第一个元素的引用</p></li><li><p><code>const_reference front() const</code></p><p>参考 <code>at(size_type n)</code></p></li><li><p><code>reference back()</code></p><p>获取最后一个元素的引用</p></li><li><p><code>const_reference back() const</code></p><p>参考 <code>at(size_type n)</code></p></li></ul><h4 id="修改容器相关"><a href="#修改容器相关" class="headerlink" title="修改容器相关"></a>修改容器相关</h4><ul><li><p><code>void fill_assign(size_type n, const T&amp; value);</code></p><ul><li>n: 向 <code>vector</code> 中填充的元素个数</li><li>value:  向 <code>vector</code> 中填充的元素值</li></ul><p><strong>调用方法:</strong></p><ul><li><code>vector(size_type n, const T&amp; value)</code></li><li><code>iterator erase(const_iterator pos)</code></li></ul><p>该方法会将 <code>vector</code> 的 <code>size()</code> 修改为 $n$</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">IIter</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_assign</span><span class="params">(IIter first, IIter last, input_iterator_tag)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>模板参数:</strong></p><ul><li>IIter: 接受的迭代器</li></ul><p><strong>方法参数:</strong></p><ul><li>first: 区间左端点迭代器</li><li>last: 区间右端点迭代器</li><li>input_iterator_tag: 表明 IIter 是一个 <code>input_iterator</code> </li></ul><p><strong>内部调用:</strong></p><ul><li><code>iterator erase(const_iterator first, const_iterator last)</code></li><li><code>iterator insert(const_iterator pos, const T&amp; value)</code></li></ul><p>使用 $[first, last)$ 中的元素填充 <code>vector</code> 并将容量设置为 <code>distance(first, last)</code>, 该方法用于处理 <code>input_iterator</code> 类型迭代器, 其内部复制使用采用循环赋值的方式</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">FIter</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_assign</span><span class="params">(FIter first, FIter last, forward_iterator_tag)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>模板参数:</strong></p><ul><li>FIter: 接受的前向迭代器</li></ul><p><strong>方法参数:</strong></p><ul><li>first: 区间左端点迭代器</li><li>last: 区间右端点迭代器</li><li>forward_iterator_tag: 表明 FIter 是一个 <code>forward_iterator</code> </li></ul><p>使用 $[first, last)$ 中的元素填充 <code>vector</code> 并将容量设置为 <code>distance(first, last)</code>, 该方法用于处理 <code>forward_iterator</code> 类型迭代器, 其内部复制使用采用整体拷贝的方式, 来提升性能</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">assign</span><span class="params">(size_type n, <span class="keyword">const</span> T&amp; value)</span></span></span><br></pre></td></tr></table></figure><p><strong>方法参数:</strong></p><ul><li>n: 向 <code>vector</code> 中填充的元素个数</li><li>value:  向 <code>vector</code> 中填充的元素值</li></ul><p><strong>内部调用:</strong></p><ul><li><code>void fill_assign(size_type n, const T&amp; value);</code></li></ul><p>使用 $n$ 个值为 <code>value</code> 的元素填充 <code>vector</code></p></li><li><p>```c++<br>template &lt;class Iter, typename std::enable_if&lt;</p><pre><code>    mystl::is_input_iterator&lt;Iter&gt;::value, int&gt;::type = 0&gt;</code></pre><p>void assign(Iter first, Iter last)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**模板参数:**</span><br><span class="line"></span><br><span class="line">- Iter: 接受的迭代器</span><br><span class="line">- 第二参数来判断是否为 `input_iterator` 类型迭代器, 不是则该方法则失效</span><br><span class="line"></span><br><span class="line">**方法参数:**</span><br><span class="line"></span><br><span class="line">- first: 区间左端点迭代器</span><br><span class="line">- last: 区间右端点迭代器</span><br><span class="line"></span><br><span class="line">使用 $[first, last)$ 的元素来填充 `vector` , 并且将容量修改为 `distance(first, last)` 同时内部根据迭代器实际类型来实例化不同的处理方法, 来提高性能</span><br><span class="line"></span><br><span class="line">**内部调用:**</span><br><span class="line"></span><br><span class="line">```c++</span><br><span class="line">copy_assign(first, last, iterator_category(first));</span><br><span class="line">// 根据第三参数来选择调用</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">IIter</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_assign</span><span class="params">(IIter first, IIter last, input_iterator_tag)</span></span>;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">FIter</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_assign</span><span class="params">(FIter first, FIter last, forward_iterator_tag)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p><code>void assign(std::initializer_list&lt;value_type&gt; il)</code></p><p><strong>内部调用:</strong></p><ul><li><code>void copy_assign(FIter first, FIter last, forward_iterator_tag);</code></li></ul><p>使用初始化链表来填充  <code>vector</code> </p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;class... Args&gt;</span><br><span class="line"><span class="function">iterator <span class="title">emplace</span><span class="params">(const_iterator pos, Args&amp;&amp; ...args)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>方法参数:</strong></p><ul><li>pos: 要插入元素的位置</li><li>…args:  要插入的参数包的右值引用</li></ul><p>将参数包的第一个参数在 <code>pos</code> 位置处就地构造元素, 避免额外的复制或者移动开销</p><p><strong>内部调用:</strong></p><ul><li><p>当需要扩容时调用 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class ...Args&gt;</span><br><span class="line">void insert_aux(iterator position, Args&amp;&amp; ...args)</span><br></pre></td></tr></table></figure></li></ul></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;class... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">emplace_back</span><span class="params">(Args&amp;&amp; ...args)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>方法参数:</strong></p><ul><li>…args:  要插入的参数包的右值引用</li></ul><p><strong>内部调用:</strong></p><ul><li><p>当需要扩容时调用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_aux</span><span class="params">(iterator position, <span class="keyword">const</span> T&amp; value)</span></span></span><br></pre></td></tr></table></figure></li></ul><p>将参数包的第一个参数在 <code>end()</code>位置处就地构造元素, 避免额外的复制或者移动开销</p></li><li><p><code>void push_back(const T&amp; value)</code></p><p><strong>方法参数:</strong></p><ul><li>value: 要放入 <code>vector</code> 中的值引用</li></ul><p><strong>内部调用:</strong></p><ul><li><code>void insert_aux(iterator position, const T&amp; value);</code></li></ul><p>向 <code>vector</code> 最后加入元素</p></li><li><p><code>void push_back(T&amp;&amp; value)</code></p><p><strong>方法参数:</strong></p><ul><li>value: 要插入的元素的右值引用</li></ul><p><strong>内部调用:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;class... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">emplace_back</span><span class="params">(Args&amp;&amp; ...args)</span></span>;</span><br></pre></td></tr></table></figure><p>作用同上, 只是这里传入的右值引用</p></li><li><p><code>void pop_back()</code></p><p>删除最后一个元素</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;class Iter&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">range_insert</span><span class="params">(const_iterator position, Iter first, Iter last)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>模板参数:</strong></p><ul><li>Iter: 接受的迭代器</li></ul><p><strong>方法参数:</strong></p><ul><li><p>position: 要插入的位置</p></li><li><p>first: 区间左端点迭代器</p></li><li><p>last: 区间右端点迭代器</p></li></ul><p>在 position 处插入 $[first, last)$ 区间内的元素</p></li><li><p><code>iterator insert(const_iterator pos, const T&amp; value)</code></p><p><strong>方法参数:</strong></p><ul><li>pos: 要插入的位置</li><li>value: 要插入元素的值</li></ul><p><strong>内部调用:</strong></p><ul><li><code>void insert_aux(iterator position, const T&amp; value);</code></li></ul><p>在 pos 处插入值为 <code>value</code> 的元素</p></li><li><p><code>iterator insert(const_iterator pos, T&amp;&amp; value)</code></p><p><strong>方法参数:</strong></p><ul><li>pos: 要插入元素的位置</li><li>value: 要插入元素的值</li></ul><p><strong>内部调用:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;class... Args&gt;</span><br><span class="line"><span class="function">iterator <span class="title">emplace</span><span class="params">(const_iterator pos, Args&amp;&amp; ...args)</span></span>;</span><br></pre></td></tr></table></figure><p>将元素值为 <code>value</code> 插入 <code>vector</code> 的 <code>pos</code> 处</p></li><li><p><code>iterator insert(const_iterator pos)</code></p><p><strong>方法参数:</strong></p><ul><li>pos: 要插入的位置</li></ul><p><strong>内部调用:</strong></p><ul><li><code>iterator insert(const_iterator pos, T&amp;&amp; value)</code></li></ul><p>在 <code>pos</code> 插入一个该类型的默认值</p></li><li><p><code>void insert(const_iterator pos, size_type n, const T&amp; value);</code></p><p><strong>方法参数:</strong></p><ul><li>pos: 要插入的位置</li><li>n: 要插入的元素的数量</li><li>value: 要插入元素的值</li></ul><p>在 <code>pos</code> 处插入 $n$ 个值为 <code>value</code> 的元素</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Iter</span>, <span class="title">typename</span> <span class="title">std</span>:</span>:enable_if&lt;</span><br><span class="line">        mystl::is_input_iterator&lt;Iter&gt;::value, <span class="keyword">int</span>&gt;::type = <span class="number">0</span>&gt;</span><br><span class="line"><span class="keyword">void</span> <span class="built_in">insert</span>(const_iterator pos, Iter first, Iter last)</span><br></pre></td></tr></table></figure><p><strong>模板参数:</strong></p><ul><li>Iter: 接受的迭代器</li><li>第二参数来判断是否为 <code>input_iterator</code> 类型迭代器, 不是则该方法则失效</li></ul><p><strong>方法参数:</strong></p><ul><li>pos: 要插入的位置</li><li>first: 要插入区间的左端点</li><li>last: 要插入区间的右端点</li></ul><p><strong>内部调用:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;class Iter&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">range_insert</span><span class="params">(const_iterator position, Iter first, Iter last)</span></span>;</span><br></pre></td></tr></table></figure><p>将 $[first, last)$ 的元素值插入到 <code>pos</code> 位置</p></li><li><p><code>iterator erase(const_iterator pos);</code></p><p><strong>方法参数:</strong></p><ul><li>pos: 要删除元素的位置</li></ul><p>删除 <code>pos</code> 位置的元素</p></li><li><p><code>iterator erase(const_iterator first, const_iterator last);</code></p><p><strong>方法参数:</strong></p><ul><li>first: 要删除区间的左端点</li><li>last: 要删除区间的右端点</li></ul><p>删除区间 $[first, last)$ 内的元素</p></li><li><p><code>void swap(vector&lt;T&gt;&amp; other) noexcept;</code></p><p><strong>方法参数:</strong></p><ul><li>other: 要与当前对象交换的对象</li></ul><p>交换两个 <code>vector</code> 该方法不会抛出异常.</p></li><li><p><code>void clear();</code></p><p>清空 <code>vector</code> 只是析构掉储存的元素, 并不释放空间</p></li><li><p><code>void reverse()</code></p><p><strong>内部调用:</strong></p><ul><li><code>std::reverse(first, last)</code></li></ul><p>此部分暂时通过调用 <code>std::reverse</code> 实现, 反转 <code>vector</code> 元素</p></li><li><p><code>void resize(size_type new_size, const T&amp; value);</code></p><p><strong>方法参数:</strong></p><ul><li>new_size: 设置的 <code>vector</code> 存储元素的大小</li><li>value: 重新设置大小后元素的值</li></ul><p><strong>内部调用:</strong></p><ul><li><code>iterator erase(const_iterator first, const_iterator last);</code></li><li><code>void insert(const_iterator pos, size_type n, const T&amp; value);</code></li></ul><p>将 <code>vector</code> 的元素数量重置为 <code>new_size</code> 且元素值为 <code>value</code></p></li><li><p><code>void resize(size_type new_size)</code></p><p><strong>方法参数:</strong></p><ul><li>new_size: 设置的 <code>vector</code> 存储元素的大小</li></ul><p><strong>内部调用:</strong></p><ul><li><code>void resize(size_type new_size, const T&amp; value);</code></li></ul><p>将 <code>vector</code> 的元素数量重置为 <code>new_size</code> 且元素值为默认值</p></li></ul><h4 id="重载运算符"><a href="#重载运算符" class="headerlink" title="重载运算符"></a>重载运算符</h4><p><strong>赋值运算符:</strong></p><ul><li><p><strong>左值引用版本</strong></p><p><code>vector&lt;T&gt;&amp; operator=(const vector&lt;T&gt;&amp; rhs);</code></p><p><strong>内部调用:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Iter</span>, <span class="title">typename</span> <span class="title">std</span>:</span>:enable_if&lt;</span><br><span class="line">        mystl::is_input_iterator&lt;Iter&gt;::value, <span class="keyword">int</span>&gt;::type = <span class="number">0</span>&gt;</span><br><span class="line"><span class="built_in">vector</span>(Iter first, Iter last)</span><br></pre></td></tr></table></figure></li><li><p><strong>右值引用版本</strong></p><p><code>vector&lt;T&gt;&amp; operator=(vector&lt;T&gt;&amp;&amp; rhs)</code></p><p><strong>内部调用:</strong></p><ul><li><code>clear()</code></li></ul><p>保证不抛出异常</p></li><li><p><strong>初始化列表版本</strong><br><code>vector&lt;T&gt;&amp; operator=(std::initializer_list&lt;T&gt; ilist)</code></p></li><li><p><strong>内部调用:</strong></p><ul><li><code>vector(std::initializer_list&lt;T&gt; ilist) &#123; ... &#125;</code></li></ul></li></ul><p><strong>重载 [] 运算符:</strong></p><ul><li><p><code>reference operator[](size_type n)</code></p><p>取出下标为 $n$ 的元素</p></li><li><p><code>const_reference operator[](size_type n) const</code></p><p>同上, 当对象为常对象时优先调用</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> STL 源码 </category>
          
          <category> TinySTL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TinySTL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>扫描线(线段树)</title>
      <link href="/acm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%89%AB%E6%8F%8F%E7%BA%BF(%E7%BA%BF%E6%AE%B5%E6%A0%91)/"/>
      <url>/acm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%89%AB%E6%8F%8F%E7%BA%BF(%E7%BA%BF%E6%AE%B5%E6%A0%91)/</url>
      
        <content type="html"><![CDATA[<h1 id="扫描线-线段树"><a href="#扫描线-线段树" class="headerlink" title="扫描线(线段树)"></a>扫描线(线段树)</h1><p>关于<a href="https://so.csdn.net/so/search?q=%E7%BA%BF%E6%AE%B5%E6%A0%91&spm=1001.2101.3001.7020">线段树</a>辅助扫描线的基本思想，已经有很多大佬去详细的解释了，可以去看一下<a href="https://blog.csdn.net/xianpingping/article/details/83032798">传送门</a></p><p><strong>这里主要说一下线段树辅助扫描线的一些问题以及几种变形</strong></p><ol><li><p>关于数据的离散化，离散化很多时候是为了减小空间消耗，但是我认为在线段树辅助扫描线时，基本都是需要进行离散化的，因为在以x(y)为坐标轴时，维护的是 $[1, m] $ (m不确定)，但是显然坐标轴上的区间点坐标不一定是从1开始的，所以要离散出一个区间其范围是 $[1, m]$</p></li><li><p> 在一般线段树进行区间划分的时候，通常采用下面的方式</p></li></ol>   <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">(操作函数) (l, mid)</span><br><span class="line">(操作函数) (mid + <span class="number">1</span>, r)</span><br></pre></td></tr></table></figure><p>   但是，在线段树辅助扫描线的时候，这样划分是不可以的，由于线段树维护的是连续区间，而上面划分区间的时候 $mid$ 和 $mid + 1$中间是有距离的，所以会少统计答案导致错误，所以可以给线段树维护的区间换个意义，可以将其理解为维护的是一个个区间</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">|___|___|___|___|</span><br><span class="line">1 2   3   4  5</span><br></pre></td></tr></table></figure><p>   比如上面这个图，将 $[1, 2]$ 定义为 1 号区间，$[2, 3]$ 定义为 2 号区间 … 这样的话，每一个叶子节点的意义不再是一个离散的点，而是表示一个长度为 1 的区间，而上级节点维护的，就是这一个个区间的组成的大区间<br>    在进行维护时可以发现，如果要更新 $[2, 4]$ 这段区间 <strong>(这里2，4指的是端点坐标)</strong>,就等于维护 $[2, 3]$ 这两个区间**(这里的2，3是指的区间编号)**, 可以发现，当要维护节点 $[l, r]$ 这一段区间时就等同于维护第 $(l，l + 1… r - 1)$ 号区间，也就是 $[l, r - 1]$ 范围的区间，所以在更新线段树的时候，传的更新范围参数应该是 $(l, r - 1)$ ，但是如果求区间长度，用 $(r - 1) - l$ 是不正确的，没关系，只要在计算区间长度的时候，给 r 加一个 1 就解决了这个问题<br>    由于我差劲的表达能力以及这种方式自身的抽象性，可能看到这里会觉得，这是什么玩意,看不懂啊，没关系，这只是一种处理方法，下面在讲到其他问题的时候会给出一种简单易懂方式</p><ul><li><p><strong>例题1 :</strong> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1542">Atlantis</a></p><p>这道题目还挺经典的，由于在acwiing上莫名奇妙的MLE所以选择HDU的题目链接，有兴趣的朋友可以去看下acwing上的这道题目,而且数据也加强过了,线段树辅助扫描线的板子题,用的是第一种划分区间的处理方式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lch rt &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rch rt &lt;&lt; 1 | 1 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mark[maxn &lt;&lt; <span class="number">2</span>];<span class="comment">//该区间是否为可用边,以及覆盖的次数</span></span><br><span class="line"><span class="keyword">double</span> sum[maxn &lt;&lt; <span class="number">2</span>];<span class="comment">//记录该区间下边的总长度</span></span><br><span class="line">vector &lt;<span class="keyword">double</span>&gt; Hash;<span class="comment">//对横坐标进行离散化</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//以横坐标作为线段(区间),对横坐标线段进行扫描</span></span><br><span class="line"><span class="comment">//扫描的作用是每次更新下底边总长度和下底边个数,增加新面积</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//线段</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seg</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> l, r, h;</span><br><span class="line">    <span class="keyword">int</span> d;</span><br><span class="line">    <span class="built_in">seg</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">seg</span>(<span class="keyword">double</span> x1, <span class="keyword">double</span> x2, <span class="keyword">double</span> H, <span class="keyword">int</span> c) &#123;</span><br><span class="line">        l = x1, r = x2, h = H, d = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> seg &amp;a) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> h &lt; a.h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;s[maxn &lt;&lt; <span class="number">1</span>];<span class="comment">//边有2n条需要乘2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//如果当前区间是边的一部分,长度直接记为区间长度</span></span><br><span class="line">    <span class="keyword">if</span> (mark[rt]) sum[rt] = Hash[r + <span class="number">1</span>] - Hash[l];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l == r) sum[rt] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> sum[rt] = sum[lch] + sum[rch];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        mark[rt] += d;</span><br><span class="line">        <span class="built_in">pushup</span>(rt, l, r);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= mid) <span class="built_in">update</span>(L, R, l, mid, lch, d);</span><br><span class="line">    <span class="keyword">if</span> (R &gt; mid)  <span class="built_in">update</span>(L, R, mid + <span class="number">1</span>, r, rch, d);</span><br><span class="line">    <span class="built_in">pushup</span>(rt, l, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">double</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lower_bound</span>(Hash.<span class="built_in">begin</span>(), Hash.<span class="built_in">end</span>(), key) - Hash.<span class="built_in">begin</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> x1, x2, y1, y2;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n), n) &#123;</span><br><span class="line">        Hash.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf%lf%lf&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line">            Hash.<span class="built_in">push_back</span>(x1), Hash.<span class="built_in">push_back</span>(x2);</span><br><span class="line">            s[k++] = <span class="built_in">seg</span>(x1, x2, y1, <span class="number">1</span>); <span class="comment">//入边</span></span><br><span class="line">            s[k++] = <span class="built_in">seg</span>(x1, x2, y2, <span class="number">-1</span>); <span class="comment">//出边</span></span><br><span class="line">        &#125;                   </span><br><span class="line">        <span class="built_in">sort</span>(Hash.<span class="built_in">begin</span>(), Hash.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">sort</span>(s, s + k);</span><br><span class="line">        <span class="comment">//离散化</span></span><br><span class="line">        Hash.<span class="built_in">erase</span>(<span class="built_in">unique</span>(Hash.<span class="built_in">begin</span>(), Hash.<span class="built_in">end</span>()), Hash.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = Hash.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> L = <span class="built_in">search</span>(s[i].l);</span><br><span class="line">            <span class="keyword">int</span> R = <span class="built_in">search</span>(s[i].r) - <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//更新区间</span></span><br><span class="line">            <span class="built_in">update</span>(L, R, <span class="number">0</span>, len - <span class="number">2</span>, <span class="number">1</span>, s[i].d);</span><br><span class="line">            ans += sum[<span class="number">1</span>] * (s[i + <span class="number">1</span>].h - s[i].h);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Test case #%d\nTotal explored area: %.2lf\n\n&quot;</span>, ++num, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>第二种划分方式</strong></p><p> 可以得知，线段树辅助扫描线，维护的是连续区间 ，那么在进行区间划分的时候，直接不将边界分开就好了，后面的两道题就采用这种方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">(左区间函数) (l, mid);</span><br><span class="line">(右区间函数) (mid, r);</span><br></pre></td></tr></table></figure><ul><li><p>**例题2: **  <a href="https://www.acwing.com/problem/content/250/">窗内的星星</a></p><p>这个题主要是将点扩充成矩形后求最大面积交，利用线段树辅助扫描线维护每加入一条边后，最大的矩形面积交的值，加入一条入边就等于扫描线停下的位置进入了这个矩形覆盖的增益区域，加入一条入边就表示扫描线已经移出这个矩形的增益区域，如果当进入一个矩形的增益区域的同时，还没有出之前矩形的增益区域，那么这个区域的增益值就会叠加，只需要每一次加边的时候同时记录此时的最大值，在所有最大值中取最大就可以了，但是关于这个题的边界判断，我个人觉得这个题还是不太对劲</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lch rt &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rch rt &lt;&lt; 1 | 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e4</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll y1, y2, h, c;</span><br><span class="line">    <span class="built_in">seg</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">seg</span>(ll ys, ll yd, ll H, ll v) &#123;</span><br><span class="line">        y1 = ys, y2 = yd, h = H, c = v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> seg &amp;a) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (h == a.h) <span class="keyword">return</span> c &lt; a.c;</span><br><span class="line">        <span class="keyword">return</span> h &lt; a.h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;line[maxn];</span><br><span class="line"></span><br><span class="line">ll ms[maxn &lt;&lt; <span class="number">2</span>], add[maxn &lt;&lt; <span class="number">2</span>], Hash[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ms[rt] = <span class="built_in">max</span>(ms[lch], ms[rch]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (add[rt]) &#123;</span><br><span class="line">        add[lch] += add[rt];</span><br><span class="line">        add[rch] += add[rt];</span><br><span class="line">        ms[lch] += add[rt];</span><br><span class="line">        ms[rch] += add[rt];</span><br><span class="line">        add[rt] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt, ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        ms[rt] += val;</span><br><span class="line">        add[rt] += val;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(rt);</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (L &lt; mid) <span class="built_in">update</span>(L, R, l, mid, lch, val);</span><br><span class="line">    <span class="keyword">if</span> (R &gt; mid) <span class="built_in">update</span>(L, R, mid, r, rch, val);</span><br><span class="line">    <span class="built_in">pushup</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(ll x, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lower_bound</span>(Hash, Hash + n, x) - Hash;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, w, h, x, y, c;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n &gt;&gt; w &gt;&gt; h) &#123;</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            cin &gt;&gt; x &gt;&gt; y &gt;&gt; c;</span><br><span class="line">            Hash[k] = y;</span><br><span class="line">            line[k++] = <span class="built_in">seg</span>(y, <span class="number">1LL</span> * y + h - <span class="number">1</span>, x, c);<span class="comment">//入边</span></span><br><span class="line">            Hash[k] = <span class="number">1LL</span> * y + h - <span class="number">1</span>;</span><br><span class="line">           <span class="comment">// cout &lt;&lt; &quot;1: &quot; &lt;&lt; Hash[k] &lt;&lt; endl;</span></span><br><span class="line">            line[k++] = <span class="built_in">seg</span>(y, <span class="number">1LL</span> * y + h - <span class="number">1</span>, <span class="number">1LL</span> * x + w, -c);<span class="comment">//出边</span></span><br><span class="line">           <span class="comment">// cout &lt;&lt; &quot;2: &quot; &lt;&lt; line[k - 1].y1 &lt;&lt; endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(Hash, Hash + k);</span><br><span class="line">        <span class="built_in">sort</span>(line, line + k);</span><br><span class="line">        <span class="comment">//离散化</span></span><br><span class="line">        <span class="keyword">int</span> m = <span class="built_in">unique</span>(Hash, Hash + k) - Hash;</span><br><span class="line">        ll ans = <span class="number">-0x7fffffff</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> L = <span class="built_in">search</span>(line[i].y1, m);</span><br><span class="line">            <span class="keyword">int</span> R = <span class="built_in">search</span>(line[i].y2, m);</span><br><span class="line">            <span class="comment">//cout &lt;&lt; &quot;r: &quot; &lt;&lt; R &lt;&lt; &quot; l: &quot; &lt;&lt; L &lt;&lt; endl;</span></span><br><span class="line">            <span class="built_in">update</span>(L, R, <span class="number">0</span>, m - <span class="number">1</span>, <span class="number">1</span>, line[i].c);</span><br><span class="line">           <span class="comment">// cout &lt;&lt; &quot;i: &quot; &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; ms[1] &lt;&lt; endl;</span></span><br><span class="line">            ans = <span class="built_in">max</span>(ans, ms[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>求矩形并的周长</strong><br> 这个问题其实类似求矩形面积并，但是要稍微抽象一些，求这类问题有两种方法，但由于蒟蒻只会一种，所以就只介绍一种…</p><p>依旧是向求面积并时，标记入边和出边，遇到入边就给对应的范围 + 1，表示覆盖了一次，遇到出边就就给对应范围 -1 表示扫描线覆盖的这个区域覆盖次数 -1，在统计周长的时候，先按照横坐标进行一次扫描线，每一次统计加入该边后的覆盖长度与上一次覆盖长度差的绝对值，然后再按照纵坐标进行一次扫描线，即为答案，要注意，由于可能出现入边和出边重叠的情况，但是重叠的部分是不算周长的，这里对边进行排序的时候，遇到重叠情况，采取先加入边再加出边的策略。</p><p>演示 计算与轴平行的矩形并的长度<br><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://img-blog.csdnimg.cn/20210217202806879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NVQ1VDMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这个方法挺抽象的，我强行解释一下：<br> 对于每一次加入入边，那么覆盖的长度一定 &gt;= 上一次覆盖的长度，就说明变长的这一部分一定是之前未被覆盖的，也就是说其没有被前面的矩形并所完全包含进去</p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://img-blog.csdnimg.cn/20210217204041365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NVQ1VDMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这里黄色表示新加入的入边，之前由于1,2号入边已经将新加入的入边覆盖过了，而且其对应的出边并没有在新加入的入边之前就被扫描到，所以事实上这条边是在这两个矩形并的内部，并不能对周长产生贡献，也可以换个说法，当加入一条入边时，覆盖的长度并没有变化，说明，这个入边的下面有至少一条入边将这个区域给覆盖了，而且上面至少也对应一条出边，等待着将这个区域取消覆盖状态，也就是说，新加入的入边至少处于一个矩形的内部，对周长是没有贡献的，出边也同理，每加入一条出边覆盖的长度 &lt;= 上一次的长度，如果等于上一次长度，说明这条出边也是没有对周长产生贡献的</p><p>之前看到的一句话，总结的很好</p><blockquote><p>因为每次添加了一条线段，如果没有没有使总区间覆盖长度发生变化，说明这条线段其实在多边形的内部，被覆盖掉了，不能计算，只要能引起总区间长度发生变化的，说明该线段不被覆盖不被包含</p></blockquote><ul><li><p><strong>例题3:</strong>  [<a href="https://www.luogu.com.cn/problem/P1856">USACO5.5]矩形周长Picture</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lch rt &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rch rt &lt;&lt; 1 | 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10000</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y1, y2, d;</span><br><span class="line">    <span class="built_in">seg</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">seg</span>(<span class="keyword">int</span> X, <span class="keyword">int</span> Y1, <span class="keyword">int</span> Y2, <span class="keyword">int</span> flag) &#123;</span><br><span class="line">        x = X, y1 = Y1, y2 = Y2, d = flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> seg &amp;a) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x != a.x) <span class="keyword">return</span> x &lt; a.x;</span><br><span class="line">        <span class="keyword">return</span> d &gt; a.d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;s[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pos[maxn][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> mark[maxn &lt;&lt; <span class="number">2</span>], sum[maxn &lt;&lt; <span class="number">2</span>], n;</span><br><span class="line">vector &lt;<span class="keyword">int</span>&gt; Hash;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lower_bound</span>(Hash.<span class="built_in">begin</span>(), Hash.<span class="built_in">end</span>(), key) - Hash.<span class="built_in">begin</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mark[rt]) sum[rt] = Hash[r] - Hash[l];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l == r) sum[rt] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> sum[rt] = sum[lch] + sum[rch];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        mark[rt] += d;</span><br><span class="line">        <span class="built_in">pushup</span>(rt, l, r);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (L &lt; mid) <span class="built_in">update</span>(L, R, l, mid, lch, d);</span><br><span class="line">    <span class="keyword">if</span> (R &gt; mid) <span class="built_in">update</span>(L, R, mid, r, rch, d);</span><br><span class="line">    <span class="built_in">pushup</span>(rt, l, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_ans</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>, last = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">sort</span>(s, s + k), <span class="built_in">sort</span>(Hash.<span class="built_in">begin</span>(), Hash.<span class="built_in">end</span>());</span><br><span class="line">    Hash.<span class="built_in">erase</span>(<span class="built_in">unique</span>(Hash.<span class="built_in">begin</span>(), Hash.<span class="built_in">end</span>()), Hash.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">int</span> length = Hash.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> L = <span class="built_in">search</span>(s[i].y1);</span><br><span class="line">        <span class="keyword">int</span> R = <span class="built_in">search</span>(s[i].y2);</span><br><span class="line">        <span class="built_in">update</span>(L, R, <span class="number">0</span>, length - <span class="number">1</span>, <span class="number">1</span>, s[i].d);</span><br><span class="line">        res += <span class="built_in">abs</span>(last - sum[<span class="number">1</span>]);</span><br><span class="line">        last = sum[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> &amp;k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    k = <span class="number">0</span>;</span><br><span class="line">    Hash.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span> s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> x1, y1, x2, y2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line">        pos[i][<span class="number">0</span>] = x1, pos[i][<span class="number">1</span>] = y1, pos[i][<span class="number">2</span>] = x2, pos[i][<span class="number">3</span>] = y2;</span><br><span class="line">        Hash.<span class="built_in">push_back</span>(x1), Hash.<span class="built_in">push_back</span>(x2);</span><br><span class="line">        s[k++] = <span class="built_in">seg</span>(y1, x1, x2, <span class="number">1</span>);<span class="comment">//入边</span></span><br><span class="line">        s[k++] = <span class="built_in">seg</span>(y2, x1, x2, <span class="number">-1</span>);<span class="comment">//入边</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="built_in">get_ans</span>(k);</span><br><span class="line">    <span class="built_in">init</span>(k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        <span class="comment">//cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span></span><br><span class="line">        x1 = pos[i][<span class="number">0</span>], y1 = pos[i][<span class="number">1</span>], x2 = pos[i][<span class="number">2</span>], y2 = pos[i][<span class="number">3</span>];</span><br><span class="line">        Hash.<span class="built_in">push_back</span>(y1), Hash.<span class="built_in">push_back</span>(y2);</span><br><span class="line">        s[k++] = <span class="built_in">seg</span>(x1, y1, y2, <span class="number">1</span>);<span class="comment">//入边</span></span><br><span class="line">        s[k++] = <span class="built_in">seg</span>(x2, y1, y2, <span class="number">-1</span>);<span class="comment">//入边</span></span><br><span class="line">    &#125;</span><br><span class="line">    ans += <span class="built_in">get_ans</span>(k);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里再补充一下求矩形面积交的做法，其实跟矩形面积并基本相似，只需要再维护一个每加入一条边后，当前所有重叠边的长度,并且同时维护每个区间覆盖的总长度，由于没有Pushdown函数，所以需要处理一下Pushup函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[rt].cnt)</span><br><span class="line">t[rt].len=X[r+<span class="number">1</span>]-X[l];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l==r)</span><br><span class="line">t[rt].len=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">t[rt].len=t[rt&lt;&lt;<span class="number">1</span>].len+t[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len;</span><br><span class="line"><span class="keyword">if</span>(t[rt].cnt&gt;<span class="number">1</span>)</span><br><span class="line">t[rt].s=X[r+<span class="number">1</span>]-X[l];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l==r)</span><br><span class="line">t[rt].s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t[rt].cnt==<span class="number">1</span>)</span><br><span class="line">t[rt].s=t[rt&lt;&lt;<span class="number">1</span>].len+t[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">t[rt].s=t[rt&lt;&lt;<span class="number">1</span>].s+t[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>解释一下:</strong></p><ol><li>对于覆盖次数 &gt;= 2的区间，区间长度直接为当前区间长度</li><li> 对于覆盖次数 == 1的区间，由于这个区间的标记只是说明当前区间被覆盖，对于它的子区间我们并不能清楚的知道，若是它下面的小区间也被覆盖过至少一次，那么此时就等于覆盖了这个小区间两次以上，那么当前的区间覆盖次数 &gt;= 2的长度就是子区间的长度和 (这里为什么选择子区间覆盖的长度，因为对于一个区间，其多次覆盖的长度一定不长于子区间覆盖的全部长度)</li><li> 对于没有被覆盖(或者说这个区间没有完全被用作矩形边长的一部分)，就分别统计子区间的全部覆盖长度和覆盖两次及以上的长度即可</li></ol><p>**例题4: ** <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1255">Hdu1255</a></p><p>代码转自<a href="https://blog.csdn.net/riba2534/article/details/76854995">传送门</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 2200</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l,m,rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m+1,r,rt&lt;&lt;1|1</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">double</span> l,r,h;</span><br><span class="line"><span class="keyword">int</span> f;</span><br><span class="line"><span class="built_in">Seg</span>() &#123;&#125;</span><br><span class="line"><span class="built_in">Seg</span>(<span class="keyword">double</span> a,<span class="keyword">double</span> b,<span class="keyword">double</span> c,<span class="keyword">int</span> d):<span class="built_in">l</span>(a),<span class="built_in">r</span>(b),<span class="built_in">h</span>(c),<span class="built_in">f</span>(d) &#123;&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Seg &amp;cmp) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> h&lt;cmp.h;</span><br><span class="line">&#125;</span><br><span class="line">&#125; e[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">double</span> len,s;</span><br><span class="line">&#125; t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">double</span> X[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[rt].cnt)</span><br><span class="line">t[rt].len=X[r+<span class="number">1</span>]-X[l];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l==r)</span><br><span class="line">t[rt].len=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">t[rt].len=t[rt&lt;&lt;<span class="number">1</span>].len+t[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len;</span><br><span class="line"><span class="keyword">if</span>(t[rt].cnt&gt;<span class="number">1</span>)</span><br><span class="line">t[rt].s=X[r+<span class="number">1</span>]-X[l];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l==r)</span><br><span class="line">t[rt].s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t[rt].cnt==<span class="number">1</span>)</span><br><span class="line">t[rt].s=t[rt&lt;&lt;<span class="number">1</span>].len+t[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">t[rt].s=t[rt&lt;&lt;<span class="number">1</span>].s+t[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)</span><br><span class="line">&#123;</span><br><span class="line">t[rt].cnt+=val;</span><br><span class="line"><span class="built_in">pushdown</span>(l,r,rt);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=m) <span class="built_in">update</span>(L,R,lson,val);</span><br><span class="line"><span class="keyword">if</span>(R&gt;m) <span class="built_in">update</span>(L,R,rson,val);</span><br><span class="line"><span class="built_in">pushdown</span>(l,r,rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,q;</span><br><span class="line"><span class="keyword">double</span> a,b,c,d;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q);</span><br><span class="line"><span class="keyword">while</span>(q--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">mem</span>(t,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf%lf%lf&quot;</span>,&amp;a,&amp;b,&amp;c,&amp;d);</span><br><span class="line">X[num]=a;</span><br><span class="line">e[num++]=<span class="built_in">Seg</span>(a,c,b,<span class="number">1</span>);</span><br><span class="line">X[num]=c;</span><br><span class="line">e[num++]=<span class="built_in">Seg</span>(a,c,d,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(X,X+num);</span><br><span class="line"><span class="built_in">sort</span>(e,e+num);</span><br><span class="line"><span class="keyword">int</span> m=<span class="built_in">unique</span>(X,X+num)-X;</span><br><span class="line"><span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> l=<span class="built_in">lower_bound</span>(X,X+m,e[i].l)-X;</span><br><span class="line"><span class="keyword">int</span> r=<span class="built_in">lower_bound</span>(X,X+m,e[i].r)-X<span class="number">-1</span>;</span><br><span class="line"><span class="built_in">update</span>(l,r,<span class="number">0</span>,m,<span class="number">1</span>,e[i].f);</span><br><span class="line">ans+=t[<span class="number">1</span>].s*(e[i+<span class="number">1</span>].h-e[i].h);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区间 DP 基础</title>
      <link href="/acm/DP/%E5%8C%BA%E9%97%B4%20DP%20%E5%9F%BA%E7%A1%80/"/>
      <url>/acm/DP/%E5%8C%BA%E9%97%B4%20DP%20%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="区间-DP-基础"><a href="#区间-DP-基础" class="headerlink" title="区间 DP 基础"></a>区间 DP 基础</h1><h2 id="什么是区间-DP-区间-DP-特征"><a href="#什么是区间-DP-区间-DP-特征" class="headerlink" title="什么是区间 DP, 区间 DP 特征"></a>什么是区间 DP, 区间 DP 特征</h2><blockquote><p>区间类动态规划是线性动态规划的扩展，它在分阶段地划分问题时，与阶段中元素出现的顺序和由前一阶段的哪些元素合并而来有很大的关系。令状态 $f(i, j)$ 表示将下标位置 到 的所有元素合并能获得的价值的最大值，那么 $f(i, j) = max{f(i, k) + f(k + 1, j) + cost}, cost$ 为将这两组元素合并起来的代价。</p><p>区间 DP 的特点：</p><p><strong>合并</strong>：即将两个或多个部分进行整合，当然也可以反过来；</p><p><strong>特征</strong>：能将问题分解为能两两合并的形式；</p><p><strong>求解</strong>：对整个问题设最优值，枚举合并点，将问题分解为左右两个部分，最后合并两个部分的最优值得到原问题的最优值。</p></blockquote><p><strong>这里给出两道例题进行具体分析: 矩阵连乘问题，石头合并问题</strong></p><h2 id="矩阵连乘"><a href="#矩阵连乘" class="headerlink" title="矩阵连乘"></a>矩阵连乘</h2><p><strong>题目描述：</strong></p><p><a href="https://so.csdn.net/so/search?q=%E7%9F%A9%E9%98%B5&spm=1001.2101.3001.7020">矩阵</a> $ [A_1,A_2,…,A_n ]$，其中，$A_i$ 与 $A_{i+1}$ 是可乘的，$(i = 1, 2,…, n-1)$。用加括号的方法表示矩阵连乘的次序，不同的计算次序计算量（乘法次数）是不同的，找出一种加括号的方法，使得矩阵连乘的次数最小。</p><p>这里我们要先知道 ：$m * n$ 的 $A$ 矩阵 和 $n * k$ 的 $B$ 矩阵的乘法运算次数为：$m * n * k$</p><p>以$A_1 A_2 A_3$ 三个矩阵相乘为例，乘法的顺序可以是  $(A_1 * A_2) * A_3$ 或者是 $A_1 * (A_2 * A_3)$ 这两种顺序的计算量是可能会不同的，所以矩阵的相乘顺序是会影响连乘的次数。</p><p>先设 $m[i][j]$ 是矩阵 $A_i - A_j$ 的最小相乘次数。<br>那对于 $A_i - A_j$，可以将其拆分为 $A_i - A_k，A_{k+1} - A_j (i &lt;= k &lt; j) $ 我们只需要找到这么一个 $k$ 使得以 $k$为分割点所拆分出来的两部分的结果相乘使得 $m[i][j]$ 最小<br>则$m[i][j] = m[i][k] + m[k + 1][j] + p_{i-1} * p_k * p_j$，那么就将原问题拆解为分别求 $A_i - A_k$ 和 $A_{k+1}－ A_j $的矩阵相乘的最少相乘次数，那么我们就可以得到这样的递推公式</p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://img-blog.csdnimg.cn/20200518155055607.png" alt="在这里插入图片描述"></p><p>这里我们采用第底向上的方式：<br>我们根据</p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://img-blog.csdnimg.cn/20200518155352559.png" alt="在这里插入图片描述"></p><p>发现，若是想要计算 $m[i][j]$，就必须先计算出 i  和 j 中的每一个 k 的 $m[i][k] ,m[k +1][j]$，所以就从最小的连乘单元：2个矩阵连乘开始进行计算，而且所有的被分割的子序列，长度都会小于 $j - i +1$. 所以选择根据矩阵链长度的递增开始计算</p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://img-blog.csdnimg.cn/20200518155711551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NVQ1VDMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> size = <span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m[size][size],s[size][size];<span class="comment">//m[i][j]的值是i - j的最小乘数，s[i][j]则是记录过程</span></span><br><span class="line"><span class="keyword">int</span> p[size];<span class="comment">//存储矩阵的第一个行和中间矩阵的列数以及最后一个矩阵的列</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Min_matrix</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">2</span>; l &lt;= n; l++)&#123;<span class="comment">//矩阵连乘的单元规模</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - l + <span class="number">1</span>; i++)&#123;<span class="comment">//对不同规模的矩阵连乘单元,确定共有多少单元</span></span><br><span class="line">            <span class="keyword">int</span> j = i + l - <span class="number">1</span>;</span><br><span class="line">            m[i][j] = m[i + <span class="number">1</span>][j] + p[i - <span class="number">1</span>] * p[i] * p[j];<span class="comment">//先赋一个初值,以进行下面的比较</span></span><br><span class="line">            s[i][j] = i;<span class="comment">//i - j 的最小相乘次数的决策点</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt; j; k++)&#123;<span class="comment">//通过遍历中间点来找到最优决策点</span></span><br><span class="line">                <span class="keyword">int</span> temp = m[i][k] + m[k + <span class="number">1</span>][j] + p[i - <span class="number">1</span>]*p[k]*p[j];</span><br><span class="line">                <span class="keyword">if</span>(m[i][j] &gt; temp)&#123;</span><br><span class="line">                    m[i][j] = temp;</span><br><span class="line">                    s[i][j] = k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_matrix</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;<span class="comment">//递归打印每次的决策点</span></span><br><span class="line">    <span class="keyword">if</span>(i == j)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;A[&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;]&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;(&quot;</span>;</span><br><span class="line">    <span class="built_in">Print_matrix</span>(i,s[i][j]);<span class="comment">//这里是递归i - j的每一个决策点，，这里是向左打印</span></span><br><span class="line">    <span class="built_in">Print_matrix</span>(s[i][j] + <span class="number">1</span>,j);<span class="comment">//向右打印</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;请输入矩阵的个数n : &quot;</span>&lt;&lt;endl;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;请依次输入每个矩阵的行数和最后一个矩阵的列数：&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">cin&gt;&gt;p[i];</span><br><span class="line"><span class="built_in">Min_matrix</span>(n);</span><br><span class="line"><span class="built_in">Print_matrix</span>(<span class="number">1</span>,n);</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;最小计算量的值为：&quot;</span>&lt;&lt;m[<span class="number">1</span>][n]&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>石子合并问题:</strong></p><p>跟上面矩阵相乘的思想很接近，不过由于是相邻的石头相加，运算方式不同，思路跟上面一样，这里只给出递推公式<br>$f[i] [j]$：代表合并第i到第j个石头的最小花费</p><p>$sum [ i ]$：表示 $1 –&gt; i$ 个石头的权值之和</p><p>$f[i, j]= min{ f[i, k] + f[k  + 1, j] + sum[i, j] - sum[i] + a[i]}$</p><p>至于为什么是 $sum [ j ]-sum [ i ]+a[i]$，从第 i 个石头到第 j 个石头进行合并的花费就是第i到第j个石头的权值合。</p><h3 id="练习题目"><a href="#练习题目" class="headerlink" title="练习题目:"></a>练习题目:</h3><ul><li><a href="https://www.acwing.com/problem/content/284/">石子合并</a></li><li><a href="http://poj.org/problem?id=2955">Brackets</a></li><li><a href="https://www.acwing.com/problem/content/481/">加分二叉树</a></li><li><a href="https://www.acwing.com/problem/content/285/">多边形</a></li><li><a href="https://www.acwing.com/problem/content/286/">金字塔</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
          <category> DP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm, dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL order by, limit 同时使用问题</title>
      <link href="/MySQL/MySQL-order-by,-limit-%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/"/>
      <url>/MySQL/MySQL-order-by,-limit-%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-order-by-limit-同时使用问题"><a href="#MySQL-order-by-limit-同时使用问题" class="headerlink" title="MySQL order by, limit 同时使用问题"></a>MySQL order by, limit 同时使用问题</h1><p><a href="https://dev.mysql.com/doc/refman/5.7/en/limit-optimization.html">MySQL 文档原文</a></p><p>建议去阅读一下 <strong>MySQL</strong> 文档</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>如果 <code>order by</code> 排序属性的值不唯一,  <code>order by</code> 与 <code>limit</code> 同时使用可能会出现查询结果不同的现象.</p><p>例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM ratings ORDER BY category;</span><br><span class="line">+----+----------+--------+</span><br><span class="line">| id | category | rating |</span><br><span class="line">+----+----------+--------+</span><br><span class="line">|  1 |        1 |    4.5 |</span><br><span class="line">|  5 |        1 |    3.2 |</span><br><span class="line">|  3 |        2 |    3.7 |</span><br><span class="line">|  4 |        2 |    3.5 |</span><br><span class="line">|  6 |        2 |    3.5 |</span><br><span class="line">|  2 |        3 |    5.0 |</span><br><span class="line">|  7 |        3 |    2.7 |</span><br><span class="line">+----+----------+--------+</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM ratings ORDER BY category LIMIT 5;</span><br><span class="line">+----+----------+--------+</span><br><span class="line">| id | category | rating |</span><br><span class="line">+----+----------+--------+</span><br><span class="line">|  1 |        1 |    4.5 |</span><br><span class="line">|  5 |        1 |    3.2 |</span><br><span class="line">|  4 |        2 |    3.5 |</span><br><span class="line">|  3 |        2 |    3.7 |</span><br><span class="line">|  6 |        2 |    3.5 |</span><br><span class="line">+----+----------+--------+</span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p><strong>文档原文如下:</strong></p><blockquote><p>If you combine <code>LIMIT *</code>row_count<code>*</code> with <code>ORDER BY</code>, MySQL stops sorting as soon as it has found the first <em><code>row_count</code></em> rows of the sorted result, rather than sorting the entire result. If ordering is done by using an index, this is very fast. If a filesort must be done, all rows that match the query without the <code>LIMIT</code> clause are selected, and most or all of them are sorted, before the first <em><code>row_count</code></em> are found. After the initial rows have been found, MySQL does not sort any remainder of the result set.</p><p>One manifestation of this behavior is that an <code>ORDER BY</code> query with and without <code>LIMIT</code> may return rows in different order, as described later in this section.</p></blockquote><p>如果你将 <code>LIMIT row_count</code> 子句与 <code>ORDER BY</code> 子句组合在一起使用的话, MySQL 会找到排序结果的第一个 <code>row_count</code> 后立即停止排序, 而不是对整个结果进行排序. 如果使用索引来完成排序, 这将非常快. 如果必须执行文件排序, 则在找到第一个 <code>row_count</code> 行之前, 选择所有与查询匹配但不包括 <code>LIMIT</code> 子句的行, 并对其中大部分或所有行进行排序. 一旦找到第一个 <code>row_count</code> 之后, MySQL 不会对结果集的任何剩余部分进行排序</p><p>这种行为的一种表现形式是,  一个 <code>ORDER BY</code> 查询带或者不带 <code>LIMIT</code> 可能返回行的顺序是不一样的</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>在 <code>order by</code> 子句中包含其他列以使顺序具有确定性.</p><p>例如: 假如 id 的值是唯一的, 则可以通过下面的方法解决此问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM ratings ORDER BY category, id;</span><br><span class="line">+----+----------+--------+</span><br><span class="line">| id | category | rating |</span><br><span class="line">+----+----------+--------+</span><br><span class="line">|  1 |        1 |    4.5 |</span><br><span class="line">|  5 |        1 |    3.2 |</span><br><span class="line">|  3 |        2 |    3.7 |</span><br><span class="line">|  4 |        2 |    3.5 |</span><br><span class="line">|  6 |        2 |    3.5 |</span><br><span class="line">|  2 |        3 |    5.0 |</span><br><span class="line">|  7 |        3 |    2.7 |</span><br><span class="line">+----+----------+--------+</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM ratings ORDER BY category, id LIMIT 5;</span><br><span class="line">+----+----------+--------+</span><br><span class="line">| id | category | rating |</span><br><span class="line">+----+----------+--------+</span><br><span class="line">|  1 |        1 |    4.5 |</span><br><span class="line">|  5 |        1 |    3.2 |</span><br><span class="line">|  3 |        2 |    3.7 |</span><br><span class="line">|  4 |        2 |    3.5 |</span><br><span class="line">|  6 |        2 |    3.5 |</span><br><span class="line">+----+----------+--------+</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库, mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hashtable 源码分析</title>
      <link href="/STL-%E6%BA%90%E7%A0%81/hashtable/"/>
      <url>/STL-%E6%BA%90%E7%A0%81/hashtable/</url>
      
        <content type="html"><![CDATA[<h1 id="hashtable"><a href="#hashtable" class="headerlink" title="hashtable"></a>hashtable</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p><code>hashtable</code> 实现一个关联容器, 其在插入, 删除等操作都可以做到 <code>O(1)</code> 实现</p><h2 id="哈希表概念"><a href="#哈希表概念" class="headerlink" title="哈希表概念"></a>哈希表概念</h2><h3 id="哈希方法"><a href="#哈希方法" class="headerlink" title="哈希方法"></a>哈希方法</h3><ol><li><p><strong>直接定址法</strong>：取关键字或关键字的某个线性函数值为散列地址。（这种散列函数叫做自身函数）</p></li><li><p><strong>数字分析法</strong>：假设关键字是以r为基的数，并且哈希表中可能出现的关键字都是事先知道的，则可取关键字的若干数位组成哈希地址。</p></li><li><p><strong>平方取中法</strong>：取关键字平方后的中间几位为哈希地址。通常在选定哈希函数时不一定能知道关键字的全部情况，取其中的哪几位也不一定合适，而一个数平方后的中间几位数和数的每一位都相关，由此使随机分布的关键字得到的哈希地址也是随机的。取的位数由表长决定。</p></li><li><p><strong>折叠法</strong>：将关键字分割成位数相同的几部分（最后一部分的位数可以不同），然后取这几部分的叠加和（舍去进位）作为哈希地址。</p></li><li><p><strong>随机数法</strong> </p></li><li><p><strong>除留余数法</strong>：取关键字被某个不大于散列表表长m的数p除后所得的余数为散列地址。不仅可以对关键字直接取模，也可在折叠法、平方取中法等运算之后取模。对p的选择很重要，一般取素数或m，若p选择不好，容易产生冲突。</p></li></ol><p><em>hashtable解决冲突的办法就是开链.</em></p><h3 id="冲突处理"><a href="#冲突处理" class="headerlink" title="冲突处理"></a>冲突处理</h3><p>哈希表的冲突处理也有很多种.</p><ol><li>开放定址法<ul><li>线性探测 : 本来的位置被占有(冲突), 重新再往后找到第一个有空的位置插入进去</li><li>二次探测 : 本来的位置被占有(冲突), 每次有冲突就平方一次重新查找</li></ul></li><li>开链 : 本来的位置被占有(冲突), 形成一个链表插入到链表中</li></ol><p><strong>装载因子 : 装入表中的元素 / 表的实际大小.</strong> 装载因子越大说明冲突的可能性就越大. </p><h2 id="hashtable-分析"><a href="#hashtable-分析" class="headerlink" title="hashtable 分析"></a>hashtable 分析</h2><p><strong>hashtable 前置声明</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">HashFcn</span>,</span></span><br><span class="line"><span class="class">          <span class="keyword">class</span> <span class="title">ExtractKey</span>, <span class="keyword">class</span> <span class="title">EqualKey</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hashtable</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">HashFcn</span>,</span></span><br><span class="line"><span class="class">          <span class="keyword">class</span> <span class="title">ExtractKey</span>, <span class="keyword">class</span> <span class="title">EqualKey</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">hashtable_iterator</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">HashFcn</span>,</span></span><br><span class="line"><span class="class">          <span class="keyword">class</span> <span class="title">ExtractKey</span>, <span class="keyword">class</span> <span class="title">EqualKey</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">hashtable_const_iterator</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">HashFcn</span>,</span></span><br><span class="line"><span class="class">          <span class="keyword">class</span> <span class="title">ExtractKey</span>, <span class="keyword">class</span> <span class="title">EqualKey</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="hashtable-基础定义"><a href="#hashtable-基础定义" class="headerlink" title="hashtable 基础定义"></a>hashtable 基础定义</h3><p><code>hashtable</code> 采用开链法来处理 <code>hash</code> 冲突, 所以需要有一个桶 <code>bucket</code> 以及每一个节点 <code>node</code></p><p><strong>桶 bucket:</strong> 定义的哈希表的小大, 采用 <code>vector </code> 为桶的容器</p><p>关于桶的, 通常采用质数来作为桶的大小. </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> __stl_num_primes = <span class="number">28</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> __stl_prime_list[__stl_num_primes] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">53</span>,         <span class="number">97</span>,           <span class="number">193</span>,         <span class="number">389</span>,       <span class="number">769</span>,</span><br><span class="line">  <span class="number">1543</span>,       <span class="number">3079</span>,         <span class="number">6151</span>,        <span class="number">12289</span>,     <span class="number">24593</span>,</span><br><span class="line">  <span class="number">49157</span>,      <span class="number">98317</span>,        <span class="number">196613</span>,      <span class="number">393241</span>,    <span class="number">786433</span>,</span><br><span class="line">  <span class="number">1572869</span>,    <span class="number">3145739</span>,      <span class="number">6291469</span>,     <span class="number">12582917</span>,  <span class="number">25165843</span>,</span><br><span class="line">  <span class="number">50331653</span>,   <span class="number">100663319</span>,    <span class="number">201326611</span>,   <span class="number">402653189</span>, <span class="number">805306457</span>, </span><br><span class="line">  <span class="number">1610612741</span>, <span class="number">3221225473ul</span>, <span class="number">4294967291ul</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在后续的 <code>sgi_STL</code> 版本后, 会根据编译器版本以及平台, 选择不同的质数数量以更好的适应不同平台.</p><p>由于涉及到 hashtable 后续的扩容问题, 所以提供了 <code> unsigned long __stl_next_prime(unsigned long n)</code> 函数来找到一个满足条件的质数. </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> __stl_next_prime(<span class="keyword">unsigned</span> <span class="keyword">long</span> n)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">long</span>* first = __stl_prime_list;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">long</span>* last = __stl_prime_list + __stl_num_primes;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">long</span>* pos = <span class="built_in">lower_bound</span>(first, last, n);</span><br><span class="line">  <span class="keyword">return</span> pos == last ? *(last - <span class="number">1</span>) : *pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关于扩容:</strong> 在这里设计者依旧采用了一个通过经验得到的判断,  当桶 <code>bucket</code> 中元素容量 &gt; 当前桶的大小时, 就要在上述的质数数组中寻找第一个不小于元素容量的质数重新作为桶的大小</p><p><strong>节点 node:</strong> 在桶的每一个位置采用链表的结构进行存储, 所以节点为链表节点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Value</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">hashtable_node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  __hashtable_node* next;</span><br><span class="line">  Value val;</span><br><span class="line">&#125;;  </span><br></pre></td></tr></table></figure><h3 id="hashtable-迭代器"><a href="#hashtable-迭代器" class="headerlink" title="hashtable 迭代器"></a>hashtable 迭代器</h3><p><code>hashtable</code> 迭代器是 <code>forward_iterator_tag</code> 类型, 正向迭代器, 所以不提供回退的功能, 也就是说它没有重载 <code>operator--</code></p><p><code>__hashtable_const_iterator</code> 和 <code>__hashtable_iterator</code> 除了内部数据设置为 const 外, 其他结构都是相同的, 这里只对后者进行分析</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">HashFcn</span>, <span class="keyword">class</span> <span class="title">ExtractKey</span>, <span class="keyword">class</span> <span class="title">EqualKey</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">hashtable_iterator</span> &#123;</span></span><br><span class="line">  <span class="keyword">typedef</span> hashtable&lt;Value, Key, HashFcn, ExtractKey, EqualKey, Alloc&gt;  hashtable;</span><br><span class="line">  <span class="keyword">typedef</span> __hashtable_iterator&lt;Value, Key, HashFcn, ExtractKey, EqualKey, Alloc&gt;</span><br><span class="line">          iterator;</span><br><span class="line">  <span class="keyword">typedef</span> __hashtable_const_iterator&lt;Value, Key, HashFcn,  ExtractKey, EqualKey, Alloc&gt;</span><br><span class="line">          const_iterator;</span><br><span class="line">  <span class="keyword">typedef</span> __hashtable_node&lt;Value&gt; node;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">typedef</span> forward_iterator_tag iterator_category;<span class="comment">// 正向迭代器</span></span><br><span class="line">  <span class="keyword">typedef</span> Value value_type;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span> difference_type;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">size_t</span> size_type;</span><br><span class="line">  <span class="keyword">typedef</span> Value&amp; reference;</span><br><span class="line">  <span class="keyword">typedef</span> Value* pointer;</span><br><span class="line"></span><br><span class="line">  node* cur;<span class="comment">// 定义节点</span></span><br><span class="line">  hashtable* ht;<span class="comment">// 定义哈希表指针</span></span><br><span class="line"></span><br><span class="line">  __hashtable_iterator(node* n, hashtable* tab) : <span class="built_in">cur</span>(n), <span class="built_in">ht</span>(tab) &#123;&#125;</span><br><span class="line">  __hashtable_iterator() &#123;&#125;</span><br><span class="line">  <span class="comment">// 重载指针</span></span><br><span class="line">  reference <span class="keyword">operator</span>*() <span class="keyword">const</span> &#123; <span class="keyword">return</span> cur-&gt;val; &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __SGI_STL_NO_ARROW_OPERATOR</span></span><br><span class="line">  pointer <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span> &#123; <span class="keyword">return</span> &amp;(<span class="keyword">operator</span>*()); &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __SGI_STL_NO_ARROW_OPERATOR */</span></span></span><br><span class="line"><span class="comment">// 重在++, 因为是正向迭代器, 所以没有--</span></span><br><span class="line">  iterator&amp; <span class="keyword">operator</span>++();</span><br><span class="line">  iterator <span class="keyword">operator</span>++(<span class="keyword">int</span>);</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> iterator&amp; it) <span class="keyword">const</span> &#123; <span class="keyword">return</span> cur == it.cur; &#125;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> iterator&amp; it) <span class="keyword">const</span> &#123; <span class="keyword">return</span> cur != it.cur; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于 <code>hashtable</code>  采用的是开链法来处理哈希冲突, 所以迭代器在找完一条链之后, 如何再进行 <code>operator++</code>, 这时就需要回到 <code>hashtable</code> , 所以在 hashtable 迭代器中需要有一个指向 <code>hashtable</code> 的指针</p><h3 id="hashtable-1"><a href="#hashtable-1" class="headerlink" title="hashtable"></a>hashtable</h3><p><strong>hashtable 类型定义</strong></p><p>模板参数含义:</p><ol><li>Value: 节点的实值类型</li><li>Key:    节点的键值类型</li><li>HashFcn: hash function 的类型</li><li>ExtractKey: 从节点中取出键值的方法 (函数或者仿函数)</li><li>EqualKey: 判断键值是否相同的方法 (函数或者仿函数)</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">HashFcn</span>, <span class="keyword">class</span> <span class="title">ExtractKey</span>, <span class="keyword">class</span> <span class="title">EqualKey</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hashtable</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">typedef</span> Key key_type;</span><br><span class="line">  <span class="keyword">typedef</span> Value value_type;</span><br><span class="line">  <span class="keyword">typedef</span> HashFcn hasher;</span><br><span class="line">  <span class="keyword">typedef</span> EqualKey key_equal;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">size_t</span>            size_type;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span>         difference_type;</span><br><span class="line">  <span class="keyword">typedef</span> value_type*       pointer;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">const</span> value_type* const_pointer;</span><br><span class="line">  <span class="keyword">typedef</span> value_type&amp;       reference;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">const</span> value_type&amp; const_reference;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里返回的都是仿函数</span></span><br><span class="line">  <span class="function">hasher <span class="title">hash_funct</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> hash; &#125;</span><br><span class="line">  <span class="function">key_equal <span class="title">key_eq</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> equals; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">// 这里定义的都是函数或者仿函数</span></span><br><span class="line">  hasher hash;</span><br><span class="line">  key_equal equals;</span><br><span class="line">  ExtractKey get_key;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">typedef</span> __hashtable_node&lt;Value&gt; node;</span><br><span class="line">  <span class="keyword">typedef</span> simple_alloc&lt;node, Alloc&gt; node_allocator;</span><br><span class="line"></span><br><span class="line">  vector&lt;node*,Alloc&gt; buckets;<span class="comment">// 以vector作为桶, node*</span></span><br><span class="line">  size_type num_elements;<span class="comment">// 哈希表中元素个数的计数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">typedef</span> __hashtable_iterator&lt;Value, Key, HashFcn, ExtractKey, EqualKey, Alloc&gt; iterator;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">typedef</span> __hashtable_const_iterator&lt;Value, Key, HashFcn, ExtractKey, EqualKey, Alloc&gt; const_iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代器定义为友元</span></span><br><span class="line">  <span class="keyword">friend</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">  __<span class="title">hashtable_iterator</span>&lt;</span>Value, Key, HashFcn, ExtractKey, EqualKey, Alloc&gt;;</span><br><span class="line">  <span class="keyword">friend</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">  __<span class="title">hashtable_const_iterator</span>&lt;</span>Value, Key, HashFcn, ExtractKey, EqualKey, Alloc&gt;;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>构造与析构函数</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">HashFcn</span>, <span class="keyword">class</span> <span class="title">ExtractKey</span>, <span class="keyword">class</span> <span class="title">EqualKey</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hashtable</span> &#123;</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 构造函数, 没有定义默认构造函数</span></span><br><span class="line">  <span class="built_in">hashtable</span>(size_type n, <span class="keyword">const</span> HashFcn&amp;  hf,<span class="keyword">const</span> EqualKey&amp;   eql,<span class="keyword">const</span> ExtractKey&amp; ext)</span><br><span class="line">    : <span class="built_in">hash</span>(hf), <span class="built_in">equals</span>(eql), <span class="built_in">get_key</span>(ext), <span class="built_in">num_elements</span>(<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">initialize_buckets</span>(n);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">hashtable</span>(size_type n, <span class="keyword">const</span> HashFcn&amp;  hf, <span class="keyword">const</span> EqualKey&amp;   eql)</span><br><span class="line">    : <span class="built_in">hash</span>(hf), <span class="built_in">equals</span>(eql), <span class="built_in">get_key</span>(<span class="built_in">ExtractKey</span>()), <span class="built_in">num_elements</span>(<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">initialize_buckets</span>(n);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 拷贝构造函数</span></span><br><span class="line">  <span class="built_in">hashtable</span>(<span class="keyword">const</span> hashtable&amp; ht)</span><br><span class="line">    : <span class="built_in">hash</span>(ht.hash), <span class="built_in">equals</span>(ht.equals), <span class="built_in">get_key</span>(ht.get_key), <span class="built_in">num_elements</span>(<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">copy_from</span>(ht);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 析构函数</span></span><br><span class="line">  ~<span class="built_in">hashtable</span>() &#123; <span class="built_in">clear</span>(); &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>基本属性获取</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">HashFcn</span>, <span class="keyword">class</span> <span class="title">ExtractKey</span>, <span class="keyword">class</span> <span class="title">EqualKey</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hashtable</span> &#123;</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">size_type <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> num_elements; &#125;</span><br><span class="line">  <span class="function">size_type <span class="title">max_size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">size_type</span>(<span class="number">-1</span>); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">size</span>() == <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换, 并不是交换所有数据, 只是交换了其指针指向和个数</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(hashtable&amp; ht)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    __STD::<span class="built_in">swap</span>(hash, ht.hash);</span><br><span class="line">    __STD::<span class="built_in">swap</span>(equals, ht.equals);</span><br><span class="line">    __STD::<span class="built_in">swap</span>(get_key, ht.get_key);</span><br><span class="line">    buckets.<span class="built_in">swap</span>(ht.buckets);</span><br><span class="line">    __STD::<span class="built_in">swap</span>(num_elements, ht.num_elements);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">iterator <span class="title">begin</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123; </span><br><span class="line">    <span class="keyword">for</span> (size_type n = <span class="number">0</span>; n &lt; buckets.<span class="built_in">size</span>(); ++n)</span><br><span class="line">    <span class="comment">// 从头遍历桶, 如果有不空的链表存在, 就返回该链表的第一个元素</span></span><br><span class="line">      <span class="keyword">if</span> (buckets[n])</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iterator</span>(buckets[n], <span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// 没有元素就返回end.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">end</span>();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// end返回0</span></span><br><span class="line">  <span class="function">iterator <span class="title">end</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">iterator</span>(<span class="number">0</span>, <span class="keyword">this</span>); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">const_iterator <span class="title">begin</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (size_type n = <span class="number">0</span>; n &lt; buckets.<span class="built_in">size</span>(); ++n)</span><br><span class="line">      <span class="keyword">if</span> (buckets[n])</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">const_iterator</span>(buckets[n], <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">end</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">const_iterator <span class="title">end</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">const_iterator</span>(<span class="number">0</span>, <span class="keyword">this</span>); &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 返回桶的大小</span></span><br><span class="line">  <span class="function">size_type <span class="title">bucket_count</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> buckets.<span class="built_in">size</span>(); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">size_type <span class="title">max_bucket_count</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> __stl_prime_list[__stl_num_primes - <span class="number">1</span>]; &#125; </span><br><span class="line"></span><br><span class="line"> <span class="comment">// 返回指定位置的节点的个数</span></span><br><span class="line">  <span class="function">size_type <span class="title">elems_in_bucket</span><span class="params">(size_type bucket)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    size_type result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (node* cur = buckets[bucket]; cur; cur = cur-&gt;next)</span><br><span class="line">      result += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="hashtable-具体方法"><a href="#hashtable-具体方法" class="headerlink" title="hashtable 具体方法"></a>hashtable 具体方法</h3><p><strong>重载操作符</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">HashFcn</span>, <span class="keyword">class</span> <span class="title">ExtractKey</span>, <span class="keyword">class</span> <span class="title">EqualKey</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hashtable</span> &#123;</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  hashtable&amp; <span class="keyword">operator</span>= (<span class="keyword">const</span> hashtable&amp; ht)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (&amp;ht != <span class="keyword">this</span>) &#123;</span><br><span class="line">      <span class="built_in">clear</span>();<span class="comment">// 清除原表中的数据</span></span><br><span class="line">      <span class="comment">// 重新进行赋值</span></span><br><span class="line">      hash = ht.hash;</span><br><span class="line">      equals = ht.equals;</span><br><span class="line">      get_key = ht.get_key;</span><br><span class="line">      <span class="built_in">copy_from</span>(ht);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">bool</span></span><br><span class="line">  <span class="keyword">operator</span>== __STL_NULL_TMPL_ARGS (<span class="keyword">const</span> hashtable&amp;, <span class="keyword">const</span> hashtable&amp;);</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于 iterator++ 操作需要使用到 hashtable 的成员, 所以只能在定义完成 hashtable 时才能</span></span><br><span class="line"><span class="comment">// 实现 operator++</span></span><br><span class="line"><span class="comment">// 重载++</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">V</span>, <span class="keyword">class</span> <span class="title">K</span>, <span class="keyword">class</span> <span class="title">HF</span>, <span class="keyword">class</span> <span class="title">ExK</span>, <span class="keyword">class</span> <span class="title">EqK</span>, <span class="keyword">class</span> <span class="title">A</span>&gt;</span></span><br><span class="line">__hashtable_iterator&lt;V, K, HF, ExK, EqK, A&gt;&amp;</span><br><span class="line">__hashtable_iterator&lt;V, K, HF, ExK, EqK, A&gt;::<span class="keyword">operator</span>++()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> node* old = cur;</span><br><span class="line">  cur = cur-&gt;next;</span><br><span class="line">    <span class="comment">// cur指向了NULL</span></span><br><span class="line">  <span class="keyword">if</span> (!cur) &#123;</span><br><span class="line">    size_type bucket = ht-&gt;<span class="built_in">bkt_num</span>(old-&gt;val);</span><br><span class="line">      <span class="comment">// 寻找桶中下一个链表不为空的链表的第一个元素</span></span><br><span class="line">    <span class="keyword">while</span> (!cur &amp;&amp; ++bucket &lt; ht-&gt;buckets.<span class="built_in">size</span>())</span><br><span class="line">      cur = ht-&gt;buckets[bucket];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">V</span>, <span class="keyword">class</span> <span class="title">K</span>, <span class="keyword">class</span> <span class="title">HF</span>, <span class="keyword">class</span> <span class="title">ExK</span>, <span class="keyword">class</span> <span class="title">EqK</span>, <span class="keyword">class</span> <span class="title">A</span>&gt;</span></span><br><span class="line"><span class="keyword">inline</span> __hashtable_iterator&lt;V, K, HF, ExK, EqK, A&gt;</span><br><span class="line">__hashtable_iterator&lt;V, K, HF, ExK, EqK, A&gt;::<span class="keyword">operator</span>++(<span class="keyword">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">  iterator tmp = *<span class="keyword">this</span>;</span><br><span class="line">  ++*<span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">V</span>, <span class="keyword">class</span> <span class="title">K</span>, <span class="keyword">class</span> <span class="title">HF</span>, <span class="keyword">class</span> <span class="title">Ex</span>, <span class="keyword">class</span> <span class="title">Eq</span>, <span class="keyword">class</span> <span class="title">A</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> hashtable&lt;V, K, HF, Ex, Eq, A&gt;&amp; ht1,</span><br><span class="line">                <span class="keyword">const</span> hashtable&lt;V, K, HF, Ex, Eq, A&gt;&amp; ht2)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">typename</span> hashtable&lt;V, K, HF, Ex, Eq, A&gt;::node node;</span><br><span class="line">    <span class="comment">// 先判断桶的大小</span></span><br><span class="line">  <span class="keyword">if</span> (ht1.buckets.<span class="built_in">size</span>() != ht2.buckets.<span class="built_in">size</span>())</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 其次比较桶中每个指向的链表</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; ht1.buckets.<span class="built_in">size</span>(); ++n) &#123;</span><br><span class="line">    node* cur1 = ht1.buckets[n];</span><br><span class="line">    node* cur2 = ht2.buckets[n];</span><br><span class="line">      <span class="comment">// 比较链表中的元素也是否相等</span></span><br><span class="line">    <span class="keyword">for</span> ( ; cur1 &amp;&amp; cur2 &amp;&amp; cur1-&gt;val == cur2-&gt;val;</span><br><span class="line">          cur1 = cur1-&gt;next, cur2 = cur2-&gt;next)</span><br><span class="line">      &#123;&#125;</span><br><span class="line">      <span class="comment">// 有一个链表还有剩余的元素就表示不相等</span></span><br><span class="line">    <span class="keyword">if</span> (cur1 || cur2)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p><strong>重新分配 resize(int)</strong></p><p>由于上文中说到,  当 <strong>hashtable</strong> 中的元素个数超过 <strong>桶 bucket</strong> 大小时, 会重新给 hashtable 分配更大的容量并将所有元素重新分配到新的 <strong>bucket</strong> 里, 对于设计者来说, 这是一个经验之谈. </p><p>但是扩容也带来了性能的不稳定性, 一旦出现大量重复插入的数据, 将导致对于内存和时间的浪费,  如果打过 <code>codeforces</code> 的同学可以知道, <code>unordered_map</code> 会被 hack 掉.  所以对于特定的数据或者场景, 还是慎用 <code>hashtable</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">V</span>, <span class="keyword">class</span> <span class="title">K</span>, <span class="keyword">class</span> <span class="title">HF</span>, <span class="keyword">class</span> <span class="title">Ex</span>, <span class="keyword">class</span> <span class="title">Eq</span>, <span class="keyword">class</span> <span class="title">A</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> hashtable&lt;V, K, HF, Ex, Eq, A&gt;::<span class="built_in">resize</span>(size_type num_elements_hint)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> size_type old_n = buckets.<span class="built_in">size</span>();</span><br><span class="line">   <span class="comment">// 如果元素个数大于 bucket 最大值, 那么就要扩容并给元素重新分配 bucket</span></span><br><span class="line">  <span class="keyword">if</span> (num_elements_hint &gt; old_n) &#123;</span><br><span class="line">    <span class="keyword">const</span> size_type n = <span class="built_in">next_size</span>(num_elements_hint);</span><br><span class="line">    <span class="keyword">if</span> (n &gt; old_n) &#123;</span><br><span class="line">      <span class="function">vector&lt;node*, A&gt; <span class="title">tmp</span><span class="params">(n, (node*) <span class="number">0</span>)</span></span>;</span><br><span class="line">      __STL_TRY &#123;</span><br><span class="line">        <span class="comment">// 将原来桶中的元素重新 rehash 到新桶中  </span></span><br><span class="line">        <span class="keyword">for</span> (size_type bucket = <span class="number">0</span>; bucket &lt; old_n; ++bucket) &#123;</span><br><span class="line">          node* first = buckets[bucket];</span><br><span class="line">          <span class="keyword">while</span> (first) &#123;</span><br><span class="line">            size_type new_bucket = <span class="built_in">bkt_num</span>(first-&gt;val, n);</span><br><span class="line">            buckets[bucket] = first-&gt;next;</span><br><span class="line">            first-&gt;next = tmp[new_bucket];</span><br><span class="line">            tmp[new_bucket] = first;</span><br><span class="line">            first = buckets[bucket];          </span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        buckets.<span class="built_in">swap</span>(tmp);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="meta">#         <span class="meta-keyword">ifdef</span> __STL_USE_EXCEPTIONS</span></span><br><span class="line">      <span class="built_in"><span class="keyword">catch</span></span>(...) &#123;</span><br><span class="line">        <span class="keyword">for</span> (size_type bucket = <span class="number">0</span>; bucket &lt; tmp.<span class="built_in">size</span>(); ++bucket) &#123;</span><br><span class="line">          <span class="keyword">while</span> (tmp[bucket]) &#123;</span><br><span class="line">            node* next = tmp[bucket]-&gt;next;</span><br><span class="line">            <span class="built_in">delete_node</span>(tmp[bucket]);</span><br><span class="line">            tmp[bucket] = next;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span>;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="meta">#         <span class="meta-keyword">endif</span> <span class="comment">/* __STL_USE_EXCEPTIONS */</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>插入</strong></p><p><code>hashtable</code> 也有 <code>insert_equal</code> 和 <code>insert_unique</code> 两种插入方式</p><ul><li>insert_equal: 插入返回的是插入位置的迭代器,  且插入时, 会将所有相同值的节点全部放在一起</li><li>insert_unique: 插入返回的是一个 <code>pair</code> first 为插入后新元素的迭代器, second 为 bool 表示是否插入成功</li></ul><p>同时提供了 <code>ForwardIterator</code> 和 <code>InputIterator</code> 的类型迭代器相对应的不同插入方式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">HashFcn</span>, <span class="keyword">class</span> <span class="title">ExtractKey</span>, <span class="keyword">class</span> <span class="title">EqualKey</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hashtable</span> &#123;</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"><span class="comment">// 不可重复插入</span></span><br><span class="line">  <span class="function">pair&lt;iterator, <span class="keyword">bool</span>&gt; <span class="title">insert_unique</span><span class="params">(<span class="keyword">const</span> value_type&amp; obj)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">resize</span>(num_elements + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">insert_unique_noresize</span>(obj);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 可重复插入</span></span><br><span class="line">  <span class="function">iterator <span class="title">insert_equal</span><span class="params">(<span class="keyword">const</span> value_type&amp; obj)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">resize</span>(num_elements + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">insert_equal_noresize</span>(obj);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 不可重复插入返回的是pair结构</span></span><br><span class="line">  <span class="function">pair&lt;iterator, <span class="keyword">bool</span>&gt; <span class="title">insert_unique_noresize</span><span class="params">(<span class="keyword">const</span> value_type&amp; obj)</span></span>;</span><br><span class="line">  <span class="comment">// 可重复插入返回的是迭代器</span></span><br><span class="line">  <span class="function">iterator <span class="title">insert_equal_noresize</span><span class="params">(<span class="keyword">const</span> value_type&amp; obj)</span></span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 以下是insert的各个重载函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STL_MEMBER_TEMPLATES</span></span><br><span class="line"><span class="comment">// 针对InputIterator的迭代器</span></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>&gt;</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">insert_unique</span><span class="params">(InputIterator f, InputIterator l)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">insert_unique</span>(f, l, <span class="built_in">iterator_category</span>(f));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>&gt;</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">insert_equal</span><span class="params">(InputIterator f, InputIterator l)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">insert_equal</span>(f, l, <span class="built_in">iterator_category</span>(f));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>&gt;</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">insert_unique</span><span class="params">(InputIterator f, InputIterator l,input_iterator_tag)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( ; f != l; ++f)</span><br><span class="line">      <span class="built_in">insert_unique</span>(*f);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>&gt;</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">insert_equal</span><span class="params">(InputIterator f, InputIterator l,input_iterator_tag)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( ; f != l; ++f)</span><br><span class="line">      <span class="built_in">insert_equal</span>(*f);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 针对ForwardIterator类型的迭代器, 一个个进行插入</span></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator</span>&gt;</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">insert_unique</span><span class="params">(ForwardIterator f, ForwardIterator l,forward_iterator_tag)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    size_type n = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">distance</span>(f, l, n);</span><br><span class="line">    <span class="built_in">resize</span>(num_elements + n);</span><br><span class="line">    <span class="keyword">for</span> ( ; n &gt; <span class="number">0</span>; --n, ++f)</span><br><span class="line">      <span class="built_in">insert_unique_noresize</span>(*f);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator</span>&gt;</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">insert_equal</span><span class="params">(ForwardIterator f, ForwardIterator l,forward_iterator_tag)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    size_type n = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">distance</span>(f, l, n);</span><br><span class="line">    <span class="built_in">resize</span>(num_elements + n);</span><br><span class="line">    <span class="keyword">for</span> ( ; n &gt; <span class="number">0</span>; --n, ++f)</span><br><span class="line">      <span class="built_in">insert_equal_noresize</span>(*f);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* __STL_MEMBER_TEMPLATES */</span></span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">insert_unique</span><span class="params">(<span class="keyword">const</span> value_type* f, <span class="keyword">const</span> value_type* l)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    size_type n = l - f;</span><br><span class="line">    <span class="built_in">resize</span>(num_elements + n);</span><br><span class="line">    <span class="keyword">for</span> ( ; n &gt; <span class="number">0</span>; --n, ++f)</span><br><span class="line">      <span class="built_in">insert_unique_noresize</span>(*f);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">insert_equal</span><span class="params">(<span class="keyword">const</span> value_type* f, <span class="keyword">const</span> value_type* l)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    size_type n = l - f;</span><br><span class="line">    <span class="built_in">resize</span>(num_elements + n);</span><br><span class="line">    <span class="keyword">for</span> ( ; n &gt; <span class="number">0</span>; --n, ++f)</span><br><span class="line">      <span class="built_in">insert_equal_noresize</span>(*f);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">insert_unique</span><span class="params">(const_iterator f, const_iterator l)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    size_type n = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">distance</span>(f, l, n);</span><br><span class="line">    <span class="built_in">resize</span>(num_elements + n);</span><br><span class="line">    <span class="keyword">for</span> ( ; n &gt; <span class="number">0</span>; --n, ++f)</span><br><span class="line">      <span class="built_in">insert_unique_noresize</span>(*f);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">insert_equal</span><span class="params">(const_iterator f, const_iterator l)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    size_type n = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">distance</span>(f, l, n);</span><br><span class="line">    <span class="built_in">resize</span>(num_elements + n);</span><br><span class="line">    <span class="keyword">for</span> ( ; n &gt; <span class="number">0</span>; --n, ++f)</span><br><span class="line">      <span class="built_in">insert_equal_noresize</span>(*f);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/*__STL_MEMBER_TEMPLATES */</span></span></span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以发现, 上面所有的方法都调用了 <code>insert_***_noresize</code></p><ul><li><code>insert_unique_noresize</code> 不可重复插入</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">V</span>, <span class="keyword">class</span> <span class="title">K</span>, <span class="keyword">class</span> <span class="title">HF</span>, <span class="keyword">class</span> <span class="title">Ex</span>, <span class="keyword">class</span> <span class="title">Eq</span>, <span class="keyword">class</span> <span class="title">A</span>&gt;</span></span><br><span class="line">pair&lt;<span class="keyword">typename</span> hashtable&lt;V, K, HF, Ex, Eq, A&gt;::iterator, <span class="keyword">bool</span>&gt; </span><br><span class="line">hashtable&lt;V, K, HF, Ex, Eq, A&gt;::<span class="built_in">insert_unique_noresize</span>(<span class="keyword">const</span> value_type&amp; obj)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 确定插入的桶的具体位置</span></span><br><span class="line">  <span class="keyword">const</span> size_type n = <span class="built_in">bkt_num</span>(obj);</span><br><span class="line">  node* first = buckets[n];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将元素插入到链表中</span></span><br><span class="line">  <span class="keyword">for</span> (node* cur = first; cur; cur = cur-&gt;next) </span><br><span class="line">      <span class="comment">// 判断该元素在链表中是否已经存在了</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">equals</span>(<span class="built_in">get_key</span>(cur-&gt;val), <span class="built_in">get_key</span>(obj)))</span><br><span class="line">      <span class="comment">// 存在pair第二个参数返回false</span></span><br><span class="line">      <span class="keyword">return</span> pair&lt;iterator, <span class="keyword">bool</span>&gt;(<span class="built_in">iterator</span>(cur, <span class="keyword">this</span>), <span class="literal">false</span>);</span><br><span class="line">  <span class="comment">// 元素不存在链表中, 将它插入到链表的头部</span></span><br><span class="line">  node* tmp = <span class="built_in">new_node</span>(obj);</span><br><span class="line">  tmp-&gt;next = first;</span><br><span class="line">  buckets[n] = tmp;</span><br><span class="line">  ++num_elements;<span class="comment">// 计数++</span></span><br><span class="line">  <span class="keyword">return</span> pair&lt;iterator, <span class="keyword">bool</span>&gt;(<span class="built_in">iterator</span>(tmp, <span class="keyword">this</span>), <span class="literal">true</span>);<span class="comment">// 返回pair结构</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>insert_equal_noresize</code>可重复插入</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">V</span>, <span class="keyword">class</span> <span class="title">K</span>, <span class="keyword">class</span> <span class="title">HF</span>, <span class="keyword">class</span> <span class="title">Ex</span>, <span class="keyword">class</span> <span class="title">Eq</span>, <span class="keyword">class</span> <span class="title">A</span>&gt;</span></span><br><span class="line"><span class="keyword">typename</span> hashtable&lt;V, K, HF, Ex, Eq, A&gt;::iterator </span><br><span class="line">hashtable&lt;V, K, HF, Ex, Eq, A&gt;::<span class="built_in">insert_equal_noresize</span>(<span class="keyword">const</span> value_type&amp; obj)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 确定插入的桶的具体位置</span></span><br><span class="line">  <span class="keyword">const</span> size_type n = <span class="built_in">bkt_num</span>(obj);</span><br><span class="line">  node* first = buckets[n];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将元素插入到链表中</span></span><br><span class="line">  <span class="keyword">for</span> (node* cur = first; cur; cur = cur-&gt;next) </span><br><span class="line">      <span class="comment">// 判断该元素在链表中是否已经存在了, 则将元素插入到重复数据的位置</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">equals</span>(<span class="built_in">get_key</span>(cur-&gt;val), <span class="built_in">get_key</span>(obj))) &#123;</span><br><span class="line">      node* tmp = <span class="built_in">new_node</span>(obj);</span><br><span class="line">      tmp-&gt;next = cur-&gt;next;</span><br><span class="line">      cur-&gt;next = tmp;</span><br><span class="line">      ++num_elements;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">iterator</span>(tmp, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 元素不存在链表中, 将它插入到链表的头部</span></span><br><span class="line">  node* tmp = <span class="built_in">new_node</span>(obj);</span><br><span class="line">  tmp-&gt;next = first;</span><br><span class="line">  buckets[n] = tmp;</span><br><span class="line">  ++num_elements;<span class="comment">// 计数++</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">iterator</span>(tmp, <span class="keyword">this</span>);<span class="comment">// 返回pair结构</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查找</strong></p><ul><li><code>find</code>: 单纯的查找</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">HashFcn</span>, <span class="keyword">class</span> <span class="title">ExtractKey</span>, <span class="keyword">class</span> <span class="title">EqualKey</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hashtable</span> &#123;</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"><span class="comment">// 找到指定的桶的位置再在链表中进行遍历</span></span><br><span class="line">  <span class="function">iterator <span class="title">find</span><span class="params">(<span class="keyword">const</span> key_type&amp; key)</span> </span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    size_type n = <span class="built_in">bkt_num_key</span>(key);</span><br><span class="line">    node* first;</span><br><span class="line">    <span class="comment">// 找到指定的位置并返回</span></span><br><span class="line">    <span class="keyword">for</span> ( first = buckets[n];first &amp;&amp; !<span class="built_in">equals</span>(<span class="built_in">get_key</span>(first-&gt;val), key);  first = first-&gt;next)</span><br><span class="line">      &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iterator</span>(first, <span class="keyword">this</span>);</span><br><span class="line">  &#125; </span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>find_or_insert</code>: 如果找到了, 就返回该元素数据, 反之就将指定元素插入到链表的头部, 再返回元素默认数据</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">V</span>, <span class="keyword">class</span> <span class="title">K</span>, <span class="keyword">class</span> <span class="title">HF</span>, <span class="keyword">class</span> <span class="title">Ex</span>, <span class="keyword">class</span> <span class="title">Eq</span>, <span class="keyword">class</span> <span class="title">A</span>&gt;</span></span><br><span class="line"><span class="keyword">typename</span> hashtable&lt;V, K, HF, Ex, Eq, A&gt;::reference </span><br><span class="line">hashtable&lt;V, K, HF, Ex, Eq, A&gt;::<span class="built_in">find_or_insert</span>(<span class="keyword">const</span> value_type&amp; obj)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">resize</span>(num_elements + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  size_type n = <span class="built_in">bkt_num</span>(obj);</span><br><span class="line">  node* first = buckets[n];</span><br><span class="line"><span class="comment">// 如果找到了就返回该元素的数据</span></span><br><span class="line">  <span class="keyword">for</span> (node* cur = first; cur; cur = cur-&gt;next)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">equals</span>(<span class="built_in">get_key</span>(cur-&gt;val), <span class="built_in">get_key</span>(obj)))</span><br><span class="line">      <span class="keyword">return</span> cur-&gt;val;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有找到指定元素就将其插入到链表的头部</span></span><br><span class="line">  node* tmp = <span class="built_in">new_node</span>(obj);</span><br><span class="line">  tmp-&gt;next = first;</span><br><span class="line">  buckets[n] = tmp;</span><br><span class="line">  ++num_elements;</span><br><span class="line">  <span class="keyword">return</span> tmp-&gt;val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>删除</strong></p><p>erase有很多个重载函数, 这里就具体分析一个</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">HashFcn</span>, <span class="keyword">class</span> <span class="title">ExtractKey</span>, <span class="keyword">class</span> <span class="title">EqualKey</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hashtable</span> &#123;</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">  <span class="function">size_type <span class="title">erase</span><span class="params">(<span class="keyword">const</span> key_type&amp; key)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">const</span> iterator&amp; it)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(iterator first, iterator last)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">const</span> const_iterator&amp; it)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(const_iterator first, const_iterator last)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(size_type num_elements_hint)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">V</span>, <span class="keyword">class</span> <span class="title">K</span>, <span class="keyword">class</span> <span class="title">HF</span>, <span class="keyword">class</span> <span class="title">Ex</span>, <span class="keyword">class</span> <span class="title">Eq</span>, <span class="keyword">class</span> <span class="title">A</span>&gt;</span></span><br><span class="line"><span class="keyword">typename</span> hashtable&lt;V, K, HF, Ex, Eq, A&gt;::size_type </span><br><span class="line">hashtable&lt;V, K, HF, Ex, Eq, A&gt;::<span class="built_in">erase</span>(<span class="keyword">const</span> key_type&amp; key)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> size_type n = <span class="built_in">bkt_num_key</span>(key);</span><br><span class="line">  node* first = buckets[n];</span><br><span class="line">  size_type erased = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到key具体在哪一个链表</span></span><br><span class="line">  <span class="keyword">if</span> (first) &#123;</span><br><span class="line">    node* cur = first;</span><br><span class="line">    node* next = cur-&gt;next;</span><br><span class="line">      <span class="comment">// 遍历链表</span></span><br><span class="line">    <span class="keyword">while</span> (next) &#123;</span><br><span class="line">        <span class="comment">// 元素在中间</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">equals</span>(<span class="built_in">get_key</span>(next-&gt;val), key)) &#123;</span><br><span class="line">        cur-&gt;next = next-&gt;next;</span><br><span class="line">        <span class="built_in">delete_node</span>(next);</span><br><span class="line">        next = cur-&gt;next;</span><br><span class="line">        ++erased;</span><br><span class="line">        --num_elements;</span><br><span class="line">      &#125;</span><br><span class="line">        <span class="comment">// 在头部</span></span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        cur = next;</span><br><span class="line">        next = cur-&gt;next;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="comment">// 析构, 释放</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">equals</span>(<span class="built_in">get_key</span>(first-&gt;val), key)) &#123;</span><br><span class="line">      buckets[n] = first-&gt;next;</span><br><span class="line">      <span class="built_in">delete_node</span>(first);</span><br><span class="line">      ++erased;</span><br><span class="line">      --num_elements;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> erased;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">V</span>, <span class="keyword">class</span> <span class="title">K</span>, <span class="keyword">class</span> <span class="title">HF</span>, <span class="keyword">class</span> <span class="title">Ex</span>, <span class="keyword">class</span> <span class="title">Eq</span>, <span class="keyword">class</span> <span class="title">A</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> </span><br><span class="line">hashtable&lt;V, K, HF, Ex, Eq, A&gt;::<span class="built_in">erase_bucket</span>(<span class="keyword">const</span> size_type n, node* last)</span><br><span class="line">&#123;</span><br><span class="line">  node* cur = buckets[n];</span><br><span class="line">  <span class="keyword">while</span> (cur != last) &#123;</span><br><span class="line">    node* next = cur-&gt;next;</span><br><span class="line">    <span class="built_in">delete_node</span>(cur);</span><br><span class="line">    cur = next;</span><br><span class="line">    buckets[n] = cur;</span><br><span class="line">    --num_elements;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">V</span>, <span class="keyword">class</span> <span class="title">K</span>, <span class="keyword">class</span> <span class="title">HF</span>, <span class="keyword">class</span> <span class="title">Ex</span>, <span class="keyword">class</span> <span class="title">Eq</span>, <span class="keyword">class</span> <span class="title">A</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> hashtable&lt;V, K, HF, Ex, Eq, A&gt;::<span class="built_in">clear</span>()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span> (size_type i = <span class="number">0</span>; i &lt; buckets.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">    node* cur = buckets[i];</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="number">0</span>) &#123;</span><br><span class="line">      node* next = cur-&gt;next;</span><br><span class="line">      <span class="built_in">delete_node</span>(cur);</span><br><span class="line">      cur = next;</span><br><span class="line">    &#125;</span><br><span class="line">    buckets[i] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  num_elements = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以发现, 其操作本质还是找到对应的桶后, 进行链表操作.</p><p><strong>复制</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">V</span>, <span class="keyword">class</span> <span class="title">K</span>, <span class="keyword">class</span> <span class="title">HF</span>, <span class="keyword">class</span> <span class="title">Ex</span>, <span class="keyword">class</span> <span class="title">Eq</span>, <span class="keyword">class</span> <span class="title">A</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> hashtable&lt;V, K, HF, Ex, Eq, A&gt;::<span class="built_in">copy_from</span>(<span class="keyword">const</span> hashtable&amp; ht)</span><br><span class="line">&#123;</span><br><span class="line">  buckets.<span class="built_in">clear</span>(); <span class="comment">//把元素全部删除</span></span><br><span class="line">  buckets.<span class="built_in">reserve</span>(ht.buckets.<span class="built_in">size</span>());<span class="comment">// 重新调整桶的大小</span></span><br><span class="line">    <span class="comment">// 重新插入</span></span><br><span class="line">  buckets.<span class="built_in">insert</span>(buckets.<span class="built_in">end</span>(), ht.buckets.<span class="built_in">size</span>(), (node*) <span class="number">0</span>);</span><br><span class="line">  __STL_TRY &#123;</span><br><span class="line">      <span class="comment">// 插入</span></span><br><span class="line">    <span class="keyword">for</span> (size_type i = <span class="number">0</span>; i &lt; ht.buckets.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">const</span> node* cur = ht.buckets[i]) &#123;</span><br><span class="line">        node* copy = <span class="built_in">new_node</span>(cur-&gt;val);</span><br><span class="line">        buckets[i] = copy;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (node* next = cur-&gt;next; next; cur = next, next = cur-&gt;next) &#123;</span><br><span class="line">          copy-&gt;next = <span class="built_in">new_node</span>(next-&gt;val);</span><br><span class="line">          copy = copy-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    num_elements = ht.num_elements;</span><br><span class="line">  &#125;</span><br><span class="line">  __STL_UNWIND(<span class="built_in">clear</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p><code>hashtbale</code> 选用开链法来处理 hash 冲突</p></li><li><p>采用质数作为桶的容量, 并在元素个数大于桶大小时扩容并进行 rehash</p></li><li><p>与 <code>RB-tree</code>:</p><ol><li>再插入过程中, 前者平均是 O(1), 后者为 O(nlogn)</li><li>前者插入是无序的, 后者是有序的</li><li>前者桶满后效率很低, 后者不会考虑到满</li><li>两者都实现了可重复和不可重复</li><li>前者正向迭代器, 没有 <code>operator--</code>, 后者迭代器实现了 <code>operator--</code></li></ol></li><li><p>至于 <strong>hash function</strong> ,  又其他头文件定义, hashtable 只是进行调用, 并不属于 hashtable 容器, 所以不再进行</p><p>分析, 且对于一些类型, 标准库并没有提供 <code>hash function</code> <strong>(标准库不可能提前知道你要建立的类型是什么)</strong> 需要用户自己去定义 <code>hash function</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> STL 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL, hashtable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POST 和 GET 的区别</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/HTTP/POST%20%E5%92%8C%20GET%20%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/HTTP/POST%20%E5%92%8C%20GET%20%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="POST-和-GET-的区别"><a href="#POST-和-GET-的区别" class="headerlink" title="POST 和 GET 的区别"></a>POST 和 GET 的区别</h1><p><a href="https://juejin.cn/post/7001782277063573518">转自</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>无论是 POST 还是 GET 请求, 都是基于 HTTP 的, 而 HTTP 协议是 TCP/IP 协议族的应用层协议</p><h2 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h2><ul><li><strong>GET: 获取资源</strong>, 用来请求访问已被 URI (同意资源标识符, 和 URL 是包含和被包含关系) 识别的资源</li><li><strong>POST:  用来传输实体的主体</strong>, GET 也可以实现, 但是一般不使用</li><li>**PUT: 传输文件, ** 但是鉴于 PUT 方法本身不带验证机制, 任何人都可以上传文件, 存在安全性问题, 因此网站一般都不使用该方法</li><li><strong>HEAD: 获得报文首部</strong>, 和 GET 请求一样, 只是不返回报文主体部分.</li><li><strong>DELETE: 删除文件</strong>, 同样不带验证机制, 存在安全性问题</li><li><strong>OPTIONS: 询问指定的请求 URI 支持哪些方法</strong></li><li><strong>CONNECT: 要求在与代理服务器通信时建立隧道</strong>, 实现隧道协议进行 TCP 通信</li></ul><h2 id="GET-和-POST"><a href="#GET-和-POST" class="headerlink" title="GET 和 POST"></a>GET 和 POST</h2><ul><li>本质上都 <strong>TCP 连接</strong>, 并无差别</li><li>由于 **HTTP 的规定和浏览器/服务器的限制, ** 导致其在实际应用过程中会体现出一些区别</li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>GET 在浏览器回退时是无害的, 而 POST 会再次提交请求</li><li>GET 产生的 URL 地址可以被 Bookmark, 而 POST 不可以</li><li>GET 请求会被浏览器主动 cache, 而 POST 不会, 除非手动设置</li><li>GET 请求只能进行 URL 编码, 而 POST 支持多种编码方式.</li><li>GET 请求的参数会被完整保留在浏览器历史记录里, 而 POST 中的参数不会被保留</li><li><strong>GET 请求在 URL 中传送的参数是有长度限制的, 而 POST 没有</strong></li><li>对参数的数据类型, GET 只接受 ASCII 字符, 而 POST 没有限制</li><li><strong>GET 比 POST 更不安全</strong>, 因为参数直接暴露在 URL 上, 所以不能用来传递敏感信息</li><li>GET 参数通过 URL 传递, POST 则放在 Request body 中</li></ul><h3 id="参数长度"><a href="#参数长度" class="headerlink" title="参数长度"></a>参数长度</h3><p>GET 请求长度最多 <strong>1024kb</strong>, POST 对请求数据<strong>没有限制</strong></p><p>HTTP 协议没有 Body 和 URL 的长度限制, POST 对请求数据<strong>没有限制</strong></p><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p>POST 比 GET 安全, 因为数据在地址栏上不可见, 然而, 从传输的角度来说, 其都是不安全的, 因为 HTTP 在网络上都是明文传输, 只要在网络节点上抓包,  就可以完整地获取数据报文.</p><p>只有使用 HTTPS 才能加密安全</p><h2 id="POST-与-GET-小结"><a href="#POST-与-GET-小结" class="headerlink" title="POST 与 GET 小结"></a>POST 与 GET 小结</h2><ul><li><p><strong>参数长度:</strong> GET 请求长度最多 1024 kb, POST 对请求数据没有限制</p></li><li><p>**请求参数: ** GET 请求参数是通过 URL 传递的, 多个参数以 &amp; 连接, POST 请求放在 request body 中</p></li><li><p><strong>请求缓存:</strong>  GET 会请求缓存, 而 POST 请求不会, 除非手动设置</p></li><li><p><strong>收藏为书签:</strong> GET 请求支持, POST 请求不支持</p></li><li><p><strong>安全性:</strong> POST 比 GET 安全, GET 请求在浏览器回退时是无害的, 而 POST 会再次请求</p></li><li><p><strong>历史记录:</strong> GET 请求参数会被完整保留在浏览器历史记录里, 而 POST 中的参数不会被保留</p></li><li><p><strong>编码方式:</strong> GET 请求只能进行 URL 编码, 而 POST 支持多种编码方式</p></li><li><p>对参数的数据类型: GET 只接受 ASCII 字符, 而 POST 没有限制</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> post, get </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 编译器中的优化</title>
      <link href="/C/C++-%E7%BC%96%E8%AF%91%E5%99%A8%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8C%96/"/>
      <url>/C/C++-%E7%BC%96%E8%AF%91%E5%99%A8%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="C-编译器中的优化"><a href="#C-编译器中的优化" class="headerlink" title="C++ 编译器中的优化"></a>C++ 编译器中的优化</h1><ul><li><p>原文 <a href="https://queue.acm.org/detail.cfm?id=3372264">Optimizations in C++ Compilers</a></p></li><li><p>作者 <a href="https://www.linkedin.com/in/godbolt/">Matt Godbolt</a></p></li><li><p>翻译 <a href="https://fuzhe1989.github.io/">Fu Zhe’s Blog</a></p></li></ul><p>在将上层容易写的代码转换为高效的由计算机去执行的机器码的过程中，编译器必不可少。但它们在其中完成的复杂工作却常常被人忽视。你也许会花许多时间来慎重考虑算法和解决错误，但可能没有足够的时间关注编译器能做什么。</p><p>本文介绍了一些编译器和代码生产方面的概念，之后着重介绍一些你的编译器为你所做的令人印象深刻的转换工作，以及我最喜欢的优化方式的一些实际例子。希望你能了解编译器可以做哪些优化，以及如何进一步探索该主题。最重要的是，你可能也会爱上看汇编输出，并开始对编译器的工程质量肃然起敬。</p><p>本文举的都是C/C++的例子，这是我最有经验的语言。但其中的许多优化方法也适用于其它编译语言。事实上，像LLVM这样的前端不可见的编译器工具包的出现意味着多数优化方法都会以相同方式作用在Rust/Swift/D语言等语言上。</p><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>我一直着迷于编译器能做什么。我曾经花了10年去制作一款视频游戏，并力争在相同CPU周期数下得到比竞争对手更多的精灵（sprite）、爆炸效果，或更复杂的场景。因此手写汇编和直接看汇编输出就成了我的基本技能。</p><p>5年后，我当时在一家交易公司工作，精灵和多边形换成了快速处理金融数据。和以前一样，知道编译器对代码的处理有助于了解我们如何去写代码。</p><p>显然，写得好的，容易测的代码非常重要——尤其是如果这些代码可能一秒完成几千笔金融交易。跑得快很重要，但不出bug更重要。</p><p>2012年时，我们在讨论可以把C++11的哪个新特性加入可接受的编码实践标准。当每一纳秒都很重要时，最好能给出不伤害性能的编码建议。在试验如何使用如<code>auto</code>、lambda、<code>range-for</code>时，我写了一个shell来持续编译并显示过滤后的输出：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g++ /tmp/test.cc -O2 -c -S -o - -masm=intel \</span><br><span class="line">    | c++filt \</span><br><span class="line">    | grep -vE <span class="string">&#x27;\s+\.&#x27;</span></span><br></pre></td></tr></table></figure><p>事实证明，这个脚本对于回答所有的“what if”问题都很有用，我当天晚上回家就写了Compiler Explorer。</p><p>这些年我一直惊讶于编译器为了将我们的代码转换为如艺术品般的汇编指令所做的工作。为了了解编译器做的事情，我建议所有用编译语言的程序员都学一点汇编语言。即使你自己不写，能读懂汇编也很有用。</p><p>本文中的所有汇编代码都是针对X86-64处理器的，这是我最熟悉的CPU，也是最常见的架构之一。一些例子只用于X86,但事实上许多优化方法很容易应用到其它架构上。另外，我只用到了GCC和Clang两种编译器，但Microsoft Visual Studio和Intel的编译器也有同样聪明的优化方法。</p><h2 id="优化入门"><a href="#优化入门" class="headerlink" title="优化入门"></a>优化入门</h2><p>不需要深入编译器的优化，只了解一些编译器会用到的概念就很有用。</p><p>许多优化方法属于<strong>强度降低（strenth reduction）</strong>的范畴：将昂贵的操作转换为代价更低的操作。一个非常简单的例子是在循环中对循环变量使用乘法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">func</span>(i * <span class="number">1234</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里强度降低法将使用了乘法的循环转换为了只用加法的循环。</p><p>后面的实际示例将会显示更多的强度降低方法。</p><p>另一个关键优化是<strong>内联（inlining）</strong>，即编译器将函数调用替换为函数体本身。它可以去掉调用的开销，因为编译器能将组合在一起的代码优化为一个编译单元，经常还能解锁进一步的优化。稍后你会看到大量这方面的例子。</p><p>其它优化类别包括：</p><ul><li>常量折叠（constant folding）。编译器将编译期能计算为常量的表达式直接替换为计算结果。</li><li>常量传播（constant propagation）。编译器追踪到一个值的源头，发现它是常量后，会将所有地方出现的这个值替换为常量。</li><li>公共子表达式消除（common subexpression elimination）。将重复的计算过程重写掉，只算一次，其它地方复制结果。</li><li>移除死代码（dead code removal）。用许多其它方法优化后，可能有些代码对输出不产生影响，就可以移除这些代码。这里包含了对没用到的值的读写操作，以及完全没用到的整个函数或表达式。</li><li>指令选择（instruction selection）。这个不算是通常意义的优化，但既然编译器会将程序转换为它的内部表示形式，并生成CPU指令，编译器通常有一个庞大的等效指令序列的集合可供选择。编译需要知道目标处理器架构的细节以作出正确选择。</li><li>移动循环中的不变代码（loop invariant code movement）。编译器能识别一块代码在循环过程中值不变，并将这块代码移出循环。其于此，编译器还能将循环中不变的条件检查移出循环外，再将循环体复制两次：一次针对条件为真，一次针对条件为假。之后还能做进一步优化。</li><li>窥孔优化（peephole optimization）。编译器取一小段指令序列并做局部优化。</li><li>尾调用移除（tail call removal）。一个在结尾处调用自身的递归函数通常可被重写为循环，从而降低函数调用开销，并减小栈溢出的可能。</li></ul><p>帮助编译器进行优化的要点就是保证它能获得尽可能多地信息，从而做出正确的优化决定。其中一个信息源就是你的代码：编译器能看到的代码越多，能做的决定越优。另一个信息源是你用的编译器配置：告诉编译器准确的目标CPU架构就能带来大不同。当然，编译器拥有的信息越多，编译时间越长，因此这里还要保持平衡。</p><p>我们看个例子，统计一个<code>vector</code>中通过测试的元素个数（GCC -O3编译，<a href="https://godbolt.org/z/acm19_count1%EF%BC%89%EF%BC%9A">https://godbolt.org/z/acm19_count1）：</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">const</span> vector&lt;<span class="keyword">int</span>&gt; &amp;vec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> numPassed = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; vec.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">testFunc</span>(vec[i]))</span><br><span class="line">            numPassed++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> numPassed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果编译器对<code>testFunc</code>一无所知，它会产生这样的内循环：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.L4:</span><br><span class="line">  mov edi, DWORD PTR [rdx+rbx*4] ; read rbx&#x27;th element of vec</span><br><span class="line">                                 ; (inlined vector::operator [])</span><br><span class="line">  call testFunc(int)             ; call test function</span><br><span class="line">  mov rdx, QWORD PTR [rbp+0]     ; reread vector base pointer</span><br><span class="line">  cmp al, 1                      ; was the result of test true?</span><br><span class="line">  mov rax, QWORD PTR [rbp+8]     ; reread the vector end pointer</span><br><span class="line">  sbb r12d, -1                   ; add 1 if true, 0 if false</span><br><span class="line">  inc rbx                        ; increment loop counter</span><br><span class="line">  sub rax, rdx                   ; subtract end from begin...</span><br><span class="line">  sar rax, 2                     ; and divide by 4 to get size()</span><br><span class="line">                                 ; (inlined vector::size())</span><br><span class="line">  cmp rbx, rax                   ; does loop counter equal size()?</span><br><span class="line">  jb .L4                         ; loop if not</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为了理解这段代码，知道<code>std::vector</code>包含一些指针会很有用：一个指向数据的开始，一个指向数据的结尾，一个指定当前分配的存储空间的结尾。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">struct</span> _<span class="title">Vector_impl</span> &#123;</span></span><br><span class="line">  T *_M_start;</span><br><span class="line">  T *_M_finish;</span><br><span class="line">  T *_M_end_of_storage;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>ector不直接存储它的大小，而是依赖<code>begin()</code>和<code>end()</code>的差值计算得到。注意<code>vector&lt;&gt;::size()</code>和<code>vector&lt;&gt;::operator[]</code>已经被彻底内联掉了。</p><p>在上面的汇编代码中，<code>ebp</code>指向vector对象，<code>begin()</code>和<code>end()</code>指针因此分别是<code>QWORD PTR [rbp+0]</code>和<code>QWORD PTR [rpb+8]</code>。</p><p>另一个编译器用到的技巧是移除分支：你也许有理由地期望<code>if (testFunc(...))</code>会变成比较和分支。这里编译器会用<code>cmp al, 1</code>进行比较，如果<code>testFunc()</code>返回<code>false</code>，<code>cmp</code>指令会设置CPU的进位标志，否则清除进位标志。之后<code>sbb r12d, -1</code>指令会带借位地减-1。减法等效于进位，也会用到进位标志。这会产生编译器想要的副作用：如果进位标志被清除了（<code>testFunc()</code>返回了<code>true</code>），它就会减-1,相当于加1；如果进位标志被设置了，它会减-1再加1，不改变原值。在一些CPU不好预测分支的情况下，避免分支会有帮助。</p><p>编译器每次循环都会重新载入<code>begin()</code>和<code>end()</code>指针，这可能令人惊讶，事实上它每次还会重新去拿<code>size()</code>。但编译器必须这么做：它不知道<code>testFunc()</code>会做什么，必须假设最坏情况。也就是，它必须假设调用<code>testFunc()</code>可能导致<code>vec</code>被修改。因为以下原因，这里<code>const</code>引用不会开启进一步的优化：<code>testFunc()</code>可能持有<code>vec</code>的非<code>const</code>引用，或者<code>testFunc()</code>会使用<code>const_cast</code>。</p><p>但如果编译器能看到<code>testFunc()</code>的函数体，因此得知它不会修改<code>vec</code>，故事就很不一样了（<a href="https://godbolt.org/z/acm19_count2%EF%BC%89%EF%BC%9A">https://godbolt.org/z/acm19_count2）：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.L6:</span><br><span class="line">  mov edi, DWORD PTR [rdx]  ; read next value</span><br><span class="line">  call testFunc(int)        ; call testFunc with it</span><br><span class="line">  cmp al, 1                 ; check return code</span><br><span class="line">  sbb r8d, -1               ; add 1 if true, 0 otherwise</span><br><span class="line">  add rdx, 4                ; move to next element</span><br><span class="line">  cmp rcx, rdx              ; have we hit the end?</span><br><span class="line">  jne .L6                   ; loop if not</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时编译器已经知道了<code>vector</code>的<code>begin()</code>和<code>end()</code>在循环过程中是不变的。它也因此知道了<code>size()</code>的值是不变的。因此编译器可以将这些常量的计算移出循环，再将索引操作（<code>vec[i]</code>）重写为从<code>begin()</code>开始，每次移动一个<code>int</code>，直到<code>end()</code>的指针遍历。这极大简化了生成的汇编代码。</p><p>这个例子中我提供了一个<code>testFunc</code>函数，但将其标记为不可内联（GNU扩展）来单独展示这一优化。在更实际的代码库中，如果编译器觉得有好处，它是可以内联掉<code>testFunc</code>的。</p><p>另一个不暴露函数体就能启用这一优化的方法是标记<code>testFunc</code>为<code>[[gnu:pure]]</code>（另一个语言扩展）。它是向编译器保证这是个纯函数——功能只与它的参数有关，不带任何副作用。</p><p>有趣的是，第一个例子中如果我们使用<code>range-for</code>，编译器就算不知道<code>testFunc</code>会不会修改<code>vec</code>，也会生成优化版本的汇编代码（<a href="https://godbolt.org/z/acm19_count3%EF%BC%89%E3%80%82%E8%BF%99%E6%98%AF%E5%9B%A0%E4%B8%BA%60range-for%60%E8%A2%AB%E5%AE%9A%E4%B9%89%E4%B8%BA%E4%BA%86%E5%B0%86%60begin()%60%E5%92%8C%60end()%60%E4%BF%9D%E5%AD%98%E5%88%B0%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%9A%84%E4%BB%A3%E7%A0%81%E5%8F%98%E6%8D%A2%EF%BC%9A">https://godbolt.org/z/acm19_count3）。这是因为`range-for`被定义为了将`begin()`和`end()`保存到局部变量的代码变换：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for (auto val : vec)</span><br><span class="line">&#123;</span><br><span class="line">    if (testFunc(val))</span><br><span class="line">        numPassed++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会被解释为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> __begin = <span class="built_in">begin</span>(vec);</span><br><span class="line">    <span class="keyword">auto</span> __end == <span class="built_in">end</span>(vec);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> __it = __begin; __it != __end; ++__it)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">testFunc</span>(*__it))</span><br><span class="line">            numPassed++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考虑各种因素，如果你需要裸写循环，推荐使用现代的<code>range-for</code>：它在编译器看不到函数体时也能生成优化代码，且更清晰。但更好的方法是用STL的<code>count_if</code>完成所有工作：编译器也会生成优化代码（<a href="https://godbolt.org/z/acm19_count4%EF%BC%89%E3%80%82">https://godbolt.org/z/acm19_count4）。</a></p><p>在传统的一次一个编译单元的编译模型下，函数调用处通常看不到函数体，只能看到函数声明。LTO（链接时优化，也称作LTCG，链接时代码生成）允许编译器看到跨编译单元的代码。在LTO中，单个编译单元会被编译为中间代码，而不是机器码。在链接时——整个程序（或动态链接库）都可见时——再去生成机器码。编译器可以利用这点跨编译单元内联，或至少能知道被调用的函数有没有副作用，从而进行优化。</p><p>通常在需要优化的构建中启用LTO是不错的选择，这样编译器就能看到整个程序了。我现在依赖于LTO将更多的函数体移出头文件，从而减少耦合程序、编译时间、debug构建和测试中的依赖，且还能在最终构建产物中达到想要的性能。</p><p>尽管LTO已经是很成熟的技术了（我在21世纪初的XBOX上就用过了LTCG），我仍然惊讶于只有很少的项目使用了LTO。部分原因可能是程序员无意间依赖了编译器的未定义行为，这种行为（优化）只有在编译器有更高的可见性（看到更多代码）时才会变得更明显：我知道我犯了这样的错误。</p><h2 id="我最喜欢的优化示例"><a href="#我最喜欢的优化示例" class="headerlink" title="我最喜欢的优化示例"></a>我最喜欢的优化示例</h2><p>过去这些年我收集了不少有趣的真实世界中的优化示例，既有来自我自己代码的第一手经验，也有来自在Compiler Explorer上帮助其他人理解代码的经验。下面是我最喜欢的，展示了编译器有多聪明的几个例子。</p><h3 id="除数为常量的整数除法"><a href="#除数为常量的整数除法" class="headerlink" title="除数为常量的整数除法"></a>除数为常量的整数除法</h3><p>（直到最近）我们可能惊讶于整数除法是现代CPU能执行的最昂贵的操作。除法比加法慢50倍以上，比乘法慢10倍以上。（这一说法直到Intel的Cannon Lake之前都成立，Cannon Lake将64位整数除法的最大延时从96个周期降为了18个周期。这样除法就只比加法慢20倍，比乘法慢5倍。）</p><p>庆幸的是，当除数为常量时，编译器作者有一些降低强度的技巧。我相信大家都知道当除数为2的整数次幂时，除法可以替换为逻辑右移——请放心，编译器会帮你做的。我建议不要在代码里写<code>&lt;&lt;</code>做除法；让编译器帮你做。这样会更清晰，编译器也知道怎么正确处理有符号数：整数除法朝0的方向截断，而负数自身移位会朝着负无穷的方向截断。</p><p>但是，如果你除的不是2的整数幂呢？你会失去运气吗？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">divideByThree</span><span class="params">(<span class="keyword">unsigned</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>幸运的是编译器又一次站在了你身后。这段代码被编译为（<a href="https://godbolt.org/z/acm19_div3%EF%BC%89%EF%BC%9A">https://godbolt.org/z/acm19_div3）：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">divideByThree(unsigned int):</span><br><span class="line">  mov eax, edi          ; eax = edi</span><br><span class="line">  mov edi, 2863311531   ; edi = 0xaaaaaaab</span><br><span class="line">  imul rax, rdi         ; rax = rax * 0xaaaaaaab</span><br><span class="line">  shr rax, 33           ; rax &gt;&gt;= 33</span><br><span class="line">  ret</span><br></pre></td></tr></table></figure><p>其中看不到除法指令。只是一次移位，以及乘一个奇怪的巨大的常数：输入的32位无符号整数乘上<code>0xaaaaaaab</code>，结果是一个64位整数，再右移33位。编译器将除法替换为了更廉价的定点乘法逆运算。这里的定点是33位，常数是这种形式下的1/3（实际是0.33333333337213844）。编译器有种算法来决定合适的定点和常数值，同时在输入范围内以相同的精度保留与真正的除法运算相同的四舍五入。有时这需要一些额外的运算——例如除以1023（<a href="https://godbolt.org/z/acm19_div1023%EF%BC%89%EF%BC%9A">https://godbolt.org/z/acm19_div1023）：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">divideBy1023(unsigned int):</span><br><span class="line">  mov eax, edi</span><br><span class="line">  imul rax, rax, 4198405</span><br><span class="line">  shr rax, 32</span><br><span class="line">  sub edi, eax</span><br><span class="line">  shr edi</span><br><span class="line">  add eax, edi</span><br><span class="line">  shr eax, 9</span><br><span class="line">  ret</span><br></pre></td></tr></table></figure><p>该算法广为人知，在《<a href="https://book.douban.com/subject/1784887/">Hacker’s Delight</a>》中有大量记录。</p><p>简而言之，你可以依靠编译器通过编译期已知的常量来很好地优化除法。</p><p>你可能在想：这为什么是如此重要的优化方法？我们执行除法的频率是多少？它不光与除法本身有关，还与相关的取余操作有关，后者常被用于hash-map实现中将hash值映射到hash桶数范围的操作中。</p><p>知道这里编译器能做什么可以通往有趣的hash-map实现。一种方法是使用固定数量的桶以允许编译器产生完美的不使用昂贵的除法指令的取余。</p><p>大多数hash-map支持rehash到不同数量的桶。朴素的实现会用运行期才知道的数字去取余，导致编译器只能用慢的除法指令。事实上gcc的libstdc++实现中的<code>std::unordered_map</code>就是这么做的。</p><p>Clang的libc++往前走了一步：它会检查桶的数量是否是2的幂，如果是的话就跳过除法指令，转而使用逻辑与。桶数量是2的幂的想法很诱人，因为它使模运算变快了，但它要依靠好的hash函数实现来避免频繁冲突。而质数个桶可以在非常简单的hash函数时也能很好地避免冲突。</p><p>诸如<code>boost::multi_index</code>这样的库又往前走了一步：与其保存实际的桶数，不如使用固定的质数作为桶数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">reduce</span><span class="params">(<span class="keyword">size_t</span> hash, <span class="keyword">int</span> bucketCountIndex)</span> </span>&#123;</span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (tableSizeIndex)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">return</span> hash % <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> hash % <span class="number">17</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">return</span> hash % <span class="number">37</span>;</span><br><span class="line">        <span class="comment">// and so on...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样编译器对于所有可能的hash-map大小都能产生完美的取余代码，仅有的额外开销就是<code>switch</code>中的分派代码。</p><p>gcc9有一个技巧来检查是否可被非2的幂整除（<a href="https://godbolt.org/z/acm19_multof3%EF%BC%89%EF%BC%9A">https://godbolt.org/z/acm19_multof3）：</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">divisibleBy3</span><span class="params">(<span class="keyword">unsigned</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;          </span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">3</span> == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会被编译为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">divisibleBy3(unsigned int):</span><br><span class="line">  imul edi, edi, -1431655765    ; edi = edi * 0xaaaaaaab</span><br><span class="line">  cmp edi, 1431655765 ; compare with 0x55555555</span><br><span class="line">  setbe al                      ; return 1 if edi &lt;= 0x55555555</span><br><span class="line">  ret</span><br></pre></td></tr></table></figure><p>Daniel Lemire的<a href="https://lemire.me/blog/2019/02/08/faster-remainders-when-the-divisor-is-a-constant-beating-compilers-and-libdivide/">博客</a>中很好地解释了这种表面上的巫术。另外，运行时也有可能用到这些整数除法的技巧。如果你需要用相同的除数去除很多数字，你可以用像<a href="https://libdivide.com/"><code>libdivide</code></a>这样的库。</p><h3 id="统计为1的位数"><a href="#统计为1的位数" class="headerlink" title="统计为1的位数"></a>统计为1的位数</h3><p>有多少次你想知道，一个整数中有多少位是1？也许没那么频繁。但事实证明，这种简单的操作在许多情况下非常有用。例如，计算两个位集合的hamming距离，处理稀疏矩阵的紧凑表示，或处理向量运算的结果。</p><p>你可能会写这样的函数来统计1：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countSetBits</span><span class="params">(<span class="keyword">unsigned</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (a != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        count++;</span><br><span class="line">        a &amp;= (a - <span class="number">1</span>); <span class="comment">// clears the bottom set bit</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值得注意的是其中的位运算技巧<code>a &amp;= (a - 1)</code>，它会清除最低位的1。在纸上证明这一点很有意思，试一下吧。</p><p>目标架构是Haswell时，gcc8.2会产生这样的汇编（<a href="https://godbolt.org/z/acm19_bits%EF%BC%89%EF%BC%9A">https://godbolt.org/z/acm19_bits）：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">countSetBits(unsigned int):</span><br><span class="line">  xor eax, eax      ; count = 0</span><br><span class="line">  test edi, edi     ; is a == 0?</span><br><span class="line">  je .L4            ; if so, return</span><br><span class="line">.L3:</span><br><span class="line">  inc eax           ; count ++</span><br><span class="line">  blsr edi, edi     ; a &amp;= (a - 1);</span><br><span class="line">  jne .L3           ; jump back to L3 if a != 0</span><br><span class="line">  ret  </span><br><span class="line">.L4:</span><br><span class="line">  Ret</span><br></pre></td></tr></table></figure><p>请注意gcc如何巧妙地找到了<code>BLSR</code>指令来去掉最低位的1。很干净，但还是不如Clang7.0聪明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">countSetBits(unsigned int):</span><br><span class="line">  popcnt eax, edi     ; count = number of set bits in a</span><br><span class="line">  ret</span><br></pre></td></tr></table></figure><p>这个操作足够通用，大多数CPU都有一条指令可以一次完成：<code>POPCNT</code>（population count）。Clang聪明到将C++中的整个循环简化为一条指令。这是良好的指令选择的非常棒的例子：Clang的代码生成器认出了这个模式，并能选出最好的指令。</p><p>前面我对gcc有点不公平，gcc9也实现了这种方法，但还有点区别：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">countSetBits(unsigned int):</span><br><span class="line">  xor eax, eax          ; count = 0</span><br><span class="line">  popcnt eax, edi       ; count = number of set bits in a</span><br><span class="line">  ret</span><br></pre></td></tr></table></figure><p>第一眼看上去不够优化：为什么要写一个马上被<code>POPCNT</code>指令的返回值覆盖的0呢？</p><p>简单研究之后，我们找到了Intel CPU的勘误SKL029：“<code>POPCNT</code>指令的执行时间可能比预期要长”——这是CPU的bug！尽管<code>POPCNT</code>指令的输出会完全覆盖<code>eax</code>寄存器，它被错误地标记为依赖于<code>eax</code>之前的值。这会限制CPU将<code>POPCNT</code>指令调度到它前面的对<code>eax</code>写操作完成后执行——尽管它们完全没关系。</p><p>gcc的解法是破除对<code>eax</code>的依赖：CPU将<code>xor eax, eax</code>视作打破依赖的惯用法。不会有<code>POPCNT</code>之前指令可以在<code>xor eax, eax</code>之后还影响到<code>eax</code>的值了，因此<code>POPCNT</code>可以在它的输入<code>edi</code>准备好后立即执行。</p><p>这只会影响Intel的CPU，而且看起来在Cannon Lake中已经修复了，但gcc在目标为Cannon Lake时仍然会产生<code>xor</code>指令。</p><h3 id="链式条件"><a href="#链式条件" class="headerlink" title="链式条件"></a>链式条件</h3><p>也许你从未需要统计一个整数中1的数量，但你也许写过这样的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isWhitespace</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c == <span class="string">&#x27; &#x27;</span></span><br><span class="line">      || c == <span class="string">&#x27;\r&#x27;</span></span><br><span class="line">      || c == <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">      || c == <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我本能地以为生成的代码会充满比较和分支，但Clang和gcc都用了一个技巧令这段代码非常高效。下面是gcc9.1的输出（<a href="https://godbolt.org/z/acm19_conds%EF%BC%89%EF%BC%9A">https://godbolt.org/z/acm19_conds）：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">isWhitespace(char):</span><br><span class="line">  xor eax, eax              ; result = false</span><br><span class="line">  cmp dil, 32               ; is c &gt; 32</span><br><span class="line">  ja .L4                    ; if so, exit with false</span><br><span class="line">  movabs rax, 4294977024    ; rax = 0x100002600</span><br><span class="line">  shrx rax, rax, rdi        ; rax &gt;&gt;= c</span><br><span class="line">  and eax, 1                ; result = rax &amp; 1</span><br><span class="line">.L4:</span><br><span class="line">  ret</span><br></pre></td></tr></table></figure><p>编译器将一系列比较转换为了查表。加载到<code>rax</code>中的魔数是一个33位的查找表，表中为1的位置是你需要返回<code>true</code>的情况（下标为32、13、10、9，分别对应<code> </code>、<code>\r</code>、<code>\n</code>、<code>\t</code>）。之后移位和<code>&amp;</code>就可以取到第<code>c</code>位并返回。Clang生成的代码与之有细微差别，但大体上等价。这是另一个强度降低的例子。</p><p>我被这种优化惊到了。在使用Compiler Explorer调查问题之前，我会假设我比编译器更懂，因此会手写这样的代码。</p><p>但在试验时我发现一件不幸的事（至少对于gcc）：比较的顺序可以影响编译器能不能做这种优化。如果你交换了<code>\r</code>和<code>\n</code>的顺序，gcc会生成如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">isWhitespace(char):</span><br><span class="line">  cmp dil, 32   ; is c == 32?</span><br><span class="line">  sete al       ; al = 1 if so, else 0</span><br><span class="line">  cmp dil, 10   ; is c == 10?</span><br><span class="line">  sete dl       ; dl = 1 if so, else 0</span><br><span class="line">  or al, dl     ; al |= dl</span><br><span class="line">  jne .L3       ; if al is non-zero return it (c was ` ` or `\n`)</span><br><span class="line">  and edi, -5   ; clear bit 2 (the only bit that differs between</span><br><span class="line">                ;              `\r` and `\t`)</span><br><span class="line">  cmp dil, 9    ; compare with `\t`</span><br><span class="line">  sete al       ; dl = 1 if so, else 0</span><br><span class="line">.L3:</span><br><span class="line">  ret</span><br></pre></td></tr></table></figure><p>用<code>and</code>将对<code>\r</code>和<code>\n</code>的比较合并到一起绝对是非常巧妙的，但看起来它会导致生成比之前的例子更差的代码。<a href="http://quick-bench.com/0TbNkJr6KkEXyy6ixHn3ObBEi4w">Quick Bench上的一个简化测试</a>表明，在可预测的紧凑循环中，基于比较的版本可能会稍快一点点。是谁说这东西简单的？</p><h3 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h3><p>有时你需要将一堆东西加起来。编译器非常擅长利用大多数现代CPU都支持的向量指令来加速求和，因此下面这段非常直接的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sumSquared</span><span class="params">(<span class="keyword">const</span> vector&lt;<span class="keyword">int</span>&gt; &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : v)</span><br><span class="line">    &#123;</span><br><span class="line">        res += i * i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转化后的核心循环长这样（<a href="https://godbolt.org/z/acm19_sum%EF%BC%89%EF%BC%9A">https://godbolt.org/z/acm19_sum）：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.loop:</span><br><span class="line">  vmovdqu ymm2, YMMWORD PTR [rax]   ; read 32 bytes into ymm2</span><br><span class="line">  add rax, 32                       ; advance to the next element</span><br><span class="line">  vpmulld ymm0, ymm2, ymm2          ; square ymm2, treating as</span><br><span class="line">                                    ;   8 32-bit values</span><br><span class="line">  vpaddd ymm1, ymm1, ymm0           ; add to sub-totals</span><br><span class="line">  cmp rax, rdx                      ; have we reached the end?</span><br><span class="line">  jne .loop                         ; if not, keep looping</span><br></pre></td></tr></table></figure><p>通过将总和分成8个部分和，编译器每条指令能处理8个值。最后它再将所有部分和汇总为最终的总和。这相当于把代码重写成这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> res_[] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (; index &lt; v.<span class="built_in">size</span>(); index += <span class="number">8</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// This can be performed by parallel instructions without</span></span><br><span class="line">    <span class="comment">// an actual loop. The following boils down to a couple</span></span><br><span class="line">    <span class="comment">// of vector instructions:</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; ++j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> val = v[index + j];</span><br><span class="line">        res_[j] += val * val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">res = res_[<span class="number">0</span>] + res_[<span class="number">1</span>]</span><br><span class="line">    + res_[<span class="number">2</span>] + res_[<span class="number">3</span>]</span><br><span class="line">    + res_[<span class="number">4</span>] + res_[<span class="number">5</span>]</span><br><span class="line">    + res_[<span class="number">6</span>] + res_[<span class="number">7</span>];</span><br></pre></td></tr></table></figure><p>只要简单地将编译器的优化级别设置得足够高，并设置合适的目标CPU架构，向量化就自己完成了。太棒了！</p><p>这要依赖于一个事实，将总和分成若干个部分和，最终再加起来，等效于按顺序累加。显然对于整数这是对的，但对于浮点数就不一定了。浮点数是不可结合的：<code>(a+b)+c</code>不等价于<code>a+(b+c)</code>，因为浮点加法的结果精度依赖于两个输入的相对量级。</p><p>这就意味着，很不幸，将<code>vector&lt;int&gt;</code>改为<code>vector&lt;float&gt;</code>得不到你想要的代码。编译器可以用一些向量指令（它可以一次算8个值的平方），但必须按顺序累加这些值（<a href="https://godbolt.org/z/acm19_sumf%EF%BC%89%EF%BC%9A">https://godbolt.org/z/acm19_sumf）：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">.loop:</span><br><span class="line">  vmovups ymm4, YMMWORD PTR [rax]   ; read 32 bytes into ymm4</span><br><span class="line">  add rax, 32                       ; advance</span><br><span class="line">  vmulps ymm1, ymm4, ymm4           ; square 8 floats</span><br><span class="line">                                    ; (the one parallel operation)</span><br><span class="line">  vaddss xmm0, xmm0, xmm1           ; accumulate the first value</span><br><span class="line">  vshufps xmm3, xmm1, xmm1, 85      ; shuffle things around</span><br><span class="line">                                    ; (permutes the 8 floats</span><br><span class="line">                                    ;  within the register)</span><br><span class="line">  vshufps xmm2, xmm1, xmm1, 255     ; ...</span><br><span class="line">  vaddss xmm0, xmm0, xmm3           ; accumulate the second value</span><br><span class="line">  vunpckhps xmm3, xmm1, xmm1        ; more shuffling</span><br><span class="line">  vextractf128 xmm1, ymm1, 0x1      ; ...</span><br><span class="line">  vaddss xmm0, xmm0, xmm3           ; accumulate third...</span><br><span class="line">  vaddss xmm0, xmm0, xmm2           ; and fourth value</span><br><span class="line">  vshufps xmm2, xmm1, xmm1, 85      ; shuffling</span><br><span class="line">  vaddss xmm0, xmm0, xmm1           ; accumulate fifth</span><br><span class="line">  vaddss xmm0, xmm0, xmm2           ; and sixth</span><br><span class="line">  vunpckhps xmm2, xmm1, xmm1        ; shuffle some more...</span><br><span class="line">  vshufps xmm1, xmm1, xmm1, 255     ; ...</span><br><span class="line">  vaddss xmm0, xmm0, xmm2           ; accumulate the seventh</span><br><span class="line">  vaddss xmm0, xmm0, xmm1           ; and final value</span><br><span class="line">  cmp rax, rcx                      ; are we done?</span><br><span class="line">  jne .loop                         ; if not, keep going</span><br></pre></td></tr></table></figure><p>不幸的是还没有简单的方法绕过这个限制。如果你保证这种情况下加法的顺序不重要，你可以启用gcc的一个危险的（但名字很有趣）标志：<code>-funsafe-math-optimizations</code>。这样gcc就能生成漂亮的内循环了（<a href="https://godbolt.org/z/acm19_sumf_unsafe%EF%BC%89%EF%BC%9A">https://godbolt.org/z/acm19_sumf_unsafe）：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.loop:</span><br><span class="line">  vmovups ymm2, YMMWORD PTR [rax]   ; read 8 floats</span><br><span class="line">  add rax, 32                       ; advance</span><br><span class="line">  vfmadd231ps ymm0, ymm2, ymm2      ; for the 8 floats:</span><br><span class="line">                                    ;   ymm0 += ymm2 * ymm2</span><br><span class="line">  cmp rax, rcx                      ; are we done?</span><br><span class="line">  jne .loop                         ; if not, keep going</span><br></pre></td></tr></table></figure><p>令人吃惊：一次处理8个浮点数，用一条指令完成累加和平方。缺点是可能有无上限的精度损失。另外gcc不允许你只对你需要的函数打开这个功能——它是编译单元粒度的标志。Clang至少允许你在代码中用<code>#pragma Clang fp contract</code>来控制开关。</p><p>在尝试这些优化时，我发现编译器还有更多的花招：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sumToX</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        result += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gcc会很直接地翻译这些代码，配上合适的设置后它就会像上面一样用上向量指令。而Clang会生成下面这样的代码（<a href="https://godbolt.org/z/acm19_sum_up%EF%BC%89%EF%BC%9A">https://godbolt.org/z/acm19_sum_up）：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sumToX(int): # @sumToX(int)</span><br><span class="line">  test edi, edi             ; test x</span><br><span class="line">  jle .zeroOrBelow          ; skip if x &lt;= 0</span><br><span class="line">  lea eax, [rdi - 1]        ; eax = x - 1</span><br><span class="line">  lea ecx, [rdi - 2]        ; ecx = x - 2</span><br><span class="line">  imul rcx, rax             ; rcx = ecx * eax</span><br><span class="line">  shr rcx                   ; rcx &gt;&gt;= 1</span><br><span class="line">  lea eax, [rcx + rdi]      ; eax = rcx + x</span><br><span class="line">  add eax, -1               ; return eax - 1</span><br><span class="line">  ret                      </span><br><span class="line">.zeroOrBelow:</span><br><span class="line">  xor eax, eax              ; answer is zero</span><br><span class="line">  ret</span><br></pre></td></tr></table></figure><p>首先，请注意这里完全没有循环。通过生成的代码，你发现Clang返回了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(x-1) * (x-2) / 2 + x - 1</span><br></pre></td></tr></table></figure><p>它将循环换成了封闭形式的通用求和解法。这种解法与我自己会写出来的朴素代码不同：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x * (x - 1) / 2</span><br></pre></td></tr></table></figure><p>这大概是Clang使用的通用算法的结果。</p><p>进一步的试验显示Clang聪明到能优化很多种类似的循环。Clang和gcc追踪循环变量的方式都能做这类优化，但只有Clang选择生成这种封闭形式的代码。但它不保证总是降低工作量：对于很小的<code>x</code>，封闭形式的开销也许比直接循环要大。Krister Walfridsson在<a href="https://kristerw.blogspot.com/2019/04/how-llvm-optimizes-geometric-sums.html">他的博客</a>中详细介绍了如何实现这种优化。</p><p>同样值得注意的是，为了做这种优化，编译器可能要依赖于“有符号整数溢出是未定义行为”。这样它就能假设你的代码不会传入可能会使结果溢出（这个例子中是65536）的<code>x</code>。如果Clang不能做这个假设，有时候它没办法找到封闭形式的解（<a href="https://godbolt.org/z/acm19_sum_fail%EF%BC%89%E3%80%82">https://godbolt.org/z/acm19_sum_fail）。</a></p><h3 id="去虚拟化"><a href="#去虚拟化" class="headerlink" title="去虚拟化"></a>去虚拟化</h3><p>尽管传统的基于虚函数的多态看起来有点过气了，但它仍然有一定的市场。无论是需要真正的多态行为，还是要为可测性增加“接缝”，或是允许未来的扩展，基于虚函数的多态都是不错的选择。</p><p>但如我们所知，虚函数很慢。是不是呢？我们看它们是怎么影响前面的平方和例子吧——有这样的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Transform</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> x * x; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sumTransformed</span><span class="params">(<span class="keyword">const</span> vector&lt;<span class="keyword">int</span>&gt; &amp;v,</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="keyword">const</span> Transform &amp;transform)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : v)</span><br><span class="line">    &#123;</span><br><span class="line">        res += <span class="built_in">transform</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然现在它还没有多态。快速用编译器跑一下可以看到它生成了相同的高度向量化的汇编（<a href="https://godbolt.org/z/acm19_poly1%EF%BC%89%E3%80%82">https://godbolt.org/z/acm19_poly1）。</a></p><p>现在我们为<code>int operator()</code>加上<code>virtual</code>，就会得到一个慢得多的实现，被填进了间接调用，对吧？当然，有点（<a href="https://godbolt.org/z/acm19_poly2%EF%BC%89%E3%80%82%E7%94%9F%E6%88%90%E7%9A%84%E4%BB%A3%E7%A0%81%E8%A6%81%E6%AF%94%E4%B9%8B%E5%89%8D%E6%9B%B4%E5%A4%9A%EF%BC%8C%E4%BD%86%E6%A0%B8%E5%BF%83%E5%BE%AA%E7%8E%AF%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%AE%A9%E4%BD%A0%E6%83%B3%E4%B8%8D%E5%88%B0%EF%BC%9A">https://godbolt.org/z/acm19_poly2）。生成的代码要比之前更多，但核心循环可能会让你想不到：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  ; rdx points to the vtable</span><br><span class="line">.L8:</span><br><span class="line">  mov rax, QWORD PTR [rdx]  ; read the virtual function pointer</span><br><span class="line">  mov esi, DWORD PTR [rbx]  ; read the next int element</span><br><span class="line">  ; compare the function pointer with the address of the only</span><br><span class="line">  ; known implementation...</span><br><span class="line">  cmp rax, Transform::operator()(int) const</span><br><span class="line">  jne .L5                   ; if it&#x27;s not the only known impl,</span><br><span class="line">                            ; then jump off to a more complex case</span><br><span class="line">  imul esi, esi             ; square the number</span><br><span class="line">  add rbx, 4                ; move to next</span><br><span class="line">  add r12d, esi             ; accumulate the square</span><br><span class="line">  cmp rbp, rbx              ; finished?</span><br><span class="line">  jne .L8                   ; if not, loop</span><br></pre></td></tr></table></figure><p>这里gcc赌了一把。已知它只看到了<code>Transform</code>的一个实现，这里用到的很可能就是这个实现。相比无脑通过虚表间接跳转，将虚表指针与已知的唯一实现做比较只需要一点点时间。如果相同，编译器就知道该做什么了：它会内联掉<code>Transform::operator()</code>的函数体，并原地平方。</p><p>是的：编译器内联掉了一个虚函数调用。棒极了，我第一次发现这个的时候非常吃惊。这种优化叫做推测性去虚拟化（speculative devirtualization），是编译器作者不断研究和改进的源泉。编译器也能在LTO时做去虚拟化，能在整个程序范围内确定可能的函数实现。</p><p>但编译器漏掉了一个技巧。注意到每次循环入口它都重新从虚表中载入虚函数指针。如果编译器能发现这个值在被调函数不会修改<code>Transform</code>的动态类型时保持不变，这次检查就可以移出循环，这样在循环内就完全没有动态检查了。编译器可以用移动循环不变量的方法将虚表检查移出循环。此时其它优化方法就可以介入了，在虚表检查通过时，整段代码可以替换为之前的向量化循环。</p><p>你可能以为对象的动态类型不可能变化，但这是标准允许的：对象可以对自身调用placement new，析构时再变回原来的类型。但建议你别这么做。Clang有选项承诺你不会这么做：<code>-fstrict-vtable-pointers</code>。</p><p>在我用的编译器中，gcc是仅有的这么做的一个，但Clang正在重构它的类型系统，从而更多利用上这类优化。</p><p>C++11增加了<code>final</code>限定符以允许标记类和虚函数不可重写。这就给了编译器更多的关于哪些方法能受益于这类优化的信息了，在某些情况下甚至允许编译器完全避免虚函数调用（<a href="https://godbolt.org/z/acm19_poly3%EF%BC%89%E3%80%82%E5%8D%B3%E4%BD%BF%E6%B2%A1%E6%9C%89%60final%60%EF%BC%8C%E6%9C%89%E6%97%B6%E5%88%86%E6%9E%90%E9%98%B6%E6%AE%B5%E4%B9%9F%E8%83%BD%E8%AF%81%E6%98%8E%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E6%98%AF%E7%89%B9%E5%AE%9A%E7%9A%84%E5%85%B7%E4%BD%93%E7%B1%BB%EF%BC%88https://godbolt.org/z/acm19_poly4%EF%BC%89%E3%80%82%E8%BF%99%E7%B1%BB%E9%9D%99%E6%80%81%E5%8E%BB%E8%99%9A%E6%8B%9F%E5%8C%96%E6%93%8D%E4%BD%9C%E8%83%BD%E5%B8%A6%E6%9D%A5%E6%98%8E%E6%98%BE%E7%9A%84%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87%E3%80%82">https://godbolt.org/z/acm19_poly3）。即使没有`final`，有时分析阶段也能证明代码中用到的是特定的具体类（https://godbolt.org/z/acm19_poly4）。这类静态去虚拟化操作能带来明显的性能提升。</a></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>希望在读完本文以后，你能欣赏编译器为确保生成高效代码所付出的努力。我希望其中一些优化能让你感到惊喜，帮助你决定写出清晰的、意图明显的代码，将优化工作留给编译器去做。我再次强调，编译器知道的越多，它能做得越好。这包括允许编译器一次看到更多代码，以及将你的目标平台信息交给编译器。在给编译器更多信息时你要做一些权衡：这会让编译更慢。LTO之类的优化能让你兼顾两者。</p><p>编译器中的优化一直在提高，即将到来的间接调用和虚函数分派上的提高也许很快带来更快的多态。我为编译器优化技术的未来而感到兴奋。快去看看你的编译器的输出吧。</p><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p>The author would like to extend his thanks to Matt Hellige, Robert Douglas, and Samy Al Bahra, who gave feedback on drafts of this article.</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><ol><li>Godbolt, M. 2012. Compiler explorer; <a href="https://godbolt.org/">https://godbolt.org/</a>.</li><li>Lemire, D. 2019. Faster remainders when the divisor is a constant: beating compilers and libdivide. <a href="https://lemire.me/blog/2019/02/08/faster-remainders-when-the-divisor-is-a-constant-beating-compilers-and-libdivide/">https://lemire.me/blog/2019/02/08/faster-remainders-when-the-divisor-is-a-constant-beating-compilers-and-libdivide/</a>.</li><li>LLVM. 2003. The LLVM compiler infrastructure.; <a href="https://llvm.org/">https://llvm.org</a>.</li><li>Padlewski, P. 2018. RFC: Devirtualization v2. LLVM; <a href="http://lists.llvm.org/pipermail/llvm-dev/2018-March/121931.html">http://lists.llvm.org/pipermail/llvm-dev/2018-March/121931.html</a>.</li><li>ridiculous_fish. 2010. Libdivide; <a href="https://libdivide.com/">https://libdivide.com/</a>.</li><li>Uops. Uops.info Instruction Latency Tables; <a href="https://uops.info/table.html">https://uops.info/table.html</a>.</li><li>Walfridsson, K. 2019. How LLVM optimizes power sums; <a href="https://kristerw.blogspot.com/2019/04/how-llvm-optimizes-geometric-sums.html">https://kristerw.blogspot.com/2019/04/how-llvm-optimizes-geometric-sums.html</a>.</li><li>Warren, H. S. 2012. Hacker’s Delight. 2nd edition. Addison-Wesley Professional.</li></ol><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><ul><li><a href="https://queue.acm.org/detail.cfm?id=3212479">C Is Not a Low-level Language</a> Your computer is not a fast PDP-11. - David Chisnall</li><li><a href="https://queue.acm.org/detail.cfm?id=3041020">Uninitialized Reads</a> Understanding the proposed revisions to the C language - Robert C. Seacord</li><li><a href="https://queue.acm.org/detail.cfm?id=2088916">You Don’t Know Jack about Shared Variables or Memory Models</a> Data races are evil. - Hans-J. Boehm, Sarita V. Adve</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++, 优化, 编译器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>出离</title>
      <link href="/%E7%94%9F%E6%B4%BB/%E6%96%87%E7%AB%A0/%E5%87%BA%E7%A6%BB/"/>
      <url>/%E7%94%9F%E6%B4%BB/%E6%96%87%E7%AB%A0/%E5%87%BA%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="出离"><a href="#出离" class="headerlink" title="出离"></a>出离</h1><h2 id="作者：许嵩"><a href="#作者：许嵩" class="headerlink" title="作者：许嵩"></a>作者：许嵩</h2><p>这几个月，走过了不少地方。</p><p>每到一处，采访我的媒体通常会有这么一问：你的音乐理想是什么？而当答案是“我从来没有理想”时，我迎接那些错愕的眼神。</p><p>年轻的时候，拥有一些世俗的念想（比如声名远播？）、一些物质上的期待（比如大房子好车子？）、一些精神上的憧憬（比如寻得佳偶？）、一些相对崇高的目标（比如造福子孙？！），似乎的确能让一些人更有动力的过活每一天。但如果，岁月在你脸上已然留下不少年轮——你坐船的动机仍然只是到达一座岛，别人把岛上的一切美妙和宝藏说给你听就可以让你划船划的更带劲儿——那我能对你说些什么呢？</p><p>平日里花费极多的时间在音乐上，无论是作词，作曲，制作，还是今年开始的演出，为此我已经感到体力不支（特别是最近一个月）。但仍然乐此不疲，并且不断研究着提升体能的方法。但这绝对不代表我有什么理想。那真是一种侮辱。</p><p>你一定试过非常入戏的观看一部电影吧？是了，电影非常精彩，你感受主角的悲喜，在影院里为它落泪或鼓掌——甚至为它憋住尿。但一旦事情严重到你觉得快要尿出来了，你还是可以毫无负担的起身奔向厕所。只因你知道，戏毕竟是戏。戏的发展和结局，毕竟和自己无关。你很清楚，你是你，戏是戏。你享受它，但你的心能够随时出离。</p><p>我一直不断提醒自己，将这种出离的能力运用在生活里一切通常被认为“重要”的事情。——很认真很投入。但心随时能够出离。因着深知一切都在究竟上无意义。一只萤火虫最大的悲哀是，自以为能照亮全世界。我们周遭有多少这样的萤火虫？</p><p>然而你我，纵然经过了世俗意义上的“努力”、成为了人们眼中的“人才”、大幅度提高了自身的光亮度——就可以因为自己是霓虹灯就沾沾自喜并开始张罗起理想了？拜托，太阳会笑的。</p><p>最后。也许你一直怀揣理想，那也不是什么了不得的坏事，没什么了不得的，只管去实现好了。只不过你应知道，坐船的意义就仅仅是坐船，如果坐船是为了到达目的地，那所有人最终的目的地都是死亡——你看，非要树立目标，那面对着这个终极目标，是不是比没有目标更绝望得多？</p><p>保持出离心。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前缀和</title>
      <link href="/acm/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
      <url>/acm/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h1><h2 id="前置问题"><a href="#前置问题" class="headerlink" title="前置问题"></a>前置问题</h2><p>在认识前缀和之前, 首先提出万恶的需求:  <strong>对于一个数组, 并给出 q 次询问, 每一次都询问这个数组在 [l, r] 范围内的和</strong></p><p>我们最开始的思路是, 每一次询问, 都去遍历一遍 [l, r] 区间去进行求和, 得到如下代码. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int sum = 0;</span><br><span class="line">while (q--)</span><br><span class="line">for (int i = l; i &lt;= r; i++)</span><br><span class="line">sum += arry[i];</span><br></pre></td></tr></table></figure><p>Easy! 当我们以为问题解决的时候, 问题升级了, 希望你在 **1s 内求出答案, 并且 ${n * q}$ 的值处于 10^6^ ** , 再去使用上面的方法, 就会喜提 <strong>TLE</strong> , 这时我们认识到,  每一个询问都进行区间求和的时间复杂度是 $O(nq)$ 的, 纯粹的暴力在升级的问题中是不可行的.</p><h2 id="思考优化"><a href="#思考优化" class="headerlink" title="思考优化"></a>思考优化</h2><p>我们进一步思考, 突然发现一个有趣的性质, 如果要去求出<strong>区间 [l, r]</strong> 内的和, 只需要使用 <code>sum([1, R]) - sum([1, L - 1]) (Ⅰ)</code>就可以轻松得到, 而不再需要去进行遍历, 最重要的是我们只需要对整个数组求一次和, 即利用 <code>sum([1, x]) = sum([1, x - 1]) + arry[x](Ⅱ)</code> 即可, 这样每一次询问, 我们只需要去利用式子 (Ⅰ)</p><p>进行 $O(1)$ 的运算就可以了, 那么总共我们只需要花费 $O(n + q)$ 的时间复杂度就完美的实现了对升级问题的优化.</p><h2 id="前缀和-1"><a href="#前缀和-1" class="headerlink" title="前缀和"></a>前缀和</h2><p>通过对问题的思考优化, 这时候我们引出前缀和的概念, 相信你就应该可以理解了.</p><p>**前缀和指一个数组的某下标之前的所有数组元素的和 ( 包含其自身 ) **</p><p>比如我们有一个数组 <code>[1, 2, 3, 4, 5]</code>, 那么其对应的<strong>前缀和数组</strong>就是 <code>[1, 3, 6, 10, 15]</code></p><p>用表达式来表示的话就是 <code>sum([1, x]) = sum([1, x - 1]) + arry[x] 当 x == 1 时 sum([1, x]) = arry[x]</code></p><p><strong>代码实现则是:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sum[N], arry[N];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;= N; i++) </span><br><span class="line">    sum[i] = sum[i - <span class="number">1</span>] + arry[i];</span><br><span class="line"><span class="keyword">while</span> (q--)</span><br><span class="line">    cout &lt;&lt; sum[r] - sum[l - <span class="number">1</span>] &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h2 id="一维前缀和的总结"><a href="#一维前缀和的总结" class="headerlink" title="一维前缀和的总结"></a>一维前缀和的总结</h2><p>那么对于前缀和只能解决加法问题吗? 当然不是, 它还可以解决像区间异或的情况, 也即 <code>xor(l, r) =  xor([1, R]) ^ xor([1, L - 1])</code></p><p>我们可以总结一下, 如果需要<strong>求出区间 [l, r] 中元素操作为 x 的结果</strong>时, 只要<strong>操作 x</strong> 满足 <code>X(l, r) = X([1, r]) X X([1, l - 1])</code> 就可以使用前缀和的思想进行优化</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><ul><li><p><a href="https://www.luogu.com.cn/problem/U69096">洛谷 U69096</a></p></li><li><p><a href="https://atcoder.jp/contests/joi2007ho/tasks/joi2007ho_a"><strong>最大の和</strong></a></p></li><li><p><a href="https://www.luogu.com.cn/problem/P6067"> [USACO05JAN]Moo Volume S</a></p></li><li><p><a href="https://www.luogu.com.cn/problem/P3131">[USACO16JAN]Subsequences Summing to Sevens S</a></p></li></ul><h2 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h2><p>对于一维前缀和, 我们已经有一定了解了. 那么我们开始加速.</p><p>我们给出一个数字矩阵 $a$, 可以将其视为二维数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 2 4 3</span><br><span class="line">5 1 2 4</span><br><span class="line">6 3 5 9</span><br></pre></td></tr></table></figure><p>现在要求我们去求出任意一个子矩阵的和, 有了一维前缀和的经验, 我们会想到记录任意一个点到 $(1, 1)$ 的矩阵的和, 也即 $sum_{x, y} = \sum_{i = 1} ^ {x} \sum_{y = 1} ^ {y} a_{i, j}$ </p><p>于是我们可以得到下面的 $sum$</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1  3  7  10</span><br><span class="line">6  9  15 22</span><br><span class="line">12 18 29 45</span><br></pre></td></tr></table></figure><p>思路是很清晰的, 不过我们下面遇到了两个问题:</p><ol><li><p>递推求 $sum_{i, j}$ 的过程:  $sum_{i, j} = sum_{i - 1, j} + sum_{i, j - 1} + a_{i, j}$ 如果不理解可以对着下面这个图理解一下</p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://img-blog.csdn.net/20180921215152309?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0OTkwNzMx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p><p>由于添加了 $sum_{i - 1, j}, sum_{i, j - 1}$  故对于 $sum_{i - 1, j - 1}$ 重复添加了, 所以需要减去</p></li><li><p>我们如何通过 $sum$ 矩阵求出 $(x_1, y_1) - (x_2, y_2)$ 子矩阵的和</p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://img-blog.csdn.net/20180922161308238?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0OTkwNzMx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p><p>根据类似的思考, 再根据图看一下, 可以发现答案为 $sum_{x_1, y_1} - sum_{x_1 - 1, y_2} - sum_{x_2, y_1 - 1} + sum_{x_1 - 1, y_1 - 1}$</p></li></ol><h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h3><ul><li><a href="https://www.luogu.com.cn/problem/P1387">洛谷P1378最大正方形</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
          <category> 基础算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 基础算法 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP1.0 / HTTP1.1</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/HTTP/HTTP1.0%20%E5%92%8C%20HTTP1.1/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/HTTP/HTTP1.0%20%E5%92%8C%20HTTP1.1/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP1-0-HTTP1-1"><a href="#HTTP1-0-HTTP1-1" class="headerlink" title="HTTP1.0 / HTTP1.1"></a>HTTP1.0 / HTTP1.1</h1><p>大部分都摘自 小伙伴 <a href="https://www.tang7o.cn/2022/03/08/HTTP1-0-1-1/">Tang7O</a></p><p>本文将在以下几个方面来对于 <strong>HTTP1.0</strong> 和 <strong>HTTP1.1</strong></p><ul><li>响应状态码</li><li>缓存处理</li><li>链接方式</li><li>Host 头处理</li><li>带宽优化</li></ul><h2 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h2><p><strong>HTTP1.0</strong> 仅定义了 16 种状态码.  <strong>HTTP1.1</strong> 中新加入了大量的状态码, 光是错误响应状态码就新增了 24 种.</p><p>比如说:</p><ul><li>100 (Continue) : 在请求大资源前的预热请求.</li><li>206 (Partial Content) : 范围请求的标识码.</li><li>409 (Conflict) : 请求与当前资源的规定冲突.</li><li>410 (Gone) : 资源已被永久转移, 而且没有任何已知的转发地址.</li></ul><h2 id="缓存处理"><a href="#缓存处理" class="headerlink" title="缓存处理"></a>缓存处理</h2><p>缓存技术通过避免用户与资源服务器频繁交互, 节约了大量的网络带宽, 降低了用户接受信息的延迟.</p><h3 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP 1.0"></a>HTTP 1.0</h3><p><strong>HTTP 1.0</strong> 提供的缓存机制非常简单. 服务器端使用 <code>Expires</code> 标签来标志 (时间) 一个响应体, 在 <code>Expire</code> 标志时间内的请求, 都会获得该响应体缓存. 服务器端在初次返回给客户端的响应体种, 有一个 <code>Last-Modified</code> 标签, 该标签标记了被请求资源在服务器的最后一次修改. 在请求头种, 使用 <code>If-Modified-Since</code> 标签, 该标签标志了一个时间, 意为客户端向服务器进行问询: “该时间之前, 我要请求的数据是否有被修改过 ? “ 通常情况下, 请求头中的 <code>If-Modifiend-Since</code> 的值即为上一次获得该资源时, 响应体中的 <code>Last-Modified</code>  的值.</p><p>如果服务器即收到了请求头, 并判断 <code>If-Modified-Since</code> 时间后, 资源确实没有被修改过, 则返回给客户端一个 <code>304 not modified</code> 响应头, 表示 “缓存可用, 你从浏览器中拿吧”.</p><p>如果判断 <code>If-Modified-Since</code> 时间后, 资源被修改过, 则返回给客户端一个 <code>200 OK</code> 的响应体, 并附带全新的资源内容,  表示 “资源被修改过了, 我给你一份新的”</p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://www.tang7o.cn/2022/03/08/HTTP1-0-1-1/1.png" alt="img"></p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://www.tang7o.cn/2022/03/08/HTTP1-0-1-1/2.png" alt="img"></p><h3 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP 1.1"></a>HTTP 1.1</h3><p><strong>HTTP 1.1</strong> 的缓存机制在 <strong>HTTP 1.0</strong> 的基础上, 大大增加了灵活性和扩展性. 基本工作原理和 <strong>HTTP 1.0</strong> 保持不变,  而是增加了更多细致的特性. 其中, 请求头中最常见的特性就是 <code>Cache-Control</code>,  详见 <strong>MDN Web</strong> 文档  <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control">Cache-Control</a> </p><h2 id="连接方式"><a href="#连接方式" class="headerlink" title="连接方式"></a>连接方式</h2><p><strong>HTTP/1.0 默认使用短链接</strong>, 也就是说, 客户端和服务器每进行一次 HTTP 操作, 就建立一次连接, 任务结束就中断连接. 当客户端浏览器访问的某个 HTML 或者其他类型的 Web 页中包含有其他 Web 资源, 浏览器就会重新建立一个 TCP 连接,  这样就会导致有大量的 “握手报文” 和 “挥手报文” 占用了带宽.</p><p><strong>为了解决 HTTP/1.0 存在的资源浪费问题，HTTP/1.1 优化为默认长连接模式</strong>. 采用长连接模式的请求报文会通知服务端: “我会向你请求连接, 并且连接成功后, 请不要关闭”. 因此, 该 TCP 连接将持续打开, 为后续的客户端服务端的数据交互服务. 也就是说在使用长连接的情况下, 当一个网页打开完成后, 客户端和服务端之间用与传输 HTTP 数据的 TCP 连接不会关闭, 客户端再次访问这个服务器时, 会继续使用这一条已经建立的连接.</p><p>如果 TCP 连接一直保持的话也是对资源的浪费, 因此, 一些服务器软件还会支持超时时间的时间. 在超时时间之内没有新的请求达到, TCP 连接才会被关闭.</p><p>有必要说明的是, HTTP/1.0 仍提供了长连接选项, 在请求头中加入 <code>Connection: Keep-alive</code>. 同样的, 在HTTP 1.1中, 如果不希望使用长连接选项, 也可以在请求头中加入 <code>Connection: close</code>, 这样会通知服务器端: “我不需要长连接, 连接成功后即可关闭”.</p><p><strong>HTTP 协议的长连接和短连接, 实质上是 TCP 协议的长连接和短连接.</strong></p><p><strong>实现长连接需要客户端和服务端都支持长连接.</strong></p><h2 id="Host-头处理"><a href="#Host-头处理" class="headerlink" title="Host 头处理"></a>Host 头处理</h2><p>域名系统 (DNS) 允许多个主机名绑定到同一个 IP 地址上, 但是 HTTP1.0 并没有考虑这个问题, 假设我们有一个资源 URL 是 <code>https://cu1universe.icu/index.html</code> ,  HTTP/1.0 的请求报文中, 将会请求的是 <code>GET /index.html HTTP/1.0</code> 也就是不会加入主机名. 这样的报文发送到服务器端,  服务端理解不了客户端想请求的真正网址.</p><p>因此, HTTP 1.1 在请求头中加入了 <code>Host</code> 字段. </p><p>加入 <code>Host</code> 字段的报文头部将会是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /index.html HTTP/1.1</span><br><span class="line">Host: tang7o.cn</span><br></pre></td></tr></table></figure><p>这样, 服务器就可以确定客户端想要请求的真正网址了.</p><h2 id="带宽优化"><a href="#带宽优化" class="headerlink" title="带宽优化"></a>带宽优化</h2><h3 id="范围请求"><a href="#范围请求" class="headerlink" title="范围请求"></a>范围请求</h3><p><strong>HTTP/1.1</strong> 引入了范围请求 <strong>(range request)</strong> 机制, 以避免带宽的浪费. 当客户端想请求一个文件的一部分, 或者需要继续下载一个已经下载了部分但被终止的文件, <strong>HTTP/1.1</strong> 可以在请求头中加入 <code>Range</code> 头部, 以请求 (并只能请求字节型数据) 数据的一部分. 服务器可以忽略 <code>Range</code> 头部, 而可以返回若干 <code>Range</code> 响应.</p><p>如果一个响应包括部分数据的话, 那么将带有 <code>206 (Partial Content)</code> 状态码. 该状态码的意义在于避免了 <strong>HTTP/1.1</strong> 代理缓存错误的把该响应认为是一个完整的数据响应, 从而把他当作一个请求的响应缓存.</p><p>在范围响应中, <code>Content-Range</code> 头部标志指示出了该数据块的偏移量和数据块长度</p><h3 id="状态码-100"><a href="#状态码-100" class="headerlink" title="状态码 100"></a>状态码 100</h3><p><strong>HTTP/1.0</strong> 中新加了<strong>状态码 100</strong>. 该状态码的使用场景为, 存在某些比较大的文件请求, 服务器可能不愿意响应这种请求, 此时 <strong>状态码 100</strong> 可以作为指示请求是否被正常响应.</p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://www.tang7o.cn/2022/03/08/HTTP1-0-1-1/3.png" alt="img"></p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://www.tang7o.cn/2022/03/08/HTTP1-0-1-1/4.png" alt="img"></p><p>然而在 <strong>HTTP/1.0</strong> 中没有 <code>100(Continue)</code> 状态码, 要想触发这一机制, 可以发送一个 <code>Expect</code> 头部, 其中包含一个 <code>100-continue</code> 的值.</p><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p>许多格式的数据在传输时都会做压缩处理. 数据的压缩可以大幅优化带宽的利用. 然而, <strong>HTTP/1.0</strong> 对数据压缩的选项提供的不多, 不支持压缩细节的选择, 也无法区分端到端压缩或者是逐跳压缩.</p><p><strong>HTTP/1.1</strong> 则对内容编码和传输编码做了区分, 内容编码总是端到端的, 传输编码总是逐跳的.</p><p><strong>HTTP/1.0</strong> 包含了 <code>Content-Encoding</code> 头部, 对消息进行端到端编码. <strong>HTTP/1.1</strong> 加入了 <code>Transfer-Encoding</code> 头部可以对消息进行逐跳传输编码. <strong>HTTP/1.1</strong> 还加入了 <code>Accept-Encoding</code> 头部, 时客户端来指示它能处理什么样的内容编码.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><strong>连接方式:</strong> HTTP/1.0 默认短链接, HTTP/1.1 默认长连接</li><li><strong>状态响应码:</strong> HTTP/1.1 中新加了大量的状态码, 光是错误响应状态码就新增了 24 种.</li><li><strong>缓存处理:</strong> 在 HTTP/1.0 中主要使用 <strong>header</strong> 里面的 <code>If-Modified-Since, Expires</code> 来作为缓存判断的标准, HTTP/1.1 则引入了更多的缓存控制策略, 例如  <code>Entity tag, If-Unmod-Since, If-Match, If-None-Match</code> 等更多可供选择的缓存头来控制缓存策略.</li><li><strong>带宽优化以及网络连接的使用:</strong> 在 HTTP/1.0 中, 存在一些浪费带宽的现象, 例如客户端只是需要某个对象一部分, 而服务器却将整个对象送过来了, 并且不支持断点续传功能, HTTP/1.1 则在请求头引入了 <code>Range</code> 头域, 它允许之请求资源的某个部分, 即返回码是 <code>206 (Partial Content)</code> 这样就方便了开发者自由的选择以便于充分利用带宽和连接.</li><li>**Host 头处理: **HTTP/1.1 在请求头中加入了 <code>Host</code> 字段</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 基础知识</title>
      <link href="/C/C++%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/C/C++%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="C-基础知识点"><a href="#C-基础知识点" class="headerlink" title="C++ 基础知识点"></a>C++ 基础知识点</h1><h2 id="C-中四种-cast-转换"><a href="#C-中四种-cast-转换" class="headerlink" title="C++ 中四种 cast 转换"></a>C++ 中四种 cast 转换</h2><p>C++ 中四种类型转换是:  <strong>static_cast, dynamic_cast,  const_cast, reinterpret_cast</strong></p><ol><li><p>const_cast</p><p>用于将 <strong>const</strong> 变量转为非 <strong>const 变量</strong></p></li><li><p>static_cast</p><p>用于各种<strong>隐式</strong>转换, 比如非 const 转 const, void* 转指针等, static_cast 能用于<strong>多态向上</strong>转化, 如果<strong>向下转能成功但是不安全, 结果未知</strong></p></li><li><p>dynamic_cast</p><p>用于动态类型转换. <strong>只能用于含有虚函数的类</strong>, 用于层次间的向上和向下转化. <strong>只能转指针或引用</strong>. 向下转化时, 如果时非法的对于指针返回 null, 对于引用抛异常. </p><p>其中:</p><ul><li>向上转换: 指的是子类向基类的转换</li><li>向下转换: 指的是基类向子类的转换</li></ul><p>它通过判断在执行到该语句的时候变量的运行时类型和要转换的类型是否相同来判断是否能够向下转换</p></li><li><p>reinterpret_cast</p><p>几乎什么都可以转, 比如将 int 转换为指针, 可能会出问题, 建议尽量不要使用此类转换</p></li></ol><p>C 的强制转换表面上看起来功能强大什么都可以进行转型, 但是转换不够明确, 不能进行错误检查, 容易出错</p><h2 id="C-C-中指针和引用的区别"><a href="#C-C-中指针和引用的区别" class="headerlink" title="C/C++ 中指针和引用的区别"></a>C/C++ 中指针和引用的区别</h2><ol><li>指针有自己的一块空间, 而引用只是一个别名</li><li>使用 sizeof 看一个指针的大小是 4, 而引用则是被引用对象的大小</li><li>指针可以被初始化为 null, 而引用必须被初始化且必须是一个已有对象的引用</li><li>作为参数传递时, 指针需要解引用才可以对对象进行操作,  而直接对引用的修改都会改变引用所指向的对象</li><li>可以有 const 指针, 但是没有 const 引用</li><li>指针在使用中可以指向其它对象, 但是引用只能是一个对象的引用, 不能被改变</li><li>指针可以有多级指针 (**p), 而引用只有一级</li><li>指针和引用使用 ++ 原算符的意义不一样</li><li>如果返回动态分配的对象或者内存, 必须使用指针, 引用可能引起内存泄漏</li></ol><h2 id="C-中的智能指针"><a href="#C-中的智能指针" class="headerlink" title="C++ 中的智能指针"></a>C++ 中的智能指针</h2><p>C++ 里面的四个智能指针: auto_ptr, shared_ptr, weak_ptr, unique_ptr, 其中后三个是 C++11 支持的, 并且第一个已经被 11 弃用</p><h3 id="为什么要使用智能指针"><a href="#为什么要使用智能指针" class="headerlink" title="为什么要使用智能指针:"></a>为什么要使用智能指针:</h3><p>智能指针的作用是管理一个指针, 因为存在以下这种情况: 申请的空间在函数结束时忘记释放, 造成内存泄漏. 使用智能指针可以很大程度上避免这个问题, 因为智能指针就是一个对象, 当对象的生命周期结束时, 对象会自动调用自己的析构函数, 而析构函数会自动释放所持有的资源.所以智能指针的作用原理就是在函数(方法)结束后自动释放内存空间, 不需要手动释放申请的内存空间</p><ol><li><p>auto_ptr (C++ 98 的方案, cpp11 已经弃用)</p><p>采用所有权模式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">auto_ptr&lt;string&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> string(<span class="string">&quot;hello world&quot;</span>))</span></span>;</span><br><span class="line">auto_ptr&lt;string&gt; p2;</span><br><span class="line">p2 = p1 <span class="comment">// auto_prt 不会报错</span></span><br></pre></td></tr></table></figure><p>此时不会报错, p2 剥夺了 p1 所指向对象的所有权, 此时 p1 为空, 所以当程序运行时访问 p1 将会报错. 所以 <code>auto_ptr</code>的缺点是: 存在潜在的内存崩溃问题</p></li><li><p>**unique_ptr ** (替换 auto_ptr)</p><p><code>unique_prt</code> 实现独占式拥有或严格拥有概念, 保证同一时间内只有一个智能指针可以指向该对象. 它对于避免资源泄漏(例如 <strong>“以 new 创建对象后因为发生异常而忘记调用 delete”</strong>) </p><p>采用<strong>所有权模式</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">unique_ptr&lt;string&gt; <span class="title">p3</span><span class="params">(<span class="keyword">new</span> string(<span class="string">&quot;auto&quot;</span>))</span></span>;</span><br><span class="line">unique_ptr&lt;string&gt; p4;</span><br><span class="line">p4 = p3; <span class="comment">// 此时会报错</span></span><br></pre></td></tr></table></figure><p>编译器认为 <code>p4 = p4</code> 非法, 避免了 p3 不再指向有效数据的问题. 因此 <code>unique_ptr</code> 比 <code>auto_ptr</code> 更安全</p><p>另外 <code>unique_ptr</code> 还有更聪明的地方: 当一个程序试图将一个 <code>unique_ptr</code> 赋值给另一个时, 如果原 <code>unique_ptr</code> 是一个临时右值, 那么编译器允许那么做; 如果源 <code>unique_ptr</code> 将存在一段时间, 编译器将禁止那么做, 比如:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">unique_ptr&lt;string&gt; <span class="title">pu1</span><span class="params">(<span class="keyword">new</span> string(<span class="string">&quot;hello world&quot;</span>))</span></span>;</span><br><span class="line">unique_ptr&lt;string&gt; pu2;</span><br><span class="line">pu2 = pu1; <span class="comment">// #1 not allowed</span></span><br><span class="line">unique_ptr&lt;string&gt; pu3;</span><br><span class="line">pu3 = unique_ptr&lt;string&gt;(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&quot;You&quot;</span>)); <span class="comment">// #2 allowed</span></span><br></pre></td></tr></table></figure><p>其中 #1 留下的悬挂的 <code>unique_ptr(pu1)</code> , 这可能带来危害. 而 #2 不会留下悬挂的 <code>unique_ptr</code> , 因为它调用 <code>unique_ptr</code> 的构造函数, 该构造函数创建的临时对象在其所有权让给 pu3 后就会被销毁. 这种随情况而已的行为表明, <code>unique_ptr</code> 优于允许两种赋值的 <code>auto_ptr</code></p><p>注: 如果确实想执行类似像 #1 的操作, 要安全的重用这种指针, 可以给它重新赋值. C++ 提供了一个标准库 <code>std::move()</code> 让你能够将一个 <code>unique_ptr</code> 赋值给另一个. 例如:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">unique_ptr&lt;string&gt;ps1, ps2;</span><br><span class="line">ps1 = <span class="built_in">demo</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">ps2 = std::<span class="built_in">move</span>(ps1);</span><br><span class="line">ps1 = <span class="built_in">demo</span>(<span class="string">&quot;alexia&quot;</span>);</span><br><span class="line">cout &lt;&lt; *ps2 &lt;&lt; *ps1 &lt;&lt; endl;</span><br></pre></td></tr></table></figure></li><li><p><strong>shared_ptr</strong> </p><p>shared_ptr 实现共享式拥有概念. 多个智能指针可以指向相同对象, 该对象和其相关资源会在 “最后一个引用被销毁” 的时候释放. 从名字就可以看出了资源可以被多个指针共享, 它使用计数机制来表明资源被几个指针共享. 可以通过成员方法 <code>use_count()</code> 来查看资源所有者的个数, 除了通过 <code>new</code> 来构造, 还可以通过传入 <code>auto_ptr</code>, <code>unique_ptr</code>, <code>weak_ptr</code> 来构造. 当我们调用 <code>release()</code> 时, 当前指针会释放资源所有权, 计数减一. 当<strong>计数等于 0</strong> 时, 资源会被释放.</p><p><code>shared_ptr</code> 是为了解决 <code>auto_ptr</code> 在对象所有权上的局限性**(auto_ptr 是独占的)**, 在使用引用计数的机制上提供了可以共享所有权的智能指针</p><p><strong>成员方法:</strong></p><ul><li><p>use_count() 返回引用计数的个数</p></li><li><p>unique() 返回是否独占所有权( use_count 为 1)</p></li><li><p>swap() 交换两个 shared_ptr 所拥有的对象</p></li><li><p>reset() 放弃内部对象的所有权或者拥有对象的变更, 会引起原有对象的引用计数减少</p></li><li><p>get() 返回内部对象(指针), 由于已经重载了方法, 因此和直接使用对象是一样的. 如</p><p><code>shared_ptr&lt;int&gt;sp(new int(1))</code>;  sp 和 sp.get() 是等价的</p></li></ul><p><strong>shared_ptr 的实现:</strong></p><p>核心要理解引用计数, 什么时候销毁底层指针, 还有赋值, 拷贝构造的时候的引用计数的变化, 析构的时候要判断底层指针的引用计数为 0 了才能真正释放底层指针的内存</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartPtr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* ptr; <span class="comment">// 底层真实指针</span></span><br><span class="line">    <span class="keyword">int</span>* use_count; <span class="comment">// 保存当前对象被多少指针引用</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SmartPtr</span>(T* p); <span class="comment">//SmartPtr&lt;int&gt;p(new int(2))</span></span><br><span class="line">    <span class="built_in">SmartPtr</span>(<span class="keyword">const</span> SmartPtr&lt;T&gt;&amp; other); <span class="comment">// SmartPtr&lt;int&gt;q(p)</span></span><br><span class="line">    SmartPtr&lt;T&gt;&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> SmartPtr&lt;T&gt;&amp; rhs); <span class="comment">// q = p;</span></span><br><span class="line">    ~<span class="built_in">SmartPtr</span>();</span><br><span class="line">    T&amp; <span class="keyword">operator</span>*(); <span class="comment">// 为了能把智能指针当成普通指针操作定义解引用</span></span><br><span class="line">    T* <span class="keyword">operator</span>-&gt;();</span><br><span class="line">    T* <span class="keyword">operator</span>+(<span class="keyword">int</span>); <span class="comment">// 定义指针加一个常数</span></span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">operator</span>-(<span class="keyword">const</span> SmartPtr&lt;T&gt;&amp; rhs); <span class="comment">// 获得两指针相减获得其距离</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_count</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> *use_count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">int</span> SmartPtr&lt;T&gt;::<span class="keyword">operator</span>-(<span class="keyword">const</span> SmartPtr&lt;T&gt;&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> ptr - rhs.ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">SmartPtr&lt;T&gt;::<span class="built_in">SmartPtr</span>(T* p)</span><br><span class="line">&#123;</span><br><span class="line">    ptr = p;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        use_count = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="built_in"><span class="keyword">catch</span></span>(...)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> ptr; <span class="comment">// 申请失败释放真实指针和引用计数的内存</span></span><br><span class="line">        ptr = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">delete</span> use_count;</span><br><span class="line">        use_count = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">SmartPtr&lt;T&gt;::<span class="built_in">SmartPtr</span>(<span class="keyword">const</span> SmartPtr&lt;T&gt;&amp; other)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 引用计数保存在一块内存, 所有的 SmartPtr 对象的引用计数都指向这里</span></span><br><span class="line">    use_count = other.use_count; </span><br><span class="line">    prt = other.ptr;</span><br><span class="line">    ++(*use_count); <span class="comment">// 当前对象的引用计数 + 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">SmartPtr&lt;T&gt;&amp; SmartPtr&lt;T&gt;::<span class="keyword">operator</span>=(<span class="keyword">const</span> SmartPtr&lt;T&gt;&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 重载=运算符, 例如 SmartPtr&lt;int&gt;p, q; p = q; 这个语句中, 首先给 q 指向的对象的引用计数</span></span><br><span class="line">    <span class="comment">// 加 1, 因为 p 重新指向了 q 所指的对象, 所有 p 需要先给原来的对象的引用计数减 1,如果减 1</span></span><br><span class="line">    <span class="comment">// 后为 0, 先释放掉 p 原来指向的内存, 然后将 q 指向的对象的引用计数加 1 后赋值给 p;</span></span><br><span class="line">    ++(*rhs.use_count);</span><br><span class="line">    <span class="keyword">if</span> ((--(*use_count)) == <span class="number">0</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> ptr;</span><br><span class="line">        ptr = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">delete</span> use_count;</span><br><span class="line">        use_count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ptr = rhs.ptr;</span><br><span class="line">    use_count = rhs.use_count;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">SmartPtr&lt;T&gt;::~<span class="built_in">SmartPtr</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (--(*use_count) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> ptr;</span><br><span class="line">        ptr = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">delete</span> use_count;</span><br><span class="line">        use_count = ptr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T&amp; SmartPtr&lt;T&gt;::<span class="keyword">operator</span>*() &#123; <span class="keyword">return</span> *ptr; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T* SmartPtr&lt;T&gt;::<span class="keyword">operator</span>-&gt;() &#123; <span class="keyword">return</span> ptr;&#125;</span><br><span class="line"></span><br><span class="line">T* SmartPtr&lt;T&gt;::<span class="keyword">operator</span>+(<span class="keyword">int</span> i) &#123; <span class="keyword">return</span> ptr + i; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>weak_ptr</strong></p><p>weak_ptr 是一种不控制对象生命周期的智能指针, 它指向一个 <code>shared_ptr</code> 管理的对象, 进行该对象的内存管理的是那个强引用的 <code>shared_ptr</code> .  <code>weak_ptr</code> 只是提供了对管理对象的一个访问手段. <code>weak_ptr</code> 设计的目的是为配合 <code>shared_ptr</code> 而引入的一种智能指针来协助 <code>shared_ptr</code> 或另一个 <code>weak_ptr</code> 对象构造, 它的构造和析构不会引起计数的增加或者减少. <code>weak_ptr</code> 是用来解决 <code>shared_ptr</code> 相互引用时的死锁问题, 如果说两个 <code>shared_ptr</code> 相互引用, 那么这两个指针的引用计数永远不可能下降为 0, 资源永远不会释放. 它是对对象的弱引用, 不会增加对象计数, 和 <code>shared_ptr</code> 之间可以相互转化, <code>share_ptr</code> 可以直接赋值给它, 它可以通过调用 <code>lock</code> 方法来获得 <code>shared_ptr</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    shared_ptr&lt;B&gt; pb_;</span><br><span class="line">    ~<span class="built_in">A</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A delete&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    shared_ptr&lt;A&gt; pa_;</span><br><span class="line">    ~<span class="built_in">B</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B delete&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">shared_ptr&lt;B&gt; <span class="title">pb</span><span class="params">(<span class="keyword">new</span> B())</span></span>;</span><br><span class="line">    <span class="function">shared_ptr&lt;A&gt; <span class="title">pa</span><span class="params">(<span class="keyword">new</span> A())</span></span>;</span><br><span class="line">    pb-&gt;pa_ = pa;</span><br><span class="line">    pa-&gt;pb_ = pb;</span><br><span class="line">    cout &lt;&lt; pb.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; pa.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fun</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 <code>fun()</code> 函数中 pa, pb 之间相互引用, 两个资源的引用计数为 2, 当要跳出函数时. 智能指针 pa, pb 析构时两个资源的引用计数会减一, 但是两者的引用计数还是为 1, 导致函数结束时没有释放在堆空间内申请的内存 (A, B 的析构函数没有被调用), 如果把其中一个改为 <code>weak_ptr</code> 就可以了, 我们把 A 类里面的 <code>shared_ptr</code>; 改为 <code>weak_ptr</code>;这样的话, 资源 B 的引用开始就只有 1, 当 pb 析构时, B 的计数变为 0, B 得到释放, B 释放的同时也会使 A 的计数减一, 同时 pa 析构时使 A 的计数减一, 那么 A 的计数为 0, A 得到释放</p><p>**注意:**p</p><p>​    我们不能够通过 <code>weak_ptr</code> 直接访问对象的方法, 比如 B 对象中有一个方法 <code>print()</code> , 我们不能这样访问, <code>pa-&gt;pb_&gt;print()</code> 因为 pb_ 是一个 <code>weak_ptr</code> , 应该先把它转换为<code>shared_ptr</code>, 如: <code>shared_ptr p = pa-&gt;pb_.lock(); p-&gt;print();</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Strategy 策略模式</title>
      <link href="/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Strategy-策略模式"><a href="#Strategy-策略模式" class="headerlink" title="Strategy 策略模式"></a>Strategy 策略模式</h1><h2 id="要解决的问题"><a href="#要解决的问题" class="headerlink" title="要解决的问题:"></a>要解决的问题:</h2><p>在软件按的构建过程中, 一些对象使用的方法可能多种多样, 经常会出现变动, 如果将这个方法都编码到对象方法中, 将会高频率的修改对象方法, 使其变得异常复杂, 同时也破坏了代码尽量不去变动的准则, 并且有时候支持不会去使用的一些方法也是一个性能负担</p><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义:"></a>模式定义:</h2><p>定义一系列算法, 将它们一个个封装起来, 并且使它们可互相替(变化). 该模式使得算法可独立于使用它的客户程序(稳定)而变化(扩展, 子类化)</p><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>当要实现一个计算税务的需求时, 没有进行优化前的代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">TaxBase</span> &#123;</span></span><br><span class="line">CN_Tax,</span><br><span class="line">US_Tax,</span><br><span class="line">DE_Tax,</span><br><span class="line">FR_Tax       <span class="comment">//每一个国家的税务计算</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SalesOrder</span>&#123;</span></span><br><span class="line">    TaxBase tax;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">CalculateTax</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (tax == CN_Tax)&#123;</span><br><span class="line">            <span class="comment">//CN***********</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tax == US_Tax)&#123;</span><br><span class="line">            <span class="comment">//US***********</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tax == DE_Tax)&#123;</span><br><span class="line">            <span class="comment">//DE***********</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (tax == FR_Tax)&#123;  <span class="comment">// 如果是法国, 该如何计算税收</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到, 如果要新增国家的话, 那么就要在原来的代码上进行改动, 通过增加 <code>else if</code> 的形式进行源码级改动, 如果这种改动逐渐增多了之后, 将会使得可维护性大大降低, 而且一次增加将会影响大量的代码,</p><h2 id="使用-Strategy-策略模式进行重构"><a href="#使用-Strategy-策略模式进行重构" class="headerlink" title="使用 Strategy 策略模式进行重构"></a>使用 Strategy 策略模式进行重构</h2><p>考虑将计算税收的方法抽象出来, 通过继承的方式来对可能会增加的税收方式进行扩展, 这样只需要将不同计算税收的指针赋给父类的指针, 就可以利用多态来实现不同国家的税收计算</p><h3 id="类结构"><a href="#类结构" class="headerlink" title="类结构"></a>类结构</h3><p> <img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://s1.ax1x.com/2022/03/09/bWOpse.png"></p><h3 id="重构代码"><a href="#重构代码" class="headerlink" title="重构代码"></a>重构代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaxStrategy</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">Calculate</span><span class="params">(<span class="keyword">const</span> Context&amp; context)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">TaxStrategy</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CNTax</span> :</span> <span class="keyword">public</span> TaxStrategy&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">Calculate</span><span class="params">(<span class="keyword">const</span> Context&amp; context)</span></span>&#123;</span><br><span class="line">        <span class="comment">//***********</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">USTax</span> :</span> <span class="keyword">public</span> TaxStrategy&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">Calculate</span><span class="params">(<span class="keyword">const</span> Context&amp; context)</span></span>&#123;</span><br><span class="line">        <span class="comment">//***********</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DETax</span> :</span> <span class="keyword">public</span> TaxStrategy&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">Calculate</span><span class="params">(<span class="keyword">const</span> Context&amp; context)</span></span>&#123;</span><br><span class="line">        <span class="comment">//***********</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//*********************************</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FRTax</span> :</span> <span class="keyword">public</span> TaxStrategy&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">Calculate</span><span class="params">(<span class="keyword">const</span> Context&amp; context)</span></span>&#123;</span><br><span class="line"><span class="comment">//.........</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SalesOrder</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    TaxStrategy* strategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SalesOrder</span>(StrategyFactory* strategyFactory)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;strategy = strategyFactory-&gt;<span class="built_in">NewStrategy</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">SalesOrder</span>()&#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>-&gt;strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">CalculateTax</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="function">Context <span class="title">context</span><span class="params">()</span></span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">double</span> val = </span><br><span class="line">            strategy-&gt;<span class="built_in">Calculate</span>(context);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li><strong>Strategy</strong> 及其子类为组件提供了一系列可重用的方法, 从而使得类型在运行时方便地根据需要在各个算法之间进行切换</li><li><strong>Strategy 模式</strong>提供了用条件判断语句外的另一种选择, 消除条件判断语句, 就是在解耦合. 含有许多条判断语句的代码通常都需要 <strong>Strategy 模式</strong></li><li>如果 <strong>Strategy</strong> 对象没有实例变量, 那么各个上下文可以共享一个 <strong>Strategy</strong> 对象, 从而节省对象开销</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RB-tree 源码分析</title>
      <link href="/STL-%E6%BA%90%E7%A0%81/RB-tree/"/>
      <url>/STL-%E6%BA%90%E7%A0%81/RB-tree/</url>
      
        <content type="html"><![CDATA[<h1 id="RB-tree"><a href="#RB-tree" class="headerlink" title="RB-tree"></a>RB-tree</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>红黑树是一颗非严格均衡的二叉树, 它的平衡性并没有 <strong>AVL</strong> 树那么好, 但是其在调整树结构时所需要的调整的次数是小于 <strong>AVL</strong> 的, 所以对于频繁的插入删除等操作上是由于 <strong>AVL</strong> 树. 如果没有了解过红黑树的话, 建议先去看一下</p><p> <a href="https://www.cnblogs.com/skywang12345/p/3245399.html">红黑树(一)之 原理和算法详细介绍 </a>, 否则对于下面的内容理解起来将会较为困难</p><p><strong>红黑树的特性</strong>:<br><strong>（1）每个节点或者是黑色，或者是红色。</strong><br><strong>（2）根节点是黑色。</strong><br><strong>（3）每个叶子节点（NIL）是黑色。 [注意：这里叶子节点，是指为空(NIL或NULL)的叶子节点！]</strong><br><strong>（4）如果一个节点是红色的，则它的子节点必须是黑色的。</strong><br><strong>（5）从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。</strong></p><p><strong>红黑节点的定义</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 红黑定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">bool</span> __rb_tree_color_type;</span><br><span class="line"><span class="keyword">const</span> __rb_tree_color_type __rb_tree_red = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> __rb_tree_color_type __rb_tree_black = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>下面将 <strong>RB-tree</strong> 分为如下几个部分进行分析</p><ul><li>基本结构</li><li>调整红黑树结构以及颜色的策略</li><li>RB-tree 的插入 删除 以及查找</li></ul><h2 id="RB-tree-节点以及迭代器结构"><a href="#RB-tree-节点以及迭代器结构" class="headerlink" title="RB-tree 节点以及迭代器结构"></a>RB-tree 节点以及迭代器结构</h2><p>RB-tree 的节点分为两部分, 通过 <code>__rb_tree_node_base</code> 来设置指针, <code>__rb_tree_node</code> 通过继承的方式来添加节点数据,  来实现一个 <strong>RB-tree</strong> 节点的功能</p><p><strong>__rb_tree_node_base</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">rb_tree_node_base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">typedef</span> __rb_tree_color_type color_type;</span><br><span class="line">  <span class="keyword">typedef</span> __rb_tree_node_base* base_ptr;</span><br><span class="line"></span><br><span class="line">  color_type color; <span class="comment">// 定义节点颜色</span></span><br><span class="line">  base_ptr parent;<span class="comment">// 定义父节点</span></span><br><span class="line">  base_ptr left;<span class="comment">// 定义左孩子</span></span><br><span class="line">  base_ptr right;<span class="comment">// 定义右孩子</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找以当前节点为根的子树的最小节点 </span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> base_ptr <span class="title">minimum</span><span class="params">(base_ptr x)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (x-&gt;left != <span class="number">0</span>) x = x-&gt;left;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找最大节点</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> base_ptr <span class="title">maximum</span><span class="params">(base_ptr x)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (x-&gt;right != <span class="number">0</span>) x = x-&gt;right;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>__rb_tree_node</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Value</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">rb_tree_node</span> :</span> <span class="keyword">public</span> __rb_tree_node_base</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">typedef</span> __rb_tree_node&lt;Value&gt;* link_type;</span><br><span class="line">  Value value_field;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>RB-tree 迭代器</strong></p><p><strong>RB-tree</strong> 迭代器属于双向迭代器, 支持前进和后退操作, 但是不具有随机访问元素的能力, 并分为 <code>__rb_tree_base_iterator</code> 和 <code>__rb_tree_iterator</code> 两部分</p><p><strong>__rb_tree_base_iterator</strong> 基本结构 </p><p>其中 <code>__rb_tree_base_iterator</code> 利用 <code>increment</code> 方法实现 ++, <code>decrement</code> 方法实现 - - 功能, 本质就是求出当前节点的前驱与后继</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">rb_tree_base_iterator</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">typedef</span> __rb_tree_node_base::base_ptr base_ptr;</span><br><span class="line">    <span class="comment">//定义其迭代器是一种双向迭代器</span></span><br><span class="line">  <span class="keyword">typedef</span> bidirectional_iterator_tag iterator_category;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span> difference_type;</span><br><span class="line">  base_ptr node; <span class="comment">//指向节点的元素</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//求该节点的前驱 后继操作</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="comment">//如果右节点不为空就选择右子树中最多侧的节点作为前驱</span></span><br><span class="line">    <span class="keyword">if</span> (node-&gt;right != <span class="number">0</span>) &#123;</span><br><span class="line">      node = node-&gt;right;</span><br><span class="line">      <span class="keyword">while</span> (node-&gt;left != <span class="number">0</span>)</span><br><span class="line">        node = node-&gt;left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果右子树为空, 就寻找该节点的父节点</span></span><br><span class="line">      base_ptr y = node-&gt;parent;</span><br><span class="line">      <span class="comment">// 如果该节点是父节点的右孩子就继续往上找, 直到y节点是父节点的左孩子</span></span><br><span class="line">      <span class="keyword">while</span> (node == y-&gt;right) &#123;</span><br><span class="line">        node = y;</span><br><span class="line">        y = y-&gt;parent;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (node-&gt;right != y)</span><br><span class="line">        node = y;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求当前节点后继</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">     <span class="comment">//该种情况为 node == header 时也即 end() 时出现</span></span><br><span class="line">    <span class="keyword">if</span> (node-&gt;color == __rb_tree_red &amp;&amp;</span><br><span class="line">        node-&gt;parent-&gt;parent == node)</span><br><span class="line">      node = node-&gt;right;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (node-&gt;left != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//如果左子树不为空, 就找左子树的最右侧节点</span></span><br><span class="line">      base_ptr y = node-&gt;left;</span><br><span class="line">      <span class="keyword">while</span> (y-&gt;right != <span class="number">0</span>)</span><br><span class="line">        y = y-&gt;right;</span><br><span class="line">      node = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//找出父节点</span></span><br><span class="line">      base_ptr y = node-&gt;parent;</span><br><span class="line">     <span class="comment">// 如果当前 node 是 y 节点的左孩子, 那么就一直向上找到第一个非父亲节左孩子的节点</span></span><br><span class="line">      <span class="keyword">while</span> (node == y-&gt;left) &#123;</span><br><span class="line">        node = y;</span><br><span class="line">        y = y-&gt;parent;</span><br><span class="line">      &#125;</span><br><span class="line">      node = y;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>__rb_tree_iterator</strong> 迭代器</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">Ref</span>, <span class="keyword">class</span> <span class="title">Ptr</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">rb_tree_iterator</span> :</span> <span class="keyword">public</span> __rb_tree_base_iterator<span class="comment">// 继承__rb_tree_base_iterator</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">typedef</span> Value value_type;</span><br><span class="line">  <span class="keyword">typedef</span> Ref reference;</span><br><span class="line">  <span class="keyword">typedef</span> Ptr pointer;</span><br><span class="line">  <span class="keyword">typedef</span> __rb_tree_iterator&lt;Value, Value&amp;, Value*&gt;             iterator;</span><br><span class="line">  <span class="keyword">typedef</span> __rb_tree_iterator&lt;Value, <span class="keyword">const</span> Value&amp;, <span class="keyword">const</span> Value*&gt; const_iterator;</span><br><span class="line">  <span class="keyword">typedef</span> __rb_tree_iterator&lt;Value, Ref, Ptr&gt;                   self;</span><br><span class="line">  <span class="keyword">typedef</span> __rb_tree_node&lt;Value&gt;* link_type;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line">  __rb_tree_iterator() &#123;&#125;</span><br><span class="line">  __rb_tree_iterator(link_type x) &#123; node = x; &#125;<span class="comment">// 初始化node节点</span></span><br><span class="line">  __rb_tree_iterator(<span class="keyword">const</span> iterator&amp; it) &#123; node = it.node; &#125;<span class="comment">// 初始化node节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载指针</span></span><br><span class="line">  reference <span class="keyword">operator</span>*() <span class="keyword">const</span> &#123; <span class="keyword">return</span> <span class="built_in">link_type</span>(node)-&gt;value_field; &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __SGI_STL_NO_ARROW_OPERATOR</span></span><br><span class="line">  pointer <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span> &#123; <span class="keyword">return</span> &amp;(<span class="keyword">operator</span>*()); &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __SGI_STL_NO_ARROW_OPERATOR */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载++与--操作, 调用 increment 和 decrement 方法</span></span><br><span class="line">  self&amp; <span class="keyword">operator</span>++() &#123; <span class="built_in">increment</span>(); <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">  self <span class="keyword">operator</span>++(<span class="keyword">int</span>) &#123;</span><br><span class="line">    self tmp = *<span class="keyword">this</span>;</span><br><span class="line">    <span class="built_in">increment</span>();</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  self&amp; <span class="keyword">operator</span>--() &#123; <span class="built_in">decrement</span>(); <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">  self <span class="keyword">operator</span>--(<span class="keyword">int</span>) &#123;</span><br><span class="line">    self tmp = *<span class="keyword">this</span>;</span><br><span class="line">    <span class="built_in">decrement</span>();</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>重载操作符</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==与!= 比较两个tree的node是相同</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> __rb_tree_base_iterator&amp; x,</span><br><span class="line">                       <span class="keyword">const</span> __rb_tree_base_iterator&amp; y) &#123;</span><br><span class="line">  <span class="keyword">return</span> x.node == y.node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> __rb_tree_base_iterator&amp; x,</span><br><span class="line">                       <span class="keyword">const</span> __rb_tree_base_iterator&amp; y) &#123;</span><br><span class="line">  <span class="keyword">return</span> x.node != y.node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>RB-tree</strong> 的迭代器也提供了 <strong>traits</strong> 编程</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __STL_CLASS_PARTIAL_SPECIALIZATION</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> bidirectional_iterator_tag</span></span><br><span class="line"><span class="function"><span class="title">iterator_category</span><span class="params">(<span class="keyword">const</span> __rb_tree_base_iterator&amp;)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">bidirectional_iterator_tag</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> __rb_tree_base_iterator::difference_type*</span></span><br><span class="line"><span class="function"><span class="title">distance_type</span><span class="params">(<span class="keyword">const</span> __rb_tree_base_iterator&amp;)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (__rb_tree_base_iterator::difference_type*) <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">Ref</span>, <span class="keyword">class</span> <span class="title">Ptr</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> Value* <span class="title">value_type</span><span class="params">(<span class="keyword">const</span> __rb_tree_iterator&lt;Value, Ref, Ptr&gt;&amp;)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (Value*) <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __STL_CLASS_PARTIAL_SPECIALIZATION */</span></span></span><br></pre></td></tr></table></figure><h2 id="红黑树调整结构以及节点颜色策略"><a href="#红黑树调整结构以及节点颜色策略" class="headerlink" title="红黑树调整结构以及节点颜色策略"></a>红黑树调整结构以及节点颜色策略</h2><h3 id="旋转操作"><a href="#旋转操作" class="headerlink" title="旋转操作"></a><strong>旋转操作</strong></h3><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://s4.ax1x.com/2022/03/03/btyPtf.png" alt="image-20220303214005392"></p><p>由于左右旋转的方式是基本相同的, 所以这里只对右旋转进行分析</p><p>观察上图, 当对一个节点进行右旋转的时候, 需要以下几步</p><ol><li>若 A 节点的左孩子不为空, 则将A 的左孩子指向自己左孩子的右孩子</li><li>将 原来 A 左孩子(B) 的右孩子的父亲指向 A 的左孩子</li><li>将之前左孩子(B) 的右孩子指向 A 节点</li><li>将 A 之前左孩子(B) 的父亲节点指向 A 的父亲节点</li><li>A 节点的父亲节点重新指向远左孩子(B)</li></ol><p><strong>右旋转代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> </span><br><span class="line">__rb_tree_rotate_right(__rb_tree_node_base* x, __rb_tree_node_base*&amp; root)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//y 为 x 的左孩子节点</span></span><br><span class="line">  __rb_tree_node_base* y = x-&gt;left;</span><br><span class="line">    <span class="comment">// x 的左孩子节点指向 y 的右孩子节点</span></span><br><span class="line">  x-&gt;left = y-&gt;right;</span><br><span class="line">    <span class="comment">// 如何 y 的右孩子节点不为 0 就将其父节点指向 x</span></span><br><span class="line">  <span class="keyword">if</span> (y-&gt;right != <span class="number">0</span>)</span><br><span class="line">    y-&gt;right-&gt;parent = x;</span><br><span class="line">    <span class="comment">//y 的父亲节点指向 x 的父亲节点</span></span><br><span class="line">  y-&gt;parent = x-&gt;parent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果旋转的是根节点, 那么 y 就作为新的根节点</span></span><br><span class="line">  <span class="keyword">if</span> (x == root)</span><br><span class="line">    root = y;</span><br><span class="line">    <span class="comment">// x 作为父节点的右孩子, x 的父亲节点的右孩子节点指向 y</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x == x-&gt;parent-&gt;right)</span><br><span class="line">     <span class="comment">// x 的父节点的右孩子节点指向 y</span></span><br><span class="line">    x-&gt;parent-&gt;right = y;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">      <span class="comment">//否则 x 的父亲节点的左孩子节点指向 y</span></span><br><span class="line">    x-&gt;parent-&gt;left = y;</span><br><span class="line">    <span class="comment">// y 的右孩子节点指向 x</span></span><br><span class="line">  y-&gt;right = x;</span><br><span class="line">    <span class="comment">// x 的父亲节点指向 y</span></span><br><span class="line">  x-&gt;parent = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="调整红黑树节点颜色"><a href="#调整红黑树节点颜色" class="headerlink" title="调整红黑树节点颜色"></a><strong>调整红黑树节点颜色</strong></h3><p><strong>注: 该部分图片都引用自开头提供的文章链接</strong></p><p>只有在<strong>添加</strong>和<strong>删除</strong>红黑树节点时才需要对红黑树的节点颜色进行调整</p><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a><strong>添加</strong></h4><p>这里只讨论添加完成后如何调整颜色, 对于插入操作会在分析删除插入以及查询时进行分析</p><p>首先规定, 当插入一个节点后, 给新插入节点着色为红色, 然后调整红黑树来使其依旧满足所有性质</p><p><strong>对于新插入节点后的调整, 有下面几种情况:</strong></p><ol><li> 当前节点的父亲节点为红色, 且当前节点的叔叔节点也是红色</li></ol><p>   <strong>处理策略:</strong></p><p>   ​    Ⅰ 将父亲节点变为黑色</p><p>   ​    Ⅱ 将叔叔节点变为黑色</p><p>   ​    Ⅲ 将祖父节点变为红色</p><p>   ​    Ⅳ 将祖父节点设置为<strong>当前节点</strong>, 并对新的<strong>当前节点</strong>进行操作</p><p>   <img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://images0.cnblogs.com/i/497634/201403/251759273578917.jpg" alt="case 1"></p><ol start="2"><li><p>当前节点以及父亲节点为红色, 叔叔节点为黑色且当前节点为父节点的右儿子</p><p><strong>处理策略</strong></p><p>​    Ⅰ 将父节点作为<strong>当前节点</strong>, 对父节点进行左旋操作</p><p>​    Ⅱ 将新的<strong>当前节点</strong>进行左旋</p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://images0.cnblogs.com/i/497634/201403/251801031546918.jpg" alt="case2"></p></li><li><p>当前节点以及父亲节点为红色, 叔叔节点为黑色且当前节点为父节点的左儿子    </p><p><strong>处理策略:</strong></p><p>​    Ⅰ 将父亲节点设置为黑色</p><p>​    Ⅱ 将当前节点的祖父节点设置为红色</p><p>​    Ⅲ 将祖父节点进行右旋</p><p><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://images0.cnblogs.com/i/497634/201404/170945094945387.jpg" alt="case 3"></p></li></ol><p>通过上图可以发现其实 <strong>Case 2</strong> 后会转化为 <strong>Case 3</strong> 的情况, 所以在源码实现时可以将 <strong>Case2</strong> 和 <strong>Case3</strong> 合并起来, 事实上源码也是这样进行操作的, 并且如果父节点是祖父节点的右儿子, 操作步骤是一样的, 不过有关旋转的方向反一下就可以. 在最后由于旋转到根节点时, 根节点可能会是红色, 所以需要判断一下根节点是不是红色, 如果是红色, 那么就将根节点变为黑色</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> </span><br><span class="line">__rb_tree_rebalance(__rb_tree_node_base* x, __rb_tree_node_base*&amp; root)</span><br><span class="line">&#123;</span><br><span class="line">  x-&gt;color = __rb_tree_red;</span><br><span class="line">  <span class="keyword">while</span> (x != root &amp;&amp; x-&gt;parent-&gt;color == __rb_tree_red) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x-&gt;parent == x-&gt;parent-&gt;parent-&gt;left) &#123;</span><br><span class="line">      __rb_tree_node_base* y = x-&gt;parent-&gt;parent-&gt;right;</span><br><span class="line">      <span class="keyword">if</span> (y &amp;&amp; y-&gt;color == __rb_tree_red) &#123;</span><br><span class="line">        x-&gt;parent-&gt;color = __rb_tree_black;</span><br><span class="line">        y-&gt;color = __rb_tree_black;</span><br><span class="line">        x-&gt;parent-&gt;parent-&gt;color = __rb_tree_red;</span><br><span class="line">        x = x-&gt;parent-&gt;parent;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123; <span class="comment">// 如果不存在 y 也说明 y 是黑色 (默认空节点为黑色节点)</span></span><br><span class="line">        <span class="keyword">if</span> (x == x-&gt;parent-&gt;right) &#123;</span><br><span class="line">          x = x-&gt;parent;</span><br><span class="line">          __rb_tree_rotate_left(x, root);</span><br><span class="line">        &#125;</span><br><span class="line">        x-&gt;parent-&gt;color = __rb_tree_black;</span><br><span class="line">        x-&gt;parent-&gt;parent-&gt;color = __rb_tree_red;</span><br><span class="line">        __rb_tree_rotate_right(x-&gt;parent-&gt;parent, root);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      __rb_tree_node_base* y = x-&gt;parent-&gt;parent-&gt;left;</span><br><span class="line">      <span class="keyword">if</span> (y &amp;&amp; y-&gt;color == __rb_tree_red) &#123;</span><br><span class="line">        x-&gt;parent-&gt;color = __rb_tree_black;</span><br><span class="line">        y-&gt;color = __rb_tree_black;</span><br><span class="line">        x-&gt;parent-&gt;parent-&gt;color = __rb_tree_red;</span><br><span class="line">        x = x-&gt;parent-&gt;parent;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x == x-&gt;parent-&gt;left) &#123;</span><br><span class="line">          x = x-&gt;parent;</span><br><span class="line">          __rb_tree_rotate_right(x, root);</span><br><span class="line">        &#125;</span><br><span class="line">        x-&gt;parent-&gt;color = __rb_tree_black;</span><br><span class="line">        x-&gt;parent-&gt;parent-&gt;color = __rb_tree_red;</span><br><span class="line">        __rb_tree_rotate_left(x-&gt;parent-&gt;parent, root);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  root-&gt;color = __rb_tree_black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>由于删除操作和调整操作是在一起实现的, 所以这里就一起进行分析</p><p>首先看删除节点, 删除就和其他 <strong>BinarySearchTree</strong> 一样</p><ol><li> 如果是最多只有一个节点, 直接删除该节点, 并将子节点接到其在父节点原来的位置上</li><li>如果有两个子节点, 则找到该节点的后继, 并利用后继去替换当前要删除的节点, 这时问题转化为了删除后继节点问题, 又由于<strong>后继只可能会拥有右儿子</strong>, 所以就转化为了<strong>情况1</strong> 进行删除 </li></ol><p>在删除后将进行调整红黑树的颜色</p><p><strong>删除</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> __rb_tree_node_base*</span><br><span class="line">__rb_tree_rebalance_for_erase(__rb_tree_node_base* z,</span><br><span class="line">                              __rb_tree_node_base*&amp; root,</span><br><span class="line">                              __rb_tree_node_base*&amp; leftmost,</span><br><span class="line">                              __rb_tree_node_base*&amp; rightmost)</span><br><span class="line">&#123;</span><br><span class="line">  __rb_tree_node_base* y = z;</span><br><span class="line">  __rb_tree_node_base* x = <span class="number">0</span>; </span><br><span class="line">  __rb_tree_node_base* x_parent = <span class="number">0</span>; </span><br><span class="line">  <span class="keyword">if</span> (y-&gt;left == <span class="number">0</span>)             <span class="comment">// z has at most one non-null child. y == z.</span></span><br><span class="line">    x = y-&gt;right;               <span class="comment">// x might be null.</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span> (y-&gt;right == <span class="number">0</span>)          <span class="comment">// z has exactly one non-null child.  y == z.</span></span><br><span class="line">      x = y-&gt;left;              <span class="comment">// x is not null.</span></span><br><span class="line">    <span class="keyword">else</span> &#123;                      <span class="comment">// z has two non-null children.  Set y to</span></span><br><span class="line">      y = y-&gt;right;             <span class="comment">//   z&#x27;s successor.  x might be null.</span></span><br><span class="line">      <span class="keyword">while</span> (y-&gt;left != <span class="number">0</span>)</span><br><span class="line">        y = y-&gt;left;</span><br><span class="line">      x = y-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果是两非空子节点的情况, 此时 y 为 要删除节点的后继</span></span><br><span class="line">    <span class="comment">// 这里的替换其实是将 z 原来的父子节点关系全部接入到后继 y 的父子关系上, 然后再对 z 进行删除</span></span><br><span class="line">  <span class="keyword">if</span> (y != z) &#123;               </span><br><span class="line">      <span class="comment">// relink y in place of z.  y is z&#x27;s successor</span></span><br><span class="line">    <span class="comment">// 先将要删除节点的左儿子的父节点指向后继 y</span></span><br><span class="line">    z-&gt;left-&gt;parent = y; </span><br><span class="line">    y-&gt;left = z-&gt;left;</span><br><span class="line">    <span class="comment">// 如果 y 不是要删除节点 z 的右儿子</span></span><br><span class="line">    <span class="keyword">if</span> (y != z-&gt;right) &#123;</span><br><span class="line">      x_parent = y-&gt;parent;</span><br><span class="line">      <span class="keyword">if</span> (x) x-&gt;parent = y-&gt;parent;</span><br><span class="line">      y-&gt;parent-&gt;left = x;      <span class="comment">// y must be a left child</span></span><br><span class="line">      y-&gt;right = z-&gt;right;</span><br><span class="line">      z-&gt;right-&gt;parent = y;</span><br><span class="line">    &#125; <span class="comment">// 如果 y 是要删除节点 z 的右儿子</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       <span class="comment">//那么就没有把 x 接给后继 y 父亲节点的需要</span></span><br><span class="line">      x_parent = y;  </span><br><span class="line">    <span class="keyword">if</span> (root == z)</span><br><span class="line">      root = y;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z-&gt;parent-&gt;left == z)</span><br><span class="line">      z-&gt;parent-&gt;left = y;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">      z-&gt;parent-&gt;right = y;</span><br><span class="line">    y-&gt;parent = z-&gt;parent;</span><br><span class="line">    __STD::<span class="built_in">swap</span>(y-&gt;color, z-&gt;color); <span class="comment">// 把 y 原来的颜色替换为要删除节点的颜色以保证平衡性</span></span><br><span class="line">    y = z;</span><br><span class="line">    <span class="comment">// y now points to node to be actually deleted</span></span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">else</span> &#123;                        <span class="comment">// y == z</span></span><br><span class="line">    x_parent = y-&gt;parent;</span><br><span class="line">    <span class="keyword">if</span> (x) x-&gt;parent = y-&gt;parent;   </span><br><span class="line">    <span class="keyword">if</span> (root == z)</span><br><span class="line">      root = x;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">      <span class="keyword">if</span> (z-&gt;parent-&gt;left == z)</span><br><span class="line">        z-&gt;parent-&gt;left = x;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        z-&gt;parent-&gt;right = x;</span><br><span class="line">    <span class="keyword">if</span> (leftmost == z) </span><br><span class="line">      <span class="keyword">if</span> (z-&gt;right == <span class="number">0</span>)        <span class="comment">// z-&gt;left must be null also</span></span><br><span class="line">        leftmost = z-&gt;parent; <span class="comment">//如果删除的是最小节点, 那么如果没有右子节点, 就说明其父节点为最小节点</span></span><br><span class="line">    <span class="comment">// makes leftmost == header if z == root</span></span><br><span class="line">      <span class="keyword">else</span> <span class="comment">// 反之就去其原右子树中寻找最小节点, (此时右子树为要删除父亲节点的左子树)</span></span><br><span class="line">        leftmost = __rb_tree_node_base::<span class="built_in">minimum</span>(x);</span><br><span class="line">    <span class="keyword">if</span> (rightmost == z)  </span><br><span class="line">      <span class="keyword">if</span> (z-&gt;left == <span class="number">0</span>)         <span class="comment">// z-&gt;right must be null also</span></span><br><span class="line">        rightmost = z-&gt;parent;  </span><br><span class="line">    <span class="comment">// makes rightmost == header if z == root</span></span><br><span class="line">      <span class="keyword">else</span>                      <span class="comment">// x == z-&gt;left</span></span><br><span class="line">        rightmost = __rb_tree_node_base::<span class="built_in">maximum</span>(x);</span><br><span class="line">  &#125; </span><br><span class="line">.....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调整</strong></p><p>在进行上面删除操作时, 我们发现其实  <strong>x_parent</strong> 这个变量在删除的时候并没有什么实际作用, 只是在记录一些值, 这个值在进行删除的时候确实没有什么作用, 其是用于进行调整时所使用的, 记录的实际是在后继被替换到要删除节点后其原右子节点的新父亲节点</p><p>对于调整, 我们先来回顾一下红黑树的 5 条性质</p><blockquote><p>(1) 每个节点或者是黑色，或者是红色。<br>(2) 根节点是黑色。<br>(3) 每个叶子节点是黑色。 [注意：这里叶子节点，是指为空的叶子节点！]<br>(4) 如果一个节点是红色的，则它的子节点必须是黑色的。<br>(5) 从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。</p></blockquote><p>当从红黑树中删除了一个节点后, 可能会<strong>违反特性 (2), (4), (5)</strong> , 所以在调整阶段, 需要解决上面的三个问题, 使得调整后的树满足红黑树的全部特性.</p><p>在看过<strong>红黑树的删除</strong>操作后, 我们知道, 在删除了节点 y 后, 其右儿子节点 x 占据原来 y 的位置, 如果删除的节点是一个黑色节点, 意味着在其他节点到这个节点的子树中, 黑色节点的数量将减一, 那么, 可以通过在该位置再次添加一个黑色, 这样就保证了 <strong>“特性(5)”</strong> 不会被破坏.</p><p>如此做, x 现在就不仅包含其原有颜色, 还多包含一个额外的黑色. 也即它的节点颜色为 <strong>“红加黑”</strong>, 或者 <strong>“黑加黑”</strong>, 其违反了 <strong>“特性(1)”</strong> </p><p>现在, 成功将问题从破坏了 <strong>特性(2), (4), (5)</strong> 转变为了破坏 <strong>特性(1), (2), (4)</strong>. 而下面的调整策略 **__rb_tree_rebalance ** 的思想为: 将 x 所包含的额外的黑色沿树不断上移(即向根方向移动), 直到出现了下面的情况:</p><ul><li><p>情况一:  x 此时为一个 <strong>“黑 + 红”</strong> 节点</p><p>处理方式: 直接将 x 设置为黑色. 至此红黑树性质全部恢复</p></li><li><p>情况二: x 是 <strong>“黑 + 黑”</strong> 节点, 且 x 是<strong>根节点</strong>.</p><p>处理方式: 什么都不做, 结束. 此时红黑树的性质全部恢复</p></li><li><p>情况三: x 是 <strong>“黑 + 黑”</strong> 节点, 且 x 不是根</p><p>处理方式: 这种情况可以划分为 4 种情况, 但是在 <code>RB-tree</code> 的实现中进行了精简, 所以下面只介绍源码中的实现, 如果想了解上面的 4 种情况, 可以去文章开头提供的<strong>红黑树原理分析</strong></p><p>==这里只以 x 为父节点左儿子, 右儿子的操作于左儿子的操作方向相反.==   w 是 x 的<strong>兄弟节点</strong></p><ol><li> x 是 <strong>“黑 + 黑”</strong> 节点, w 是<strong>红色</strong>节点(此时x的父节点和x的兄弟节点的子节点都是黑节点)</li></ol><p>   <strong>处理方式:</strong></p><ul><li>将 w 节点染为黑色</li><li>将 x 的父亲节点染为<strong>红色</strong></li><li>将 x 的父亲节点进行<strong>左旋</strong></li><li>重新设置 x 的兄弟节点 w</li></ul><ol start="2"><li>  x 是 <strong>“黑 + 黑”</strong> 节点,  w 是<strong>黑色</strong>节点(如果是空节点则默认黑色),  w 的两个儿子都是<strong>黑色</strong></li></ol><p>   <strong>处理方式:</strong></p><ul><li>将 w 染为<strong>红色</strong>, 将 x 的父亲设置为 x 节点, 也即将额外的一个<strong>黑色</strong>传递给其父亲</li></ul><p><strong>注: 源码在实现中, 1, 2步骤之间没有使用else 分开, 而是 if 之后就是另一种情况的 if, 在我的浅略分析来看, 如果其中一种情况处理完后, 一定会满足下一步中的 w 节点为黑的情况, 如果不满足第一个条件, 说明w本身就是==黑色==, 所以经过第一种情况之后, w一定是黑色的, 故只需要判断其他条件即可</strong> </p><ol start="3"><li> x是 <strong>“黑+黑” <strong>节点，w 节点是</strong>黑色</strong>, 且 w 的右儿子<strong>为空</strong>或者<strong>为红色</strong></li></ol><p>   <strong>处理方式:</strong></p><ul><li>如果 w 有左儿子, 就将 w 的左儿子染为<strong>黑色</strong></li><li>将 w 染为<strong>红色</strong></li><li>对 w 进行<strong>右旋</strong></li><li>重新设置 x 的兄弟节点 w</li></ul><p>   接下来就是上文中提到的 <strong>第四种情况</strong> , 但是在实现中, 可能是保证了在对第三种情况处理完之后一定会处于第四种情况, 所以将其并入到第三种情况的操作之中, 这里补充一下这种情况: </p><p>   ​    x 是 <strong>“黑+黑”</strong> 节点，w 是<strong>黑色</strong>；w 的右儿子是<strong>红色</strong>的，w 的左儿子<strong>任意颜色</strong></p><ul><li>将 w 的颜色染为 x 的父亲节点的颜色</li><li>将 x 的父亲节点的颜色染为<strong>黑色</strong></li><li>如果 w 的右儿子存在, 则将其染为<strong>黑色</strong> </li><li>将 x 的父节点左旋</li></ul><p>   在执行完<strong>情况四</strong>的处理之后, 此时红黑树的性质就全部修正好, 此时退出循环就可以了(我并不能明白上面步骤的正确性… 如果有能力且有兴趣的同学可以去看一下证明, 在此我就只介绍如何进行修正操作了…)</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span> (y-&gt;color != __rb_tree_red) &#123; </span><br><span class="line">    <span class="keyword">while</span> (x != root &amp;&amp; (x == <span class="number">0</span> || x-&gt;color == __rb_tree_black))</span><br><span class="line">      <span class="keyword">if</span> (x == x_parent-&gt;left) &#123;</span><br><span class="line">        __rb_tree_node_base* w = x_parent-&gt;right;</span><br><span class="line">        <span class="keyword">if</span> (w-&gt;color == __rb_tree_red) &#123;</span><br><span class="line">          w-&gt;color = __rb_tree_black;</span><br><span class="line">          x_parent-&gt;color = __rb_tree_red;</span><br><span class="line">          __rb_tree_rotate_left(x_parent, root);</span><br><span class="line">          w = x_parent-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((w-&gt;left == <span class="number">0</span> || w-&gt;left-&gt;color == __rb_tree_black) &amp;&amp;</span><br><span class="line">            (w-&gt;right == <span class="number">0</span> || w-&gt;right-&gt;color == __rb_tree_black)) &#123;</span><br><span class="line">          w-&gt;color = __rb_tree_red;</span><br><span class="line">          x = x_parent;</span><br><span class="line">          x_parent = x_parent-&gt;parent;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (w-&gt;right == <span class="number">0</span> || w-&gt;right-&gt;color == __rb_tree_black) &#123;</span><br><span class="line">            <span class="keyword">if</span> (w-&gt;left) w-&gt;left-&gt;color = __rb_tree_black;</span><br><span class="line">            w-&gt;color = __rb_tree_red;</span><br><span class="line">            __rb_tree_rotate_right(w, root);</span><br><span class="line">            w = x_parent-&gt;right;</span><br><span class="line">          &#125;</span><br><span class="line">          w-&gt;color = x_parent-&gt;color;</span><br><span class="line">          x_parent-&gt;color = __rb_tree_black;</span><br><span class="line">          <span class="keyword">if</span> (w-&gt;right) w-&gt;right-&gt;color = __rb_tree_black;</span><br><span class="line">          __rb_tree_rotate_left(x_parent, root);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;                  <span class="comment">// same as above, with right &lt;-&gt; left.</span></span><br><span class="line">        __rb_tree_node_base* w = x_parent-&gt;left;</span><br><span class="line">        <span class="keyword">if</span> (w-&gt;color == __rb_tree_red) &#123;</span><br><span class="line">          w-&gt;color = __rb_tree_black;</span><br><span class="line">          x_parent-&gt;color = __rb_tree_red;</span><br><span class="line">          __rb_tree_rotate_right(x_parent, root);</span><br><span class="line">          w = x_parent-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((w-&gt;right == <span class="number">0</span> || w-&gt;right-&gt;color == __rb_tree_black) &amp;&amp;</span><br><span class="line">            (w-&gt;left == <span class="number">0</span> || w-&gt;left-&gt;color == __rb_tree_black)) &#123;</span><br><span class="line">          w-&gt;color = __rb_tree_red;</span><br><span class="line">          x = x_parent;</span><br><span class="line">          x_parent = x_parent-&gt;parent;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (w-&gt;left == <span class="number">0</span> || w-&gt;left-&gt;color == __rb_tree_black) &#123;</span><br><span class="line">            <span class="keyword">if</span> (w-&gt;right) w-&gt;right-&gt;color = __rb_tree_black;</span><br><span class="line">            w-&gt;color = __rb_tree_red;</span><br><span class="line">            __rb_tree_rotate_left(w, root);</span><br><span class="line">            w = x_parent-&gt;left;</span><br><span class="line">          &#125;</span><br><span class="line">          w-&gt;color = x_parent-&gt;color;</span><br><span class="line">          x_parent-&gt;color = __rb_tree_black;</span><br><span class="line">          <span class="keyword">if</span> (w-&gt;left) w-&gt;left-&gt;color = __rb_tree_black;</span><br><span class="line">          __rb_tree_rotate_right(x_parent, root);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">if</span> (x) x-&gt;color = __rb_tree_black;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RB-tree-1"><a href="#RB-tree-1" class="headerlink" title="RB-tree"></a>RB-tree</h2><h3 id="RB-tree-基本类型定义"><a href="#RB-tree-基本类型定义" class="headerlink" title="RB-tree 基本类型定义"></a>RB-tree 基本类型定义</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">KeyOfValue</span>, <span class="keyword">class</span> <span class="title">Compare</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">rb_tree</span> &#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">void</span>* void_pointer;</span><br><span class="line">  <span class="keyword">typedef</span> __rb_tree_node_base* base_ptr;<span class="comment">// 定义节点指针</span></span><br><span class="line">  <span class="keyword">typedef</span> __rb_tree_node&lt;Value&gt; rb_tree_node;<span class="comment">// 定义节点</span></span><br><span class="line">  <span class="keyword">typedef</span> simple_alloc&lt;rb_tree_node, Alloc&gt; rb_tree_node_allocator;<span class="comment">// 定义空间配置器</span></span><br><span class="line">  <span class="keyword">typedef</span> __rb_tree_color_type color_type;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 满足traits编程</span></span><br><span class="line">  <span class="keyword">typedef</span> Key key_type;</span><br><span class="line">  <span class="keyword">typedef</span> Value value_type;</span><br><span class="line">  <span class="keyword">typedef</span> value_type* pointer;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">const</span> value_type* const_pointer;</span><br><span class="line">  <span class="keyword">typedef</span> value_type&amp; reference;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">const</span> value_type&amp; const_reference;</span><br><span class="line">  <span class="keyword">typedef</span> rb_tree_node* link_type;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">size_t</span> size_type;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span> difference_type;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  size_type node_count; <span class="comment">// keeps track of size of tree</span></span><br><span class="line">  link_type header;  <span class="comment">// 头节点, 不是根节点, 头节点是指向根节点</span></span><br><span class="line">  Compare key_compare;<span class="comment">// 伪函数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 定义迭代器</span></span><br><span class="line">  <span class="keyword">typedef</span> __rb_tree_iterator&lt;value_type, reference, pointer&gt; iterator;</span><br><span class="line">  <span class="keyword">typedef</span> __rb_tree_iterator&lt;value_type, const_reference, const_pointer&gt; </span><br><span class="line">          const_iterator;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STL_CLASS_PARTIAL_SPECIALIZATION</span></span><br><span class="line">  <span class="keyword">typedef</span> reverse_iterator&lt;const_iterator&gt; const_reverse_iterator;</span><br><span class="line">  <span class="keyword">typedef</span> reverse_iterator&lt;iterator&gt; reverse_iterator;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* __STL_CLASS_PARTIAL_SPECIALIZATION */</span></span></span><br><span class="line">  <span class="keyword">typedef</span> reverse_bidirectional_iterator&lt;iterator, value_type, reference,</span><br><span class="line">                                         difference_type&gt;</span><br><span class="line">          reverse_iterator; </span><br><span class="line">  <span class="keyword">typedef</span> reverse_bidirectional_iterator&lt;const_iterator, value_type,</span><br><span class="line">                                         const_reference, difference_type&gt;</span><br><span class="line">          const_reverse_iterator;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="获取节点属性"><a href="#获取节点属性" class="headerlink" title="获取节点属性"></a>获取节点属性</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">KeyOfValue</span>, <span class="keyword">class</span> <span class="title">Compare</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">rb_tree</span> &#123;</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  <span class="function">link_type&amp; <span class="title">root</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> (link_type&amp;) header-&gt;parent; &#125;<span class="comment">// 获取根节点</span></span><br><span class="line">  <span class="function">link_type&amp; <span class="title">leftmost</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> (link_type&amp;) header-&gt;left; &#125;<span class="comment">// 最小节点</span></span><br><span class="line">  <span class="function">link_type&amp; <span class="title">rightmost</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> (link_type&amp;) header-&gt;right; &#125;<span class="comment">// 最大节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前节点的左节点</span></span><br><span class="line"><span class="comment">// 当前节点的右节点</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> link_type&amp; <span class="title">left</span><span class="params">(link_type x)</span> </span>&#123; <span class="keyword">return</span> (link_type&amp;)(x-&gt;left); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> link_type&amp; <span class="title">right</span><span class="params">(link_type x)</span> </span>&#123; <span class="keyword">return</span> (link_type&amp;)(x-&gt;right); &#125;</span><br><span class="line">    <span class="comment">//获取父亲节点</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> link_type&amp; <span class="title">parent</span><span class="params">(link_type x)</span> </span>&#123; <span class="keyword">return</span> (link_type&amp;)(x-&gt;parent); &#125;</span><br><span class="line">    <span class="comment">// 获取节点数据</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> reference <span class="title">value</span><span class="params">(link_type x)</span> </span>&#123; <span class="keyword">return</span> x-&gt;value_field; &#125;\</span><br><span class="line">    <span class="comment">// 从节点数据中获取 key 值</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">const</span> Key&amp; <span class="title">key</span><span class="params">(link_type x)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">KeyOfValue</span>()(<span class="built_in">value</span>(x)); &#125;</span><br><span class="line">    <span class="comment">// 获取节点颜色</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> color_type&amp; <span class="title">color</span><span class="params">(link_type x)</span> </span>&#123; <span class="keyword">return</span> (color_type&amp;)(x-&gt;color); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对于传入的 base 指针的重载版</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> link_type&amp; <span class="title">left</span><span class="params">(base_ptr x)</span> </span>&#123; <span class="keyword">return</span> (link_type&amp;)(x-&gt;left); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> link_type&amp; <span class="title">right</span><span class="params">(base_ptr x)</span> </span>&#123; <span class="keyword">return</span> (link_type&amp;)(x-&gt;right); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> link_type&amp; <span class="title">parent</span><span class="params">(base_ptr x)</span> </span>&#123; <span class="keyword">return</span> (link_type&amp;)(x-&gt;parent); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> reference <span class="title">value</span><span class="params">(base_ptr x)</span> </span>&#123; <span class="keyword">return</span> ((link_type)x)-&gt;value_field; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">const</span> Key&amp; <span class="title">key</span><span class="params">(base_ptr x)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">KeyOfValue</span>()(<span class="built_in">value</span>(<span class="built_in">link_type</span>(x)));&#125; </span><br><span class="line">  <span class="function"><span class="keyword">static</span> color_type&amp; <span class="title">color</span><span class="params">(base_ptr x)</span> </span>&#123; <span class="keyword">return</span> (color_type&amp;)(<span class="built_in">link_type</span>(x)-&gt;color); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最小节点</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> link_type <span class="title">minimum</span><span class="params">(link_type x)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> (link_type)  __rb_tree_node_base::<span class="built_in">minimum</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 最大节点</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> link_type <span class="title">maximum</span><span class="params">(link_type x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (link_type) __rb_tree_node_base::<span class="built_in">maximum</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">                                <span class="comment">// accessors:</span></span><br><span class="line">  <span class="function">Compare <span class="title">key_comp</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> key_compare; &#125;</span><br><span class="line">  <span class="comment">// begin() 获取的是最小节点</span></span><br><span class="line">  <span class="function">iterator <span class="title">begin</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">leftmost</span>(); &#125;</span><br><span class="line">  <span class="function">const_iterator <span class="title">begin</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">leftmost</span>(); &#125;</span><br><span class="line">  <span class="comment">// end() 为头节点</span></span><br><span class="line">  <span class="function">iterator <span class="title">end</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> header; &#125;</span><br><span class="line">  <span class="function">const_iterator <span class="title">end</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> header; &#125;</span><br><span class="line">  <span class="function">reverse_iterator <span class="title">rbegin</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">reverse_iterator</span>(<span class="built_in">end</span>()); &#125;</span><br><span class="line">  <span class="function">const_reverse_iterator <span class="title">rbegin</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">const_reverse_iterator</span>(<span class="built_in">end</span>()); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">reverse_iterator <span class="title">rend</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">reverse_iterator</span>(<span class="built_in">begin</span>()); &#125;</span><br><span class="line">  <span class="function">const_reverse_iterator <span class="title">rend</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">const_reverse_iterator</span>(<span class="built_in">begin</span>());</span><br><span class="line">  &#125; </span><br><span class="line">   <span class="comment">//判断是否树为空</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> node_count == <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="comment">// 返回节点数</span></span><br><span class="line">  <span class="function">size_type <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> node_count; &#125;</span><br><span class="line">  <span class="function">size_type <span class="title">max_size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">size_type</span>(<span class="number">-1</span>); &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="构造析构函数"><a href="#构造析构函数" class="headerlink" title="构造析构函数"></a>构造析构函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">KeyOfValue</span>, <span class="keyword">class</span> <span class="title">Compare</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">rb_tree</span> &#123;</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span>:                          <span class="comment">// allocation/deallocation</span></span><br><span class="line">  <span class="built_in">rb_tree</span>(<span class="keyword">const</span> Compare&amp; comp = <span class="built_in">Compare</span>())</span><br><span class="line">    : <span class="built_in">node_count</span>(<span class="number">0</span>), <span class="built_in">key_compare</span>(comp) &#123; <span class="built_in">init</span>(); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">rb_tree</span>(<span class="keyword">const</span> rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;&amp; x) : <span class="built_in">node_count</span>(<span class="number">0</span>), <span class="built_in">key_compare</span>(x.key_compare)</span><br><span class="line">  &#123; </span><br><span class="line">    header = <span class="built_in">get_node</span>();</span><br><span class="line">      <span class="comment">//头节点默认为红色</span></span><br><span class="line">    <span class="built_in">color</span>(header) = __rb_tree_red;</span><br><span class="line">    <span class="keyword">if</span> (x.<span class="built_in">root</span>() == <span class="number">0</span>) &#123;<span class="comment">// 如果x为根节点</span></span><br><span class="line">      <span class="built_in">root</span>() = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">leftmost</span>() = header;<span class="comment">// 左孩子指向根节点</span></span><br><span class="line">      <span class="built_in">rightmost</span>() = header;<span class="comment">// 右孩子指向根节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      __STL_TRY &#123;</span><br><span class="line">        <span class="built_in">root</span>() = __copy(x.<span class="built_in">root</span>(), header);</span><br><span class="line">      &#125;</span><br><span class="line">      __STL_UNWIND(<span class="built_in">put_node</span>(header));</span><br><span class="line">      <span class="built_in">leftmost</span>() = <span class="built_in">minimum</span>(<span class="built_in">root</span>());<span class="comment">// 左孩子始终指向最小的节点</span></span><br><span class="line">      <span class="built_in">rightmost</span>() = <span class="built_in">maximum</span>(<span class="built_in">root</span>());<span class="comment">// 右孩子始终指向最大的节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    node_count = x.node_count;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 析构函数</span></span><br><span class="line">  ~<span class="built_in">rb_tree</span>() &#123;</span><br><span class="line">    <span class="built_in">clear</span>();<span class="comment">// 清除或有节点</span></span><br><span class="line">    <span class="built_in">put_node</span>(header);<span class="comment">// 释放所有空间</span></span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><p><strong>RB-tree</strong> 交换只是交换了<strong>头节点</strong>, <strong>节点数</strong>和用于比较的<strong>仿函数</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">KeyOfValue</span>, <span class="keyword">class</span> <span class="title">Compare</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">rb_tree</span> &#123;</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;&amp; t)</span> </span>&#123;</span><br><span class="line">    __STD::<span class="built_in">swap</span>(header, t.header);</span><br><span class="line">    __STD::<span class="built_in">swap</span>(node_count, t.node_count);</span><br><span class="line">    __STD::<span class="built_in">swap</span>(key_compare, t.key_compare);</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">KeyOfValue</span>, <span class="keyword">class</span> <span class="title">Compare</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;&amp; x, </span></span></span><br><span class="line"><span class="params"><span class="function">                 rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;&amp; y)</span> </span>&#123;</span><br><span class="line">  x.<span class="built_in">swap</span>(y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重载运算符"><a href="#重载运算符" class="headerlink" title="重载运算符"></a>重载运算符</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相等比较</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">KeyOfValue</span>, <span class="keyword">class</span> <span class="title">Compare</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;&amp; x, </span><br><span class="line">                       <span class="keyword">const</span> rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;&amp; y) &#123;</span><br><span class="line">  <span class="keyword">return</span> x.<span class="built_in">size</span>() == y.<span class="built_in">size</span>() &amp;&amp; <span class="built_in">equal</span>(x.<span class="built_in">begin</span>(), x.<span class="built_in">end</span>(), y.<span class="built_in">begin</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">KeyOfValue</span>, <span class="keyword">class</span> <span class="title">Compare</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;&amp; x, </span><br><span class="line">                      <span class="keyword">const</span> rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;&amp; y) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">lexicographical_compare</span>(x.<span class="built_in">begin</span>(), x.<span class="built_in">end</span>(), y.<span class="built_in">begin</span>(), y.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载=运算符</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">KeyOfValue</span>, <span class="keyword">class</span> <span class="title">Compare</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line">rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;&amp; </span><br><span class="line">rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;::</span><br><span class="line"><span class="keyword">operator</span>=(<span class="keyword">const</span> rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;&amp; x) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span> != &amp;x) &#123;</span><br><span class="line">                                <span class="comment">// Note that Key may be a constant type.</span></span><br><span class="line"><span class="comment">//删除所有节点</span></span><br><span class="line">    <span class="built_in">clear</span>();</span><br><span class="line">    node_count = <span class="number">0</span>;</span><br><span class="line">    key_compare = x.key_compare;        </span><br><span class="line"><span class="comment">//给每一个节点进行赋值</span></span><br><span class="line">    <span class="keyword">if</span> (x.<span class="built_in">root</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">root</span>() = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">leftmost</span>() = header;</span><br><span class="line">      <span class="built_in">rightmost</span>() = header;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">root</span>() = __copy(x.<span class="built_in">root</span>(), header);</span><br><span class="line">      <span class="built_in">leftmost</span>() = <span class="built_in">minimum</span>(<span class="built_in">root</span>());</span><br><span class="line">      <span class="built_in">rightmost</span>() = <span class="built_in">maximum</span>(<span class="built_in">root</span>());</span><br><span class="line">      node_count = x.node_count;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RB-tree-操作方法简介"><a href="#RB-tree-操作方法简介" class="headerlink" title="RB-tree 操作方法简介"></a>RB-tree 操作方法简介</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">KeyOfValue</span>, <span class="keyword">class</span> <span class="title">Compare</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">rb_tree</span> &#123;</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  iterator __insert(base_ptr x, base_ptr y, <span class="keyword">const</span> value_type&amp; v);</span><br><span class="line"><span class="comment">//将 x 为根的树赋值给, 父节点指向 p 的根的树</span></span><br><span class="line">  link_type __copy(link_type x, link_type p);</span><br><span class="line">    <span class="comment">// 删除节点 x</span></span><br><span class="line">  <span class="keyword">void</span> __erase(link_type x);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">                                <span class="comment">// insert/erase</span></span><br><span class="line">    <span class="comment">//只允许插入不存在的数据</span></span><br><span class="line">  <span class="function">pair&lt;iterator,<span class="keyword">bool</span>&gt; <span class="title">insert_unique</span><span class="params">(<span class="keyword">const</span> value_type&amp; x)</span></span>;</span><br><span class="line">    <span class="comment">//寻找要在哪一个节点下插入</span></span><br><span class="line">  <span class="function">iterator <span class="title">insert_equal</span><span class="params">(<span class="keyword">const</span> value_type&amp; x)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在 pos 处插入不重复的数据</span></span><br><span class="line">  <span class="function">iterator <span class="title">insert_unique</span><span class="params">(iterator position, <span class="keyword">const</span> value_type&amp; x)</span></span>;</span><br><span class="line">    <span class="comment">// 在 pos 处插入可重复的数据</span></span><br><span class="line">  <span class="function">iterator <span class="title">insert_equal</span><span class="params">(iterator position, <span class="keyword">const</span> value_type&amp; x)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 将两个迭代器之间的数据插入 unique(数据不可重复), equal(数据可以重复)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STL_MEMBER_TEMPLATES  </span></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>&gt;</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">insert_unique</span><span class="params">(InputIterator first, InputIterator last)</span></span>;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>&gt;</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">insert_equal</span><span class="params">(InputIterator first, InputIterator last)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* __STL_MEMBER_TEMPLATES */</span></span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">insert_unique</span><span class="params">(const_iterator first, const_iterator last)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">insert_unique</span><span class="params">(<span class="keyword">const</span> value_type* first, <span class="keyword">const</span> value_type* last)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">insert_equal</span><span class="params">(const_iterator first, const_iterator last)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">insert_equal</span><span class="params">(<span class="keyword">const</span> value_type* first, <span class="keyword">const</span> value_type* last)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __STL_MEMBER_TEMPLATES */</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除 pos 处的节点</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(iterator position)</span></span>;</span><br><span class="line">    <span class="comment">// 删除值为 x 的节点</span></span><br><span class="line">  <span class="function">size_type <span class="title">erase</span><span class="params">(<span class="keyword">const</span> key_type&amp; x)</span></span>;</span><br><span class="line">    <span class="comment">// 删除两个迭代器之间的元素</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(iterator first, iterator last)</span></span>;</span><br><span class="line">    <span class="comment">// 重载的指针版本</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">const</span> key_type* first, <span class="keyword">const</span> key_type* last)</span></span>;</span><br><span class="line">     </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">                                <span class="comment">// set operations:</span></span><br><span class="line">    <span class="comment">// 查询值为 x 的节点</span></span><br><span class="line">  <span class="function">iterator <span class="title">find</span><span class="params">(<span class="keyword">const</span> key_type&amp; x)</span></span>;</span><br><span class="line">  <span class="function">const_iterator <span class="title">find</span><span class="params">(<span class="keyword">const</span> key_type&amp; x)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="comment">// 值为 x 的节点数量</span></span><br><span class="line">  <span class="function">size_type <span class="title">count</span><span class="params">(<span class="keyword">const</span> key_type&amp; x)</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function">iterator <span class="title">lower_bound</span><span class="params">(<span class="keyword">const</span> key_type&amp; x)</span></span>;</span><br><span class="line">  <span class="function">const_iterator <span class="title">lower_bound</span><span class="params">(<span class="keyword">const</span> key_type&amp; x)</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function">iterator <span class="title">upper_bound</span><span class="params">(<span class="keyword">const</span> key_type&amp; x)</span></span>;</span><br><span class="line">  <span class="function">const_iterator <span class="title">upper_bound</span><span class="params">(<span class="keyword">const</span> key_type&amp; x)</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function">pair&lt;iterator,iterator&gt; <span class="title">equal_range</span><span class="params">(<span class="keyword">const</span> key_type&amp; x)</span></span>;</span><br><span class="line">  <span class="function">pair&lt;const_iterator, const_iterator&gt; <span class="title">equal_range</span><span class="params">(<span class="keyword">const</span> key_type&amp; x)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">                                <span class="comment">// Debugging.</span></span><br><span class="line">  <span class="keyword">bool</span> __rb_verify() <span class="keyword">const</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这里只具体分析插入和删除的情况</p><h3 id="插入方法"><a href="#插入方法" class="headerlink" title="插入方法"></a>插入方法</h3><h4 id="insert-base-ptr-x-base-ptr-y-const-Value-amp-v"><a href="#insert-base-ptr-x-base-ptr-y-const-Value-amp-v" class="headerlink" title="_insert(base_ptr x, base_ptr y, const Value&amp; v)"></a>_<em><em>insert(base_ptr x</em>, base_ptr y</em>, const Value&amp; v)</h4><p>以 <strong>y</strong> 为父节点插入值为 <strong>v</strong> 的节点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">KeyOfValue</span>, <span class="keyword">class</span> <span class="title">Compare</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">typename</span> rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;::iterator</span><br><span class="line">rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;::</span><br><span class="line">__insert(base_ptr x_, base_ptr y_, <span class="keyword">const</span> Value&amp; v) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// x为要插入的节点</span></span><br><span class="line">    <span class="comment">// y : 插入节点的父节点</span></span><br><span class="line">    <span class="comment">// v : 插入节点的数据</span></span><br><span class="line">  link_type x = (link_type) x_;</span><br><span class="line">  link_type y = (link_type) y_;</span><br><span class="line">  link_type z;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果y是头节点, 将插入的节点设置为根节点</span></span><br><span class="line">  <span class="keyword">if</span> (y == header || x != <span class="number">0</span> || <span class="built_in">key_compare</span>(<span class="built_in">KeyOfValue</span>()(v), <span class="built_in">key</span>(y))) &#123;</span><br><span class="line">    z = <span class="built_in">create_node</span>(v);</span><br><span class="line">      <span class="comment">// 左节点指向z</span></span><br><span class="line">    <span class="built_in">left</span>(y) = z;                <span class="comment">// also makes leftmost() = z when y == header</span></span><br><span class="line">      <span class="comment">// y是头节点, 根节点就是z</span></span><br><span class="line">    <span class="keyword">if</span> (y == header) &#123;</span><br><span class="line">      <span class="built_in">root</span>() = z;</span><br><span class="line">      <span class="built_in">rightmost</span>() = z;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="comment">// 如果y是最小节点, 则把z修改为最小节点</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (y == <span class="built_in">leftmost</span>())</span><br><span class="line">      <span class="built_in">leftmost</span>() = z;           <span class="comment">// maintain leftmost() pointing to min node</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    z = <span class="built_in">create_node</span>(v);</span><br><span class="line">    <span class="built_in">right</span>(y) = z;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="built_in">rightmost</span>())</span><br><span class="line">      <span class="built_in">rightmost</span>() = z;          <span class="comment">// maintain rightmost() pointing to max node</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">parent</span>(z) = y;</span><br><span class="line">  <span class="built_in">left</span>(z) = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">right</span>(z) = <span class="number">0</span>;</span><br><span class="line">  __rb_tree_rebalance(z, header-&gt;parent);</span><br><span class="line"><span class="comment">// 节点数增加 1</span></span><br><span class="line">  ++node_count;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">iterator</span>(z);<span class="comment">// 返回节点z迭代器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法中的<strong>参数 x</strong>其实并没有什么实际用处, 只是为了方便函数的重载</p><h4 id="insert-equal-const-Value-amp-v"><a href="#insert-equal-const-Value-amp-v" class="headerlink" title="insert_equal(const Value&amp; v)"></a>insert_equal(const Value&amp; v)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找到要在哪一个节点下插入</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">KeyOfValue</span>, <span class="keyword">class</span> <span class="title">Compare</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">typename</span> rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;::iterator</span><br><span class="line">rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;::<span class="built_in">insert_equal</span>(<span class="keyword">const</span> Value&amp; v)</span><br><span class="line">&#123;</span><br><span class="line">  link_type y = header;</span><br><span class="line">  link_type x = <span class="built_in">root</span>();</span><br><span class="line">  <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">    y = x;</span><br><span class="line">    x = <span class="built_in">key_compare</span>(<span class="built_in">KeyOfValue</span>()(v), <span class="built_in">key</span>(x)) ? <span class="built_in">left</span>(x) : <span class="built_in">right</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __insert(x, y, v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不允许重复插入-pair-lt-iterator-bool-gt-insert-unique-const-Value-amp-v"><a href="#不允许重复插入-pair-lt-iterator-bool-gt-insert-unique-const-Value-amp-v" class="headerlink" title="不允许重复插入 pair&lt;iterator, bool&gt; insert_unique(const Value&amp; v)"></a>不允许重复插入 pair&lt;iterator, bool&gt; insert_unique(const Value&amp; v)</h4><p>第二个参数如果为 <strong>true</strong>, 则说明插入成功, 反之则失败</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">KeyOfValue</span>, <span class="keyword">class</span> <span class="title">Compare</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line">pair&lt;<span class="keyword">typename</span> rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;::iterator, <span class="keyword">bool</span>&gt;</span><br><span class="line">rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;::<span class="built_in">insert_unique</span>(<span class="keyword">const</span> Value&amp; v)</span><br><span class="line">&#123;</span><br><span class="line">  link_type y = header;</span><br><span class="line">  link_type x = <span class="built_in">root</span>();</span><br><span class="line">  <span class="keyword">bool</span> comp = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 找到合适的节点</span></span><br><span class="line">  <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">    y = x;</span><br><span class="line">    comp = <span class="built_in">key_compare</span>(<span class="built_in">KeyOfValue</span>()(v), <span class="built_in">key</span>(x));</span><br><span class="line">    x = comp ? <span class="built_in">left</span>(x) : <span class="built_in">right</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  iterator j = <span class="built_in">iterator</span>(y);   </span><br><span class="line">  <span class="keyword">if</span> (comp)</span><br><span class="line">    <span class="keyword">if</span> (j == <span class="built_in">begin</span>())     </span><br><span class="line">      <span class="keyword">return</span> pair&lt;iterator,<span class="keyword">bool</span>&gt;(__insert(x, y, v), <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      --j;</span><br><span class="line">    <span class="comment">// 找到插入的节点是否已经存在了</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">key_compare</span>(<span class="built_in">key</span>(j.node), <span class="built_in">KeyOfValue</span>()(v)))</span><br><span class="line">    <span class="keyword">return</span> pair&lt;iterator,<span class="keyword">bool</span>&gt;(__insert(x, y, v), <span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">return</span> pair&lt;iterator,<span class="keyword">bool</span>&gt;(j, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">Val</span>, <span class="keyword">class</span> <span class="title">KeyOfValue</span>, <span class="keyword">class</span> <span class="title">Compare</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">typename</span> rb_tree&lt;Key, Val, KeyOfValue, Compare, Alloc&gt;::iterator </span><br><span class="line">rb_tree&lt;Key, Val, KeyOfValue, Compare, Alloc&gt;::<span class="built_in">insert_unique</span>(iterator position,<span class="keyword">const</span> Val&amp; v) </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (position.node == header-&gt;left) <span class="comment">// begin()</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">size</span>() &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">key_compare</span>(<span class="built_in">KeyOfValue</span>()(v), <span class="built_in">key</span>(position.node)))</span><br><span class="line">      <span class="keyword">return</span> __insert(position.node, position.node, v);</span><br><span class="line">  <span class="comment">// first argument just needs to be non-null </span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">insert_unique</span>(v).first;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (position.node == header) <span class="comment">// end()</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">key_compare</span>(<span class="built_in">key</span>(<span class="built_in">rightmost</span>()), <span class="built_in">KeyOfValue</span>()(v)))</span><br><span class="line">      <span class="keyword">return</span> __insert(<span class="number">0</span>, <span class="built_in">rightmost</span>(), v);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">insert_unique</span>(v).first;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    iterator before = position;</span><br><span class="line">    --before;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">key_compare</span>(<span class="built_in">key</span>(before.node), <span class="built_in">KeyOfValue</span>()(v))</span><br><span class="line">        &amp;&amp; <span class="built_in">key_compare</span>(<span class="built_in">KeyOfValue</span>()(v), <span class="built_in">key</span>(position.node)))</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">right</span>(before.node) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> __insert(<span class="number">0</span>, before.node, v); </span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> __insert(position.node, position.node, v);</span><br><span class="line">    <span class="comment">// first argument just needs to be non-null </span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">insert_unique</span>(v).first;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="允许重复插入-iterator-insert-equal-iterator-position-const-Val-amp-v"><a href="#允许重复插入-iterator-insert-equal-iterator-position-const-Val-amp-v" class="headerlink" title="允许重复插入 iterator insert_equal(iterator position, const Val&amp; v)"></a>允许重复插入 iterator insert_equal(iterator position, const Val&amp; v)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">Val</span>, <span class="keyword">class</span> <span class="title">KeyOfValue</span>, <span class="keyword">class</span> <span class="title">Compare</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">typename</span> rb_tree&lt;Key, Val, KeyOfValue, Compare, Alloc&gt;::iterator </span><br><span class="line">rb_tree&lt;Key, Val, KeyOfValue, Compare, Alloc&gt;::<span class="built_in">insert_equal</span>(iterator position,</span><br><span class="line">                                                            <span class="keyword">const</span> Val&amp; v) &#123;</span><br><span class="line">  <span class="keyword">if</span> (position.node == header-&gt;left) <span class="comment">// begin()</span></span><br><span class="line">      <span class="comment">// 如果树不为空, 且小于最小值, 就插入到最小值的左儿子</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">size</span>() &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">key_compare</span>(<span class="built_in">KeyOfValue</span>()(v), <span class="built_in">key</span>(position.node)))</span><br><span class="line">      <span class="keyword">return</span> __insert(position.node, position.node, v);</span><br><span class="line">  <span class="comment">// first argument just needs to be non-null </span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">insert_equal</span>(v);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (position.node == header) <span class="comment">// end()</span></span><br><span class="line">      <span class="comment">// 如果当前值大于最大值就插入到最大值的右儿子上</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">key_compare</span>(<span class="built_in">KeyOfValue</span>()(v), <span class="built_in">key</span>(<span class="built_in">rightmost</span>())))</span><br><span class="line">      <span class="keyword">return</span> __insert(<span class="number">0</span>, <span class="built_in">rightmost</span>(), v);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">insert_equal</span>(v);</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    iterator before = position;</span><br><span class="line">    --before;</span><br><span class="line">      <span class="comment">// 如果新插入的值介于要插入节点和要插入节点前驱中间</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">key_compare</span>(<span class="built_in">KeyOfValue</span>()(v), <span class="built_in">key</span>(before.node))</span><br><span class="line">        &amp;&amp; !<span class="built_in">key_compare</span>(<span class="built_in">key</span>(position.node), <span class="built_in">KeyOfValue</span>()(v)))</span><br><span class="line">        <span class="comment">// 如果前驱的右儿子节点为空 就插入到前驱的右儿子上</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">right</span>(before.node) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> __insert(<span class="number">0</span>, before.node, v); </span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">          <span class="comment">// 否则插入到当前节点的左儿子上</span></span><br><span class="line">        <span class="keyword">return</span> __insert(position.node, position.node, v);</span><br><span class="line">    <span class="comment">// first argument just needs to be non-null </span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">insert_equal</span>(v);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="范围的可重复插入以及范围的不可重复插入"><a href="#范围的可重复插入以及范围的不可重复插入" class="headerlink" title="范围的可重复插入以及范围的不可重复插入"></a>范围的可重复插入以及范围的不可重复插入</h4><p>其本质就是重复调用 <code>insert_unique</code> 和 <code>insert_equal</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 范围插入(可以重复)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">K</span>, <span class="keyword">class</span> <span class="title">V</span>, <span class="keyword">class</span> <span class="title">KoV</span>, <span class="keyword">class</span> <span class="title">Cmp</span>, <span class="keyword">class</span> <span class="title">Al</span>&gt;</span> <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">II</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> rb_tree&lt;K, V, KoV, Cmp, Al&gt;::<span class="built_in">insert_equal</span>(II first, II last) &#123;</span><br><span class="line">  <span class="keyword">for</span> ( ; first != last; ++first)</span><br><span class="line">    <span class="built_in">insert_equal</span>(*first);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 范围插入(不可重复)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">K</span>, <span class="keyword">class</span> <span class="title">V</span>, <span class="keyword">class</span> <span class="title">KoV</span>, <span class="keyword">class</span> <span class="title">Cmp</span>, <span class="keyword">class</span> <span class="title">Al</span>&gt;</span> <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">II</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> rb_tree&lt;K, V, KoV, Cmp, Al&gt;::<span class="built_in">insert_unique</span>(II first, II last) &#123;</span><br><span class="line">  <span class="keyword">for</span> ( ; first != last; ++first)</span><br><span class="line">    <span class="built_in">insert_unique</span>(*first);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里只列举了一部分重载方法</p><h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><ul><li><p>首先定义了单节点删除的方法, 其内部调用了 <code>__rb_tree_rebalance_for_erase</code> 来实现单节点的删除以及解决红黑树在删除后出现的染色规则被打破的问题</p></li><li><p>重载了一个递归删除以 x 为根的子树的删除方法, 这个方法内部是没有调整方法的</p></li><li><p>区间删除方法则是重复调用<strong>单节点删除</strong>方法来实现多节点的删除</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">KeyOfValue</span>, <span class="keyword">class</span> <span class="title">Compare</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span></span><br><span class="line">rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;::<span class="built_in">erase</span>(iterator position) &#123;</span><br><span class="line">  link_type y = (link_type) __rb_tree_rebalance_for_erase(position.node,</span><br><span class="line">                                                          header-&gt;parent,</span><br><span class="line">                                                          header-&gt;left,</span><br><span class="line">                                                          header-&gt;right);</span><br><span class="line">  <span class="built_in">destroy_node</span>(y);<span class="comment">// 释放空间</span></span><br><span class="line">  --node_count;<span class="comment">// 节点数--</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">KeyOfValue</span>, <span class="keyword">class</span> <span class="title">Compare</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;::__erase(link_type x) &#123;</span><br><span class="line">                                <span class="comment">// erase without rebalancing</span></span><br><span class="line">   <span class="comment">// 递归删除x指向的所有节点</span></span><br><span class="line">  <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">    __erase(<span class="built_in">right</span>(x));</span><br><span class="line">    link_type y = <span class="built_in">left</span>(x);</span><br><span class="line">    <span class="built_in">destroy_node</span>(x);</span><br><span class="line">    x = y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 范围删除节点</span></span><br><span class="line"><span class="comment">// 调用erase函数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">KeyOfValue</span>, <span class="keyword">class</span> <span class="title">Compare</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;::<span class="built_in">erase</span>(iterator first, </span><br><span class="line">                                                            iterator last) &#123;</span><br><span class="line">  <span class="keyword">if</span> (first == <span class="built_in">begin</span>() &amp;&amp; last == <span class="built_in">end</span>())</span><br><span class="line">    <span class="built_in">clear</span>();</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">while</span> (first != last) <span class="built_in">erase</span>(first++);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">KeyOfValue</span>, <span class="keyword">class</span> <span class="title">Compare</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;::<span class="built_in">erase</span>(<span class="keyword">const</span> Key* first, </span><br><span class="line">                                                            <span class="keyword">const</span> Key* last) &#123;</span><br><span class="line">  <span class="keyword">while</span> (first != last) <span class="built_in">erase</span>(*first++);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">KeyOfValue</span>, <span class="keyword">class</span> <span class="title">Compare</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">typename</span> rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;::size_type </span><br><span class="line">rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;::<span class="built_in">erase</span>(<span class="keyword">const</span> Key&amp; x) &#123;</span><br><span class="line">  pair&lt;iterator,iterator&gt; p = <span class="built_in">equal_range</span>(x);</span><br><span class="line">  size_type n = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 计算长度, erase进行删除</span></span><br><span class="line">  <span class="built_in">distance</span>(p.first, p.second, n);</span><br><span class="line">  <span class="built_in">erase</span>(p.first, p.second);</span><br><span class="line">  <span class="keyword">return</span> n;<span class="comment">// 返回删除的个数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将以 x 为根的树复制 并将其根的父节点指向 p</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">K</span>, <span class="keyword">class</span> <span class="title">V</span>, <span class="keyword">class</span> <span class="title">KeyOfValue</span>, <span class="keyword">class</span> <span class="title">Compare</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">typename</span> rb_tree&lt;K, V, KeyOfValue, Compare, Alloc&gt;::link_type </span><br><span class="line">rb_tree&lt;K, V, KeyOfValue, Compare, Alloc&gt;::__copy(link_type x, link_type p) &#123;</span><br><span class="line">                                <span class="comment">// structural copy.  x and p must be non-null.</span></span><br><span class="line">  <span class="comment">//复制当前子树的根节点为 top</span></span><br><span class="line">  link_type top = <span class="built_in">clone_node</span>(x);</span><br><span class="line">  <span class="comment">// 将 top 的父节点指向 p  </span></span><br><span class="line">  top-&gt;parent = p;</span><br><span class="line"> </span><br><span class="line">  __STL_TRY &#123;</span><br><span class="line">    <span class="comment">// x 的右子树存在, 就继续递归将 x 的右子树复制并将父节点指向 top</span></span><br><span class="line">    <span class="keyword">if</span> (x-&gt;right)</span><br><span class="line">      top-&gt;right = __copy(<span class="built_in">right</span>(x), top);</span><br><span class="line">    p = top;</span><br><span class="line">    <span class="comment">// 令 x 指向其左儿子</span></span><br><span class="line">    x = <span class="built_in">left</span>(x);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只要 x 节点存在</span></span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// y 为复制当前 x 的节点</span></span><br><span class="line">      link_type y = <span class="built_in">clone_node</span>(x);</span><br><span class="line">      <span class="comment">// p 的左儿子指向 y, y 的父节点指向 p</span></span><br><span class="line">      p-&gt;left = y;</span><br><span class="line">      y-&gt;parent = p;</span><br><span class="line">      <span class="comment">// x的右儿子存在</span></span><br><span class="line">      <span class="keyword">if</span> (x-&gt;right)</span><br><span class="line">        <span class="comment">// 递归复制右儿子</span></span><br><span class="line">        y-&gt;right = __copy(<span class="built_in">right</span>(x), y);</span><br><span class="line">      p = y;</span><br><span class="line">      x = <span class="built_in">left</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果有节点分配失败就将所有的空间进行释放</span></span><br><span class="line">  __STL_UNWIND(__erase(top));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回复制的当前子树的根节点</span></span><br><span class="line">  <span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="find-查询方法"><a href="#find-查询方法" class="headerlink" title="find 查询方法"></a>find 查询方法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">KeyOfValue</span>, <span class="keyword">class</span> <span class="title">Compare</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">typename</span> rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;::iterator </span><br><span class="line">rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;::<span class="built_in">find</span>(<span class="keyword">const</span> Key&amp; k) &#123;</span><br><span class="line">  link_type y = header;        <span class="comment">// Last node which is not less than k. </span></span><br><span class="line">  link_type x = <span class="built_in">root</span>();        <span class="comment">// Current node. </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 像二叉树一样通过节点比较</span></span><br><span class="line">  <span class="keyword">while</span> (x != <span class="number">0</span>) </span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">key_compare</span>(<span class="built_in">key</span>(x), k))</span><br><span class="line">      y = x, x = <span class="built_in">left</span>(x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      x = <span class="built_in">right</span>(x);</span><br><span class="line"></span><br><span class="line">  iterator j = <span class="built_in">iterator</span>(y);   </span><br><span class="line">  <span class="keyword">return</span> (j == <span class="built_in">end</span>() || <span class="built_in">key_compare</span>(k, <span class="built_in">key</span>(j.node))) ? <span class="built_in">end</span>() : j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">KeyOfValue</span>, <span class="keyword">class</span> <span class="title">Compare</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">typename</span> rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;::const_iterator </span><br><span class="line">rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;::<span class="built_in">find</span>(<span class="keyword">const</span> Key&amp; k) <span class="keyword">const</span> &#123;</span><br><span class="line">  link_type y = header; <span class="comment">/* Last node which is not less than k. */</span></span><br><span class="line">  link_type x = <span class="built_in">root</span>(); <span class="comment">/* Current node. */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">key_compare</span>(<span class="built_in">key</span>(x), k))</span><br><span class="line">      y = x, x = <span class="built_in">left</span>(x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      x = <span class="built_in">right</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  const_iterator j = <span class="built_in">const_iterator</span>(y);   </span><br><span class="line">  <span class="keyword">return</span> (j == <span class="built_in">end</span>() || <span class="built_in">key_compare</span>(k, <span class="built_in">key</span>(j.node))) ? <span class="built_in">end</span>() : j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="count-方法-计算-RB-tree-中-k-出现的次数"><a href="#count-方法-计算-RB-tree-中-k-出现的次数" class="headerlink" title="count  方法, 计算 RB-tree 中 k 出现的次数"></a>count  方法, 计算 RB-tree 中 k 出现的次数</h3><ul><li>首先其调用了 <code>lower_bound()</code>,  <code>upper_bound()</code> 方法找到树中 k 中不小于 k 的第一个数字, 以及大于 k 的第一个数字</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不小于k的最后一个节点</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">KeyOfValue</span>, <span class="keyword">class</span> <span class="title">Compare</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">typename</span> rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;::iterator </span><br><span class="line">rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;::<span class="built_in">lower_bound</span>(<span class="keyword">const</span> Key&amp; k) &#123;</span><br><span class="line">  link_type y = header; <span class="comment">/* Last node which is not less than k. */</span></span><br><span class="line">  link_type x = <span class="built_in">root</span>(); <span class="comment">/* Current node. */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 如果当前根节点大于 k 说明 k 的前驱存在于 x 的左子树, 于是去 x 的左子树找</span></span><br><span class="line">  <span class="keyword">while</span> (x != <span class="number">0</span>) </span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">key_compare</span>(<span class="built_in">key</span>(x), k)) <span class="comment">//(x &gt;= k)</span></span><br><span class="line">      y = x, x = <span class="built_in">left</span>(x);</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//(x &lt; k)</span></span><br><span class="line">        <span class="comment">// 若根节点 x 小于 k 说明 k 的前驱要么是 x, 要么是位于 x 的右子树中</span></span><br><span class="line">      x = <span class="built_in">right</span>(x);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">iterator</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大于k的最后一个节点 道理同上</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">KeyOfValue</span>, <span class="keyword">class</span> <span class="title">Compare</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">typename</span> rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;::iterator </span><br><span class="line">rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;::<span class="built_in">upper_bound</span>(<span class="keyword">const</span> Key&amp; k) &#123;</span><br><span class="line">  link_type y = header; <span class="comment">/* Last node which is greater than k. */</span></span><br><span class="line">  link_type x = <span class="built_in">root</span>(); <span class="comment">/* Current node. */</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span> (x != <span class="number">0</span>) </span><br><span class="line">       <span class="comment">// (k &lt; x) 说明大于 k 的最小值要么是 x 要么在 x 的左子树上</span></span><br><span class="line">     <span class="keyword">if</span> (<span class="built_in">key_compare</span>(k, <span class="built_in">key</span>(x)))</span><br><span class="line">       y = x, x = <span class="built_in">left</span>(x);</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">         <span class="comment">// (k &gt;= x) 说明大于 k 的最小值一定在 x 的右子树上</span></span><br><span class="line">       x = <span class="built_in">right</span>(x);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">iterator</span>(y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>利用 <code>distance()</code> 函数求出<strong>不小于 k 的第一个数字</strong>和<strong>大于 k 的第一个数字</strong>的距离, 它们的间距就为 k 在树中出现的次数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算RB-tree中k出现的次数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">KeyOfValue</span>, <span class="keyword">class</span> <span class="title">Compare</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">typename</span> rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;::size_type </span><br><span class="line">rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;::<span class="built_in">count</span>(<span class="keyword">const</span> Key&amp; k) <span class="keyword">const</span> &#123;</span><br><span class="line">  pair&lt;const_iterator, const_iterator&gt; p = <span class="built_in">equal_range</span>(k);</span><br><span class="line">  size_type n = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">distance</span>(p.first, p.second, n);</span><br><span class="line">  <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="计算当前节点到树根的链上的黑色节点数量"><a href="#计算当前节点到树根的链上的黑色节点数量" class="headerlink" title="计算当前节点到树根的链上的黑色节点数量"></a>计算当前节点到树根的链上的黑色节点数量</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算红黑树有多少个黑节点</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">int</span> __black_count(__rb_tree_node_base* node, __rb_tree_node_base* root)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (node == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> bc = node-&gt;color == __rb_tree_black ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (node == root)</span><br><span class="line">      <span class="keyword">return</span> bc;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> bc + __black_count(node-&gt;parent, root);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="检查是否符合-RB-tree"><a href="#检查是否符合-RB-tree" class="headerlink" title="检查是否符合 RB-tree"></a>检查是否符合 RB-tree</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查是否符合rb-tree</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">Value</span>, <span class="keyword">class</span> <span class="title">KeyOfValue</span>, <span class="keyword">class</span> <span class="title">Compare</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> </span><br><span class="line">rb_tree&lt;Key, Value, KeyOfValue, Compare, Alloc&gt;::__rb_verify() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 空树</span></span><br><span class="line">  <span class="keyword">if</span> (node_count == <span class="number">0</span> || <span class="built_in">begin</span>() == <span class="built_in">end</span>())</span><br><span class="line">    <span class="keyword">return</span> node_count == <span class="number">0</span> &amp;&amp; <span class="built_in">begin</span>() == <span class="built_in">end</span>() &amp;&amp;</span><br><span class="line">      header-&gt;left == header &amp;&amp; header-&gt;right == header;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 最左节点到根节点的黑色节点数量为 len</span></span><br><span class="line">  <span class="keyword">int</span> len = __black_count(<span class="built_in">leftmost</span>(), <span class="built_in">root</span>());</span><br><span class="line">    <span class="comment">// 遍历每个节点</span></span><br><span class="line">  <span class="keyword">for</span> (const_iterator it = <span class="built_in">begin</span>(); it != <span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">    link_type x = (link_type) it.node;</span><br><span class="line">    link_type L = <span class="built_in">left</span>(x);</span><br><span class="line">    link_type R = <span class="built_in">right</span>(x);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 节点是红色如果子节点也是红色就不满足</span></span><br><span class="line">    <span class="keyword">if</span> (x-&gt;color == __rb_tree_red)</span><br><span class="line">      <span class="keyword">if</span> ((L &amp;&amp; L-&gt;color == __rb_tree_red) ||</span><br><span class="line">          (R &amp;&amp; R-&gt;color == __rb_tree_red))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (L &amp;&amp; <span class="built_in">key_compare</span>(<span class="built_in">key</span>(x), <span class="built_in">key</span>(L)))</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (R &amp;&amp; <span class="built_in">key_compare</span>(<span class="built_in">key</span>(R), <span class="built_in">key</span>(x)))</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!L &amp;&amp; !R &amp;&amp; __black_count(x, <span class="built_in">root</span>()) != len)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">leftmost</span>() != __rb_tree_node_base::<span class="built_in">minimum</span>(<span class="built_in">root</span>()))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">rightmost</span>() != __rb_tree_node_base::<span class="built_in">maximum</span>(<span class="built_in">root</span>()))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><p>本文粗略的分析了 <code>RB-tree</code> 的结构以及主要功能的实现, 其中 <strong>RB-tree</strong> 的主要掌握<strong>插入删除</strong>, 并且由于插入删除对红黑树带来的影响导致破坏了原红黑树的性质, 就要进行<strong>旋转</strong>和<strong>颜色调整</strong>, 其中的插入方法有可重复插入以及不可重复插入这些方法都会在后续对 <strong>set</strong>, <strong>map</strong> 等一些非关联容器中得到使用, </p>]]></content>
      
      
      <categories>
          
          <category> STL 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>README</title>
      <link href="/acm/ACM/"/>
      <url>/acm/ACM/</url>
      
        <content type="html"><![CDATA[<p>占位文章 请忽略</p>]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>README</title>
      <link href="/%E7%94%9F%E6%B4%BB/%E7%94%9F%E6%B4%BB/"/>
      <url>/%E7%94%9F%E6%B4%BB/%E7%94%9F%E6%B4%BB/</url>
      
        <content type="html"><![CDATA[<p>这就是生活</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>List 源码分析</title>
      <link href="/STL-%E6%BA%90%E7%A0%81/List/"/>
      <url>/STL-%E6%BA%90%E7%A0%81/List/</url>
      
        <content type="html"><![CDATA[<h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>之前分析了 <code>vector</code> 的实现, 可以发现<code>vector</code> 的缺点在于处理高频率的插入与删除时的效率很低, 由于其是采用整体移动的方式处理插入与删除, 时间复杂度最坏是 <code>O(n)</code> , 而 <code>list</code> 则在删除与插入上有着优秀的效率</p><p><code>list</code> 是使用链表实现的, 其对于删除和插入的时间复杂度为 <code>O(1)</code>,  有着极其优秀的效率, 但是在于随机访问方面时间复杂度则为 <code>O(n)</code> , <code>list</code> 将具体实现分为了几个部分, 并通过嵌套的方式进行调用, 所以<code>list</code> 的实现也很灵活. 同时, <strong><code>list</code> 在插入和删除后迭代器不会失效</strong></p><h3 id="list-基本结构框架"><a href="#list-基本结构框架" class="headerlink" title="list 基本结构框架"></a>list 基本结构框架</h3><p><code>list</code> 将基本的框架分为 <code>__list_node</code> (链表节点),  <code>__list_iterator</code> (访问迭代器)</p><h3 id="list-node-链表结构"><a href="#list-node-链表结构" class="headerlink" title="__list_node 链表结构"></a>__list_node 链表结构</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">list_node</span> &#123;</span></span><br><span class="line">  <span class="comment">//前后指针</span></span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">void</span>* void_pointer;</span><br><span class="line">  void_pointer next;</span><br><span class="line">  void_pointer prev;</span><br><span class="line">  <span class="comment">//节点数据</span></span><br><span class="line">  T data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="list-iterator-结构"><a href="#list-iterator-结构" class="headerlink" title="__list_iterator 结构"></a>__list_iterator 结构</h3><h4 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">list_iterator</span> &#123;</span></span><br><span class="line">  <span class="comment">//定义迭代器类型</span></span><br><span class="line">  <span class="keyword">typedef</span> __list_iterator&lt;T, T&amp;, T*&gt;             iterator; </span><br><span class="line">  <span class="keyword">typedef</span> __list_iterator&lt;T, <span class="keyword">const</span> T&amp;, <span class="keyword">const</span> T*&gt; const_iterator;</span><br><span class="line">  <span class="keyword">typedef</span> __list_iterator&lt;T, Ref, Ptr&gt;           self;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//定义迭代器为 bidirectional_iterator_tag 类型</span></span><br><span class="line">  <span class="keyword">typedef</span> bidirectional_iterator_tag iterator_category;</span><br><span class="line">  <span class="keyword">typedef</span> T value_type;</span><br><span class="line">  <span class="keyword">typedef</span> Ptr pointer;</span><br><span class="line">  <span class="keyword">typedef</span> Ref reference;</span><br><span class="line">  <span class="keyword">typedef</span> __list_node&lt;T&gt;* link_type;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">size_t</span> size_type;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span> difference_type;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">list_iterator</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//内部使用一个 __list_node&lt;T&gt;* 作为记录 list 中的某个节点信息</span></span><br><span class="line">    <span class="keyword">typedef</span> __list_node&lt;T&gt;* link_type;</span><br><span class="line">    link_type node;</span><br><span class="line">    </span><br><span class="line">__list_iterator(link_type x) : <span class="built_in">node</span>(x) &#123;&#125;</span><br><span class="line">__list_iterator() &#123;&#125;</span><br><span class="line">__list_iterator(<span class="keyword">const</span> iterator&amp; x) : <span class="built_in">node</span>(x.node) &#123;&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重载运算符"><a href="#重载运算符" class="headerlink" title="重载运算符"></a>重载运算符</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">list_iterator</span> &#123;</span></span><br><span class="line">  ....  </span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> self&amp; x) <span class="keyword">const</span> &#123; <span class="keyword">return</span> node == x.node; &#125;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> self&amp; x) <span class="keyword">const</span> &#123; <span class="keyword">return</span> node != x.node; &#125;</span><br><span class="line">  <span class="comment">//对 * 运算符重载, 模拟指针的取值</span></span><br><span class="line">  reference <span class="keyword">operator</span>*() <span class="keyword">const</span> &#123; <span class="keyword">return</span> (*node).data; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __SGI_STL_NO_ARROW_OPERATOR</span></span><br><span class="line">  <span class="comment">//对 -&gt; 运算符进行重载</span></span><br><span class="line">  pointer <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span> &#123; <span class="keyword">return</span> &amp;(<span class="keyword">operator</span>*()); &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __SGI_STL_NO_ARROW_OPERATOR */</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//该迭代器是一个双向迭代器, 支持++, -- 运算符, 又 list 底层实现是由</span></span><br><span class="line">  self&amp; <span class="keyword">operator</span>++() &#123; </span><br><span class="line">    node = (link_type)((*node).next);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  self <span class="keyword">operator</span>++(<span class="keyword">int</span>) &#123; </span><br><span class="line">    self tmp = *<span class="keyword">this</span>;</span><br><span class="line">    ++*<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  self&amp; <span class="keyword">operator</span>--() &#123; </span><br><span class="line">    node = (link_type)((*node).prev);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  self <span class="keyword">operator</span>--(<span class="keyword">int</span>) &#123; </span><br><span class="line">    self tmp = *<span class="keyword">this</span>;</span><br><span class="line">    --*<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  ....</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="traits-编程"><a href="#traits-编程" class="headerlink" title="traits 编程"></a>traits 编程</h4><p><code>list</code> 的 <code>iterator </code> 自己实现了 <code>traits</code> 编程, 其迭代器是<code>bidirectional_iterator_tag</code>类型, 并不是一个普通指针. </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __STL_CLASS_PARTIAL_SPECIALIZATION</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回 list 迭代器的类型</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Ref</span>, <span class="keyword">class</span> <span class="title">Ptr</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> bidirectional_iterator_tag</span></span><br><span class="line"><span class="function"><span class="title">iterator_category</span><span class="params">(<span class="keyword">const</span> __list_iterator&lt;T, Ref, Ptr&gt;&amp;)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">bidirectional_iterator_tag</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回 list 迭代器中的类型</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Ref</span>, <span class="keyword">class</span> <span class="title">Ptr</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> T*</span></span><br><span class="line"><span class="function"><span class="title">value_type</span><span class="params">(<span class="keyword">const</span> __list_iterator&lt;T, Ref, Ptr&gt;&amp;)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Ref</span>, <span class="keyword">class</span> <span class="title">Ptr</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">ptrdiff_t</span>*</span></span><br><span class="line"><span class="function"><span class="title">distance_type</span><span class="params">(<span class="keyword">const</span> __list_iterator&lt;T, Ref, Ptr&gt;&amp;)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __STL_CLASS_PARTIAL_SPECIALIZATION */</span></span></span><br></pre></td></tr></table></figure><h2 id="list-结构"><a href="#list-结构" class="headerlink" title="list 结构"></a>list 结构</h2><h3 id="list-基础类型定义"><a href="#list-基础类型定义" class="headerlink" title="list  基础类型定义"></a>list  基础类型定义</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">list</span> &#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">void</span>* void_pointer;</span><br><span class="line">  <span class="comment">//定义节点信息</span></span><br><span class="line">  <span class="keyword">typedef</span> __list_node&lt;T&gt; list_node;</span><br><span class="line">  <span class="comment">//节点内存分配</span></span><br><span class="line">  <span class="keyword">typedef</span> simple_alloc&lt;list_node, Alloc&gt; list_node_allocator;</span><br><span class="line"><span class="keyword">public</span>:      </span><br><span class="line">  <span class="comment">// 定义嵌套类型</span></span><br><span class="line">  <span class="keyword">typedef</span> T value_type;</span><br><span class="line">  <span class="keyword">typedef</span> value_type* pointer;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">const</span> value_type* const_pointer;</span><br><span class="line">  <span class="keyword">typedef</span> value_type&amp; reference;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">const</span> value_type&amp; const_reference;</span><br><span class="line">  <span class="keyword">typedef</span> list_node* link_type;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">size_t</span> size_type;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span> difference_type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//定义迭代器以及反向迭代器</span></span><br><span class="line">  <span class="keyword">typedef</span> __list_iterator&lt;T, T&amp;, T*&gt;             iterator;</span><br><span class="line">  <span class="keyword">typedef</span> __list_iterator&lt;T, <span class="keyword">const</span> T&amp;, <span class="keyword">const</span> T*&gt; const_iterator;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STL_CLASS_PARTIAL_SPECIALIZATION</span></span><br><span class="line">  <span class="keyword">typedef</span> reverse_iterator&lt;const_iterator&gt; const_reverse_iterator;</span><br><span class="line">  <span class="keyword">typedef</span> reverse_iterator&lt;iterator&gt; reverse_iterator;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* __STL_CLASS_PARTIAL_SPECIALIZATION */</span></span></span><br><span class="line">  <span class="keyword">typedef</span> reverse_bidirectional_iterator&lt;const_iterator, value_type,</span><br><span class="line">  const_reference, difference_type&gt;</span><br><span class="line">  const_reverse_iterator;</span><br><span class="line">  <span class="keyword">typedef</span> reverse_bidirectional_iterator&lt;iterator, value_type, reference,</span><br><span class="line">  difference_type&gt;</span><br><span class="line">  reverse_iterator; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __STL_CLASS_PARTIAL_SPECIALIZATION */</span></span></span><br><span class="line">    ....</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="list-构造和析构函数的实现"><a href="#list-构造和析构函数的实现" class="headerlink" title="list 构造和析构函数的实现"></a>list 构造和析构函数的实现</h3><h4 id="构造函数依赖的方法"><a href="#构造函数依赖的方法" class="headerlink" title="构造函数依赖的方法"></a>构造函数依赖的方法</h4><ol><li><code>get_node</code> 分配节点空间</li><li><code>put_node</code> 释放节点空间</li><li><code>create_node</code> 分配并创建节点空间</li><li><code>destroy_node</code> 调用节点内部数据析构函数并释放该节点空间</li><li><code>empty_initialize</code> 对 <code>list</code> 头节点进行初始化</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">list</span> &#123;</span></span><br><span class="line">    .....</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  <span class="function">link_type <span class="title">get_node</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> list_node_allocator::<span class="built_in">allocate</span>(); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">put_node</span><span class="params">(link_type p)</span> </span>&#123; list_node_allocator::<span class="built_in">deallocate</span>(p); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">link_type <span class="title">create_node</span><span class="params">(<span class="keyword">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">    link_type p = <span class="built_in">get_node</span>();</span><br><span class="line">    __STL_TRY &#123;</span><br><span class="line">      <span class="built_in">construct</span>(&amp;p-&gt;data, x);</span><br><span class="line">    &#125;</span><br><span class="line">    __STL_UNWIND(<span class="built_in">put_node</span>(p));</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">destroy_node</span><span class="params">(link_type p)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">destroy</span>(&amp;p-&gt;data);</span><br><span class="line">    <span class="built_in">put_node</span>(p);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">empty_initialize</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    node = <span class="built_in">get_node</span>();</span><br><span class="line">    node-&gt;next = node;</span><br><span class="line">    node-&gt;prev = node;</span><br><span class="line">  &#125;</span><br><span class="line">  ....</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h4><p><code>list</code> 构造函数从上到下依次为:</p><ol><li><p>空构造函数</p></li><li><p>创建一个长度为 <code>n</code>, 值为 <code>value</code> 的链表</p></li><li><p>4 为 2 的<strong>重载版本</strong></p></li><li><p> 如果允许拥有成员模板, 则提供接收其他 <code>InputIterator</code> 迭代器的类型的数据范围并将该范围内数据创建 <code>list</code></p></li><li><p>反之根据提供的两个 <code>list</code> 迭代器来创建这两个迭代器范围内数据的 <code>list</code></p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">list</span> &#123;</span></span><br><span class="line">    .....</span><br><span class="line">  <span class="built_in">list</span>() &#123; <span class="built_in">empty_initialize</span>(); &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="built_in">list</span>(size_type n, <span class="keyword">const</span> T&amp; value) &#123; <span class="built_in">fill_initialize</span>(n, value); &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">list</span>(<span class="keyword">int</span> n, <span class="keyword">const</span> T&amp; value) &#123; <span class="built_in">fill_initialize</span>(n, value); &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">list</span>(<span class="keyword">long</span> n, <span class="keyword">const</span> T&amp; value) &#123; <span class="built_in">fill_initialize</span>(n, value); &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STL_MEMBER_TEMPLATES</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>&gt;</span></span><br><span class="line">  <span class="built_in">list</span>(InputIterator first, InputIterator last) &#123;</span><br><span class="line">    <span class="built_in">range_initialize</span>(first, last);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* __STL_MEMBER_TEMPLATES */</span></span></span><br><span class="line">  <span class="built_in">list</span>(<span class="keyword">const</span> T* first, <span class="keyword">const</span> T* last) &#123; <span class="built_in">range_initialize</span>(first, last); &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">list</span>(const_iterator first, const_iterator last) &#123;</span><br><span class="line">    <span class="built_in">range_initialize</span>(first, last);</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __STL_MEMBER_TEMPLATES */</span></span></span><br><span class="line">  <span class="built_in">list</span>(<span class="keyword">const</span> list&lt;T, Alloc&gt;&amp; x) &#123;</span><br><span class="line">    <span class="built_in">range_initialize</span>(x.<span class="built_in">begin</span>(), x.<span class="built_in">end</span>());</span><br><span class="line">  &#125;</span><br><span class="line">  ....</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对于前四个版本的构造函数都调用了 <code>fill_initialize</code> 方法, 可以看出其本质是先创建头节点, 然后对元素进行 <code>insert</code>  操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fill_initialize</span><span class="params">(size_type n, <span class="keyword">const</span> T&amp; value)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">empty_initialize</span>();</span><br><span class="line">  __STL_TRY &#123;</span><br><span class="line">    <span class="built_in">insert</span>(<span class="built_in">begin</span>(), n, value);</span><br><span class="line">  &#125;</span><br><span class="line">  __STL_UNWIND(<span class="built_in">clear</span>(); <span class="built_in">put_node</span>(node));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h4><p>删除头节点以外所有节点, 再删除空节点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">~<span class="built_in">list</span>() &#123;</span><br><span class="line">    <span class="comment">// 删除初空节点以外的所有节点</span></span><br><span class="line">  <span class="built_in">clear</span>();</span><br><span class="line">    <span class="comment">// 删除空节点</span></span><br><span class="line">  <span class="built_in">put_node</span>(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基本属性获取"><a href="#基本属性获取" class="headerlink" title="基本属性获取"></a>基本属性获取</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">iterator <span class="title">begin</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> (link_type)((*node).next); &#125; <span class="comment">// 获取 list 中第一个元素的迭代器, 没有则返回头节点 (end)</span></span><br><span class="line"><span class="comment">//同上 只不过返回的是 常量迭代器</span></span><br><span class="line"><span class="function">const_iterator <span class="title">begin</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> (link_type)((*node).next); &#125;</span><br><span class="line"><span class="comment">//返回头节点, 也即尾部 end</span></span><br><span class="line"><span class="function">iterator <span class="title">end</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> node; &#125;</span><br><span class="line"><span class="function">const_iterator <span class="title">end</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> node; &#125;</span><br><span class="line"><span class="comment">//返回反向迭代器</span></span><br><span class="line"><span class="function">reverse_iterator <span class="title">rbegin</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">reverse_iterator</span>(<span class="built_in">end</span>()); &#125;</span><br><span class="line"><span class="function">const_reverse_iterator <span class="title">rbegin</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">const_reverse_iterator</span>(<span class="built_in">end</span>()); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function">reverse_iterator <span class="title">rend</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">reverse_iterator</span>(<span class="built_in">begin</span>()); &#125;</span><br><span class="line"><span class="function">const_reverse_iterator <span class="title">rend</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">const_reverse_iterator</span>(<span class="built_in">begin</span>());</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//如果 begin == end 那么就为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> node-&gt;next == node; &#125;</span><br><span class="line"><span class="function">size_type <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    size_type result = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">distance</span>(<span class="built_in">begin</span>(), <span class="built_in">end</span>(), result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最大值就是 unsigned long long 因为指针最多可以记录到 unsigned long long 个数量的地址</span></span><br><span class="line"><span class="function">size_type <span class="title">max_size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">size_type</span>(<span class="number">-1</span>); &#125;</span><br><span class="line"><span class="comment">//返回第一个元素引用</span></span><br><span class="line"><span class="function">reference <span class="title">front</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> *<span class="built_in">begin</span>(); &#125;</span><br><span class="line"><span class="function">const_reference <span class="title">front</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> *<span class="built_in">begin</span>(); &#125;</span><br><span class="line"><span class="comment">//返回最后一个元素引用</span></span><br><span class="line"><span class="function">reference <span class="title">back</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> *(--<span class="built_in">end</span>()); &#125;</span><br><span class="line"><span class="function">const_reference <span class="title">back</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> *(--<span class="built_in">end</span>()); &#125;</span><br></pre></td></tr></table></figure><h3 id="交换函数"><a href="#交换函数" class="headerlink" title="交换函数"></a>交换函数</h3><p>可以看出, 交换两个链表并不是全部交换两个链表内元素, 而是交换头指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(list&lt;T, Alloc&gt;&amp; x)</span> </span>&#123; __STD::<span class="built_in">swap</span>(node, x.node); &#125;</span><br></pre></td></tr></table></figure><h2 id="list-操作"><a href="#list-操作" class="headerlink" title="list 操作"></a>list 操作</h2><p>这里主要介绍 <code>list </code> 的 <code>pop, push</code> 以及一些插入删除等基本操作</p><h3 id="push-和-pop-操作"><a href="#push-和-pop-操作" class="headerlink" title="push 和 pop 操作"></a>push 和 pop 操作</h3><p><code>list</code> 是一个双向链表, 所以对于 <code>push</code> 操作是在头部插入, 而 <code>pop</code> 则是在尾部插入, <code>push</code> 操作都调用了 <code>insert</code> 方法,  <code>pop</code> 操作都调用了 <code>erase</code> 方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T, class Alloc = alloc&gt;</span><br><span class="line">class list </span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    // 直接在头部或尾部插入</span><br><span class="line">    void push_front(const T&amp; x) &#123; insert(begin(), x); &#125;</span><br><span class="line">    void push_back(const T&amp; x) &#123; insert(end(), x); &#125;</span><br><span class="line">    // 直接在头部或尾部删除</span><br><span class="line">    void pop_front() &#123; erase(begin()); &#125;</span><br><span class="line">    void pop_back() &#123; </span><br><span class="line">      iterator tmp = end();</span><br><span class="line">      erase(--tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p>删除元素的操作基本都是通过调用 <code>单节点的 erase</code> 方法来实现的, 由于 <code>list</code>  是一个双向链表, 所以 <code>单节点的 erase</code> 方法的操作就是双向链表的操作, 示例如下</p><p><a href="https://imgtu.com/i/H4aT2t"><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://s4.ax1x.com/2022/02/17/H4aT2t.png" alt="H4aT2t.png"></a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">list</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="function">iterator <span class="title">erase</span><span class="params">(iterator first, iterator last)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;   </span><br><span class="line">   </span><br><span class="line">    <span class="comment">//更改节点前驱后继的指针指向, 再释放要删除节点即可 </span></span><br><span class="line"><span class="function">iterator <span class="title">erase</span><span class="params">(iterator position)</span> </span>&#123;</span><br><span class="line">      link_type next_node = <span class="built_in">link_type</span>(position.node-&gt;next);</span><br><span class="line">      link_type prev_node = <span class="built_in">link_type</span>(position.node-&gt;prev);</span><br><span class="line">      prev_node-&gt;next = next_node;</span><br><span class="line">      next_node-&gt;prev = prev_node;</span><br><span class="line">      <span class="built_in">destroy_node</span>(position.node);</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">iterator</span>(next_node);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用 erase 重载删除两个迭代器之间的元素</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line">list&lt;T,Alloc&gt;::iterator list&lt;T, Alloc&gt;::<span class="built_in">erase</span>(iterator first, iterator last) </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//对于范围内的每一个元素都调用删除单节点的 erase 方法</span></span><br><span class="line">  <span class="keyword">while</span> (first != last) </span><br><span class="line">        <span class="built_in">erase</span>(first++);</span><br><span class="line">  <span class="keyword">return</span> last;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用 删除范围内元素的 erase 来清除特定值节点</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> list&lt;T, Alloc&gt;::<span class="built_in">remove</span>(<span class="keyword">const</span> T&amp; value) &#123;</span><br><span class="line">  iterator first = <span class="built_in">begin</span>();</span><br><span class="line">  iterator last = <span class="built_in">end</span>();</span><br><span class="line">  <span class="keyword">while</span> (first != last) &#123;</span><br><span class="line">    iterator next = first;</span><br><span class="line">    ++next;</span><br><span class="line">    <span class="keyword">if</span> (*first == value) <span class="built_in">erase</span>(first);</span><br><span class="line">    first = next;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>clear</code> 方法为先删除头节点以外所有元素, 只留下头节点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除除空节点以外的所有节点</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span> </span><br><span class="line"><span class="keyword">void</span> list&lt;T, Alloc&gt;::<span class="built_in">clear</span>()</span><br><span class="line">&#123;</span><br><span class="line">  link_type cur = (link_type) node-&gt;next;</span><br><span class="line">    <span class="comment">// 除空节点都删除</span></span><br><span class="line">  <span class="keyword">while</span> (cur != node) &#123;</span><br><span class="line">    link_type tmp = cur;</span><br><span class="line">    cur = (link_type) cur-&gt;next;</span><br><span class="line">    <span class="built_in">destroy_node</span>(tmp);</span><br><span class="line">  &#125;</span><br><span class="line">  node-&gt;next = node;</span><br><span class="line">  node-&gt;prev = node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><h4 id="相等比较"><a href="#相等比较" class="headerlink" title="相等比较"></a>相等比较</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断两个list相等</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> list&lt;T,Alloc&gt;&amp; x, <span class="keyword">const</span> list&lt;T,Alloc&gt;&amp; y) </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">typename</span> list&lt;T,Alloc&gt;::link_type link_type;</span><br><span class="line">  link_type e1 = x.node;</span><br><span class="line">  link_type e2 = y.node;</span><br><span class="line">  link_type n1 = (link_type) e1-&gt;next;</span><br><span class="line">  link_type n2 = (link_type) e2-&gt;next;</span><br><span class="line">    <span class="comment">// 将两个链表执行一一的对比来分析是否相等. </span></span><br><span class="line">    <span class="comment">// 这里不把元素个数进行一次比较, 主要获取个数时也要遍历整个数组, 所以就不将个数纳入比较</span></span><br><span class="line">  <span class="keyword">for</span> ( ; n1 != e1 &amp;&amp; n2 != e2 ; n1 = (link_type) n1-&gt;next, n2 = (link_type) n2-&gt;next)</span><br><span class="line">    <span class="keyword">if</span> (n1-&gt;data != n2-&gt;data)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> n1 == e1 &amp;&amp; n2 == e2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小于比较"><a href="#小于比较" class="headerlink" title="小于比较"></a>小于比较</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> list&lt;T, Alloc&gt;&amp; x, <span class="keyword">const</span> list&lt;T, Alloc&gt;&amp; y) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">lexicographical_compare</span>(x.<span class="built_in">begin</span>(), x.<span class="built_in">end</span>(), y.<span class="built_in">begin</span>(), y.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="赋值操作"><a href="#赋值操作" class="headerlink" title="赋值操作"></a>赋值操作</h4><p><code>list</code> 在赋值时要考虑两个链表的大小关系</p><ol><li>原链表大, 就删除多余元素</li><li>原链表小, 在复制完本身容量后再将剩余元素以插入的形式加入原链表</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line">list&lt;T, Alloc&gt;&amp; list&lt;T, Alloc&gt;::<span class="keyword">operator</span>=(<span class="keyword">const</span> list&lt;T, Alloc&gt;&amp; x) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span> != &amp;x) &#123;</span><br><span class="line">    iterator first1 = <span class="built_in">begin</span>();</span><br><span class="line">    iterator last1 = <span class="built_in">end</span>();</span><br><span class="line">    const_iterator first2 = x.<span class="built_in">begin</span>();</span><br><span class="line">    const_iterator last2 = x.<span class="built_in">end</span>();</span><br><span class="line">    <span class="comment">//直到两个链表有一个空间用尽</span></span><br><span class="line">    <span class="keyword">while</span> (first1 != last1 &amp;&amp; first2 != last2) </span><br><span class="line">    *first1++ = *first2++;</span><br><span class="line">    <span class="comment">//原链表大, 复制完后要删除掉原链表多余的元素</span></span><br><span class="line">    <span class="keyword">if</span> (first2 == last2)</span><br><span class="line">      <span class="built_in">erase</span>(first1, last1);</span><br><span class="line">    <span class="comment">// 原链表小, 复制完后要还要将x链表的剩余元素以插入的方式插入到原链表中</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">insert</span>(last1, first2, last2);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="resize-操作"><a href="#resize-操作" class="headerlink" title="resize 操作"></a>resize 操作</h3><p>重新修改 <code>list</code> 大小</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">list</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">resize</span>(size_type new_size, <span class="keyword">const</span> T&amp; x);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(size_type new_size)</span> </span>&#123; <span class="built_in">resize</span>(new_size, <span class="built_in">T</span>()); &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> list&lt;T, Alloc&gt;::<span class="built_in">resize</span>(size_type new_size, <span class="keyword">const</span> T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">  iterator i = <span class="built_in">begin</span>();</span><br><span class="line">  size_type len = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( ; i != <span class="built_in">end</span>() &amp;&amp; len &lt; new_size; ++i, ++len)</span><br><span class="line">    ;</span><br><span class="line">  <span class="comment">// 如果链表长度大于new_size的大小, 那就删除后面多余的节点</span></span><br><span class="line">  <span class="keyword">if</span> (len == new_size)</span><br><span class="line">    <span class="built_in">erase</span>(i, <span class="built_in">end</span>());</span><br><span class="line">  <span class="keyword">else</span>              </span><br><span class="line">     <span class="comment">//用 x 补充多出的元素</span></span><br><span class="line">    <span class="built_in">insert</span>(<span class="built_in">end</span>(), new_size - len, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="unique-操作"><a href="#unique-操作" class="headerlink" title="unique 操作"></a>unique 操作</h3><p><code>unique</code> 方法是将 <code>list</code> 内连续且重复的节点删除至只剩一个, 注意: <code>unique</code> 并不是将整个 <code>list</code> 进行去重, 而是相同的连续元素,    如果要对整个 <code>list</code> 进行去重, 就要先对 <code>list</code> 进行一个排序, 所以对于 <code>unique</code> 方法, 通常与 <code>sort</code> 方法一起使用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> list&lt;T, Alloc&gt;::<span class="built_in">unique</span>() &#123;</span><br><span class="line">  iterator first = <span class="built_in">begin</span>();</span><br><span class="line">  iterator last = <span class="built_in">end</span>();</span><br><span class="line">  <span class="keyword">if</span> (first == last) <span class="keyword">return</span>;</span><br><span class="line">  iterator next = first;</span><br><span class="line">  <span class="keyword">while</span> (++next != last) &#123;</span><br><span class="line">    <span class="keyword">if</span> (*first == *next)</span><br><span class="line">      <span class="built_in">erase</span>(next);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      first = next;</span><br><span class="line">    next = first;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="insert-操作"><a href="#insert-操作" class="headerlink" title="insert 操作"></a>insert 操作</h3><p><code>list</code> 提供了多种重载方式的 <code>insert</code> 方法, 但是最核心的还是调用 <code> iterator insert(iterator position, const T&amp; x)</code> 方法, 所有的重载 <code>insert</code> 方法都是基于该方法实现的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">list</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 最基本的insert操作, 之插入一个元素</span></span><br><span class="line">    <span class="function">iterator <span class="title">insert</span><span class="params">(iterator position, <span class="keyword">const</span> T&amp; x)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 将元素插入指定位置的前一个地址</span></span><br><span class="line">      link_type tmp = <span class="built_in">create_node</span>(x);</span><br><span class="line">      tmp-&gt;next = position.node;</span><br><span class="line">      tmp-&gt;prev = position.node-&gt;prev;</span><br><span class="line">      (<span class="built_in">link_type</span>(position.node-&gt;prev))-&gt;next = tmp;</span><br><span class="line">      position.node-&gt;prev = tmp;</span><br><span class="line">      <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">// 以下重载函数都是调用iterator insert(iterator position, const T&amp; x)函数</span></span><br><span class="line">   <span class="function">iterator <span class="title">insert</span><span class="params">(iterator position)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">insert</span>(position, <span class="built_in">T</span>()); &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STL_MEMBER_TEMPLATES</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>&gt;</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(iterator position, InputIterator first, InputIterator last)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* __STL_MEMBER_TEMPLATES */</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(iterator position, <span class="keyword">const</span> T* first, <span class="keyword">const</span> T* last)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(iterator position,</span></span></span><br><span class="line"><span class="params"><span class="function">        const_iterator first, const_iterator last)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __STL_MEMBER_TEMPLATES */</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(iterator pos, size_type n, <span class="keyword">const</span> T&amp; x)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(iterator pos, <span class="keyword">int</span> n, <span class="keyword">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">      <span class="built_in">insert</span>(pos, (size_type)n, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(iterator pos, <span class="keyword">long</span> n, <span class="keyword">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">      <span class="built_in">insert</span>(pos, (size_type)n, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(size_type new_size, <span class="keyword">const</span> T&amp; x)</span></span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STL_MEMBER_TEMPLATES</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span> <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> list&lt;T, Alloc&gt;::<span class="built_in">insert</span>(iterator position, InputIterator first, InputIterator last) </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span> ( ; first != last; ++first)</span><br><span class="line">    <span class="built_in">insert</span>(position, *first);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* __STL_MEMBER_TEMPLATES */</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> list&lt;T, Alloc&gt;::<span class="built_in">insert</span>(iterator position, <span class="keyword">const</span> T* first, <span class="keyword">const</span> T* last) &#123;</span><br><span class="line">  <span class="keyword">for</span> ( ; first != last; ++first)</span><br><span class="line">    <span class="built_in">insert</span>(position, *first);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> list&lt;T, Alloc&gt;::<span class="built_in">insert</span>(iterator position,</span><br><span class="line">    const_iterator first, const_iterator last) &#123;</span><br><span class="line">  <span class="keyword">for</span> ( ; first != last; ++first)</span><br><span class="line">    <span class="built_in">insert</span>(position, *first);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __STL_MEMBER_TEMPLATES */</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> list&lt;T, Alloc&gt;::<span class="built_in">insert</span>(iterator position, size_type n, <span class="keyword">const</span> T&amp; x) &#123;</span><br><span class="line">  <span class="keyword">for</span> ( ; n &gt; <span class="number">0</span>; --n)</span><br><span class="line">    <span class="built_in">insert</span>(position, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><p>插入操作是将元素插入到指定位置的前一个位置</p><h3 id="sort-操作"><a href="#sort-操作" class="headerlink" title="sort 操作"></a>sort 操作</h3><p>由于链表的元素空间地址并不是连续的, 所以对于 <code>list</code> 的 sort 操作需要单独实现, 由于该 sort 的实现过于复杂, 我不太能良好的用语言去分析所以引用了别的大佬的文章</p><p>以下部分引用自 <a href="https://github.com/Cu1ii/STL/blob/master/16%20list%20%E4%B8%8B.md">传送门</a></p><p>在分析<code>sort</code>之前先来分析<code>transfer</code>, <code>reverse</code>, <code>merge</code>这几个会被调用的函数.</p><h4 id="transfer函数"><a href="#transfer函数" class="headerlink" title="transfer函数"></a>transfer函数</h4><p><strong><code>transfer</code>函数功能是将一段链表插入到我们指定的位置之前</strong>. 该函数一定要理解, 后面分析的所有函数都是该基础上进行修改的.</p><p><code>transfer</code>函数接受3个迭代器. 第一个迭代器表示链表要插入的位置, <code>first</code>到<code>last</code>最闭右开区间插入到<code>position</code>之前.</p><p>从<code>if</code>下面开始分析(<em>这里我将源码的执行的先后顺序进行的部分调整, 下面我分析的都是调整顺序过后的代码. 当然我也会把源码顺序写下来, 以便参考</em>)</p><ul><li><strong>为了避免待会解释起来太绕口, 这里先统一一下部分名字</strong></li></ul><ol><li><code>last</code>的前一个节点叫<code>last_but_one</code></li><li><code>first</code>的前一个节点叫<code>zero</code></li></ol><ul><li>好, 现在我们开始分析<code>transfer</code>的每一步(<em>最好在分析的时候在纸上画出两个链表一步步来画</em>)</li></ul><ol><li>第一行. <code>last_but_one</code>的<code>next</code>指向插入的<code>position</code>节点</li><li>第二行. <code>position</code>的<code>next</code>指向<code>last_but_one</code></li><li>第三行. 临时变量<code>tmp</code>保存<code>position</code>的前一个节点</li><li>第四行. <code>first</code>的<code>prev</code>指向<code>tmp</code></li><li>第五行. <code>position</code>的前一个节点的<code>next</code>指向<code>first</code>节点</li><li>第六行. <code>zero</code>的<code>next</code>指向<code>last</code>节点</li><li>第七行. <code>last</code>的<code>prev</code>指向<code>zero</code></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">list</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(iterator position, iterator first, iterator last)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (position != last) </span><br><span class="line">      &#123;</span><br><span class="line">          (*(<span class="built_in">link_type</span>((*last.node).prev))).next = position.node;</span><br><span class="line">          (*position.node).prev = (*last.node).prev;</span><br><span class="line">          link_type tmp = <span class="built_in">link_type</span>((*position.node).prev);</span><br><span class="line">          (*first.node).prev = tmp;</span><br><span class="line">          (*(<span class="built_in">link_type</span>((*position.node).prev))).next = first.node; </span><br><span class="line">          (*(<span class="built_in">link_type</span>((*first.node).prev))).next = last.node;</span><br><span class="line">          (*last.node).prev = (*first.node).prev; </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    void transfer(iterator position, iterator first, iterator last) </span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      if (position != last) </span></span><br><span class="line"><span class="comment">      &#123;</span></span><br><span class="line"><span class="comment">        (*(link_type((*last.node).prev))).next = position.node;</span></span><br><span class="line"><span class="comment">        (*(link_type((*first.node).prev))).next = last.node;</span></span><br><span class="line"><span class="comment">        (*(link_type((*position.node).prev))).next = first.node;  </span></span><br><span class="line"><span class="comment">        link_type tmp = link_type((*position.node).prev);</span></span><br><span class="line"><span class="comment">        (*position.node).prev = (*last.node).prev;</span></span><br><span class="line"><span class="comment">        (*last.node).prev = (*first.node).prev; </span></span><br><span class="line"><span class="comment">        (*first.node).prev = tmp;</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>splice</strong> 将两个链表进行合并.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">list</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">splice</span><span class="params">(iterator position, list&amp; x)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!x.<span class="built_in">empty</span>()) </span><br><span class="line">        <span class="built_in">transfer</span>(position, x.<span class="built_in">begin</span>(), x.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">splice</span><span class="params">(iterator position, list&amp;, iterator i)</span> </span>&#123;</span><br><span class="line">      iterator j = i;</span><br><span class="line">      ++j;</span><br><span class="line">      <span class="keyword">if</span> (position == i || position == j) <span class="keyword">return</span>;</span><br><span class="line">      <span class="built_in">transfer</span>(position, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">splice</span><span class="params">(iterator position, list&amp;, iterator first, iterator last)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (first != last) </span><br><span class="line">        <span class="built_in">transfer</span>(position, first, last);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="merge函数"><a href="#merge函数" class="headerlink" title="merge函数"></a>merge函数</h4><p><code>merge</code>函数接受一个<code>list</code>参数.</p><p><strong><code>merge</code>函数是将传入的<code>list</code>链表x与原链表按从小到大合并到原链表中(前提是两个链表都是已经从小到大排序了)</strong>. 这里<code>merge</code>的核心就是<code>transfer</code>函数.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> list&lt;T, Alloc&gt;::<span class="built_in">merge</span>(list&lt;T, Alloc&gt;&amp; x) &#123;</span><br><span class="line">  iterator first1 = <span class="built_in">begin</span>();</span><br><span class="line">  iterator last1 = <span class="built_in">end</span>();</span><br><span class="line">  iterator first2 = x.<span class="built_in">begin</span>();</span><br><span class="line">  iterator last2 = x.<span class="built_in">end</span>();</span><br><span class="line">  <span class="keyword">while</span> (first1 != last1 &amp;&amp; first2 != last2)</span><br><span class="line">    <span class="keyword">if</span> (*first2 &lt; *first1) &#123;</span><br><span class="line">      iterator next = first2;</span><br><span class="line">      <span class="comment">// 将first2到first+1的左闭右开区间插入到first1的前面</span></span><br><span class="line">      <span class="comment">// 这就是将first2合并到first1链表中</span></span><br><span class="line">      <span class="built_in">transfer</span>(first1, first2, ++next);</span><br><span class="line">      first2 = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      ++first1;</span><br><span class="line">      <span class="comment">// 如果链表x还有元素则全部插入到first1链表的尾部</span></span><br><span class="line">  <span class="keyword">if</span> (first2 != last2) <span class="built_in">transfer</span>(last1, first2, last2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="reverse函数"><a href="#reverse函数" class="headerlink" title="reverse函数"></a>reverse函数</h4><p><strong><code>reverse</code>函数是实现将链表翻转的功能.</strong> 主要是<code>list</code>的迭代器基本不会改变的特点, 将每一个元素一个个插入到<code>begin</code>之前. 这里注意迭代器不会变, 但是<code>begin</code>会改变, 它始终指向第一个元素的地址.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> list&lt;T, Alloc&gt;::<span class="built_in">reverse</span>() </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (node-&gt;next == node || <span class="built_in">link_type</span>(node-&gt;next)-&gt;next == node) </span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">  iterator first = <span class="built_in">begin</span>();</span><br><span class="line">  ++first;</span><br><span class="line">  <span class="keyword">while</span> (first != <span class="built_in">end</span>()) &#123;</span><br><span class="line">    iterator old = first;</span><br><span class="line">    ++first;</span><br><span class="line">      <span class="comment">// 将元素插入到begin()之前</span></span><br><span class="line">    <span class="built_in">transfer</span>(<span class="built_in">begin</span>(), old, first);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p><code>list</code>实现<code>sort</code> 功能本身就不容易, 当我分析了之后就对其表示佩服. 严格的说<code>list</code>排序的时间复杂度应为<code>nlog(n)</code>, 其实现用了归并排序的思想, 将所有元素分成n分, 总共2^n个元素.</p><p>这个sort的分析 :</p><ul><li>这里将每个重要的参数列出来解释其含义<ol><li><code>fill</code> : 当前可以处理的元素个数为2^fill个</li><li><code>counter[fill]</code> : 可以容纳2^(fill+1)个元素</li><li><code>carry</code> : 一个临时中转站, 每次将一元素插入到counter[i]链表中.</li></ol></li></ul><p>在处理的元素个数不足 2^fill 个时，在<code>counter[i](0&lt;i&lt;fill)</code>之前转移元素</p><p>具体是显示步骤是：</p><ol><li>每次读一个数据到 <code>carry</code>中，并将carry的数据转移到 <code>counter[0]</code> 中<ol><li>当<code>counter[0]</code>中的数据个数少于2时，持续转移数据到counter[0]中</li><li>当counter[0]的数据个数等于2时，将counter[0]中的数据转移到counter[1]…从counter[i]转移到counter[i+1],直到counter[fill]中数据个数达到2^(fill+1)个。</li></ol></li><li>++fill, 重复步骤1</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//list 不能使用sort函数，因为list的迭代器是bidirectional_iterator, 而sort</span></span><br><span class="line"><span class="comment">//sort函数要求random_access_iterator</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>,<span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> list&lt;T,Alloc&gt;::<span class="built_in">sort</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//如果元素个数小于等于1，直接返回</span></span><br><span class="line">    <span class="keyword">if</span>(node-&gt;next==node||node-&gt;next-&gt;next==node)</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">    list&lt;T,Alloc&gt; carry; <span class="comment">//中转站</span></span><br><span class="line">    list&lt;T,Alloc&gt; counter[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> fill=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        carry.<span class="built_in">splice</span>(carry.<span class="built_in">begin</span>(),*<span class="keyword">this</span>,<span class="built_in">begin</span>());  <span class="comment">//每次取出一个元素</span></span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;    </span><br><span class="line">        <span class="keyword">while</span>(i&lt;fill&amp;&amp;!counter[i].<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            counter[i].<span class="built_in">merge</span>(carry);  <span class="comment">//将carry中的元素合并到counter[i]中</span></span><br><span class="line">            carry.<span class="built_in">swap</span>(counter[i++]);  <span class="comment">//交换之后counter[i-1]为空</span></span><br><span class="line">        &#125;</span><br><span class="line">        carry.<span class="built_in">swap</span>(counter[i]);</span><br><span class="line">        <span class="keyword">if</span>(i==fill) </span><br><span class="line">            ++fill;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将counter数组链表的所有节点按从小到大的顺序排列存储在counter[fill-1]的链表中</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;fill;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        counter[i].<span class="built_in">merge</span>(counter[i<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最后将couter与carry交换, 实现排序</span></span><br><span class="line">    <span class="built_in">swap</span>(counter[fill<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sort</code>用了一个数组链表用来存储2^i个元素, 当上一个元素存储满了之后继续往下一个链表存储, 最后将所有的链表进行<code>merge</code>归并(合并), 从而实现了链表的排序.</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>本节我们分析了<code>list</code>最难的<code>transfer</code>和<code>sort</code>实现, 当然<code>transfer</code>函数是整个实现的核心. 我在将本节分析的函数在进行一个归纳.</p><ol><li><code>transfer</code> : 将两个<em>段</em>链表进行合并(两段可以是来自同一个链表, 但不交叉).</li><li><code>merge</code> : 前提两个段链表都已经排好序. 将两段链表按从小到大的顺序进行合并, 主要是<code>sort</code>实现调用.</li><li><code>reverse</code> : 调用<code>transfer</code>函数将元素一个个调整到<code>begin</code>之前, 实现链表的转置.</li><li><code>sort</code> : 运用归并思想将链表分段排序.</li></ol>]]></content>
      
      
      <categories>
          
          <category> STL 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stack 源码分析</title>
      <link href="/STL-%E6%BA%90%E7%A0%81/stack-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/STL-%E6%BA%90%E7%A0%81/stack-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h1><p><code>stack</code> 是栈, 它只允许在元素在栈顶进出, 而且在实现 <code>stack</code> 这个数据结构的时候, 我们发现, 似乎有一个数据结构已经满足了 <code>stack</code> 只允许元素在尾部进出的功能, 就是 <code>deque</code>, 它已经实现了在头尾都允许元素进出的功能, 所以只需要将 <code>deque</code> 封装一下即也就提取出 <code>pop_back</code>,  <code>push_back</code> 就行了. 其实, 不只是 <code>deque</code> , 只要是提供了 <code>pop_back</code>,  <code>push_back</code> 功能的数据结构即可, <code>list</code> 也提供了这些方法. </p><p>由此发现, <code>stack</code>严格来说并不是容器, 它是一底部容器完成其所有的工作, 它只修改了容器的接口, 准确是叫<strong>配接器</strong>.</p><h2 id="stack-源码"><a href="#stack-源码" class="headerlink" title="stack 源码"></a>stack 源码</h2><p><code>stack</code>也满足<code>straits</code>编程规范</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">stack</span> &#123;</span></span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>== __STL_NULL_TMPL_ARGS (<span class="keyword">const</span> stack&amp;, <span class="keyword">const</span> stack&amp;);</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; __STL_NULL_TMPL_ARGS (<span class="keyword">const</span> stack&amp;, <span class="keyword">const</span> stack&amp;);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">typename</span> Sequence::value_type value_type;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">typename</span> Sequence::size_type size_type;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">typename</span> Sequence::reference reference;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">typename</span> Sequence::const_reference const_reference;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  Sequence c;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> c.<span class="built_in">empty</span>(); &#125; <span class="comment">//调用容器的 empty()</span></span><br><span class="line">  <span class="function">size_type <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> c.<span class="built_in">size</span>(); &#125; <span class="comment">//调用容器的 size()</span></span><br><span class="line">  <span class="function">reference <span class="title">top</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> c.<span class="built_in">back</span>(); &#125; <span class="comment">//调用容器的 push_back</span></span><br><span class="line">  <span class="function">const_reference <span class="title">top</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> c.<span class="built_in">back</span>(); &#125;</span><br><span class="line">  <span class="comment">// 只封装了 push_back和pop_back 方法, 只对尾进行操作</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> value_type&amp; x)</span> </span>&#123; c.<span class="built_in">push_back</span>(x); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123; c.<span class="built_in">pop_back</span>(); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用容器自己的运算符重载方法</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Sequence</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> stack&lt;T, Sequence&gt;&amp; x, <span class="keyword">const</span> stack&lt;T, Sequence&gt;&amp; y) &#123;</span><br><span class="line">  <span class="keyword">return</span> x.c == y.c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Sequence</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> stack&lt;T, Sequence&gt;&amp; x, <span class="keyword">const</span> stack&lt;T, Sequence&gt;&amp; y) &#123;</span><br><span class="line">  <span class="keyword">return</span> x.c &lt; y.c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>严格来说 <code>stack</code> 是适配器, 就是修改其他容器提供的功能, 同样 <code>queue</code> 也是以 <code>deque</code> 为默认容器的适配器</p>]]></content>
      
      
      <categories>
          
          <category> STL 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>queue 源码分析</title>
      <link href="/STL-%E6%BA%90%E7%A0%81/queue-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/STL-%E6%BA%90%E7%A0%81/queue-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h1><p><code>queue</code> 是队列, 只允许元素从队首弹出, 在队尾进入, 其也是使用 <code>deque</code> 作为默认容器, 将其功能进行封装得到的, </p><p>其可参考 <a href="https://cu1universe.icu/STL-%E6%BA%90%E7%A0%81/stack-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">stack</a></p><h2 id="queue-结构"><a href="#queue-结构" class="headerlink" title="queue 结构"></a>queue 结构</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __STL_LIMITED_DEFAULT_TEMPLATES</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Sequence</span> =</span> deque&lt;T&gt; &gt;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Sequence</span>&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">queue</span> &#123;</span></span><br><span class="line">  <span class="comment">//定义友元函数</span></span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>== __STL_NULL_TMPL_ARGS (<span class="keyword">const</span> queue&amp; x, <span class="keyword">const</span> queue&amp; y);</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; __STL_NULL_TMPL_ARGS (<span class="keyword">const</span> queue&amp; x, <span class="keyword">const</span> queue&amp; y);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">typename</span> Sequence::value_type value_type;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">typename</span> Sequence::size_type size_type;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">typename</span> Sequence::reference reference;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">typename</span> Sequence::const_reference const_reference;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  Sequence c;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> c.<span class="built_in">empty</span>(); &#125;</span><br><span class="line">  <span class="function">size_type <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> c.<span class="built_in">size</span>(); &#125;</span><br><span class="line">  <span class="comment">// 调用 deque 的 front 方法</span></span><br><span class="line">  <span class="function">reference <span class="title">front</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> c.<span class="built_in">front</span>(); &#125;</span><br><span class="line">  <span class="function">const_reference <span class="title">front</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> c.<span class="built_in">front</span>(); &#125;</span><br><span class="line">  <span class="function">reference <span class="title">back</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> c.<span class="built_in">back</span>(); &#125;</span><br><span class="line">  <span class="function">const_reference <span class="title">back</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> c.<span class="built_in">back</span>(); &#125;</span><br><span class="line">  <span class="comment">// 由于只提供前出后入的功能, 所以只封装了 push_back, pop_front函数</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> value_type&amp; x)</span> </span>&#123; c.<span class="built_in">push_back</span>(x); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123; c.<span class="built_in">pop_front</span>(); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现重载</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Sequence</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> queue&lt;T, Sequence&gt;&amp; x, <span class="keyword">const</span> queue&lt;T, Sequence&gt;&amp; y) &#123;</span><br><span class="line">  <span class="keyword">return</span> x.c == y.c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Sequence</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> queue&lt;T, Sequence&gt;&amp; x, <span class="keyword">const</span> queue&lt;T, Sequence&gt;&amp; y) &#123;</span><br><span class="line">  <span class="keyword">return</span> x.c &lt; y.c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>queue</code>与<code>stack</code>都是使用底层接口封装的结构, 他们是被称为配接器而不是容器.</p>]]></content>
      
      
      <categories>
          
          <category> STL 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>deque 源码分析</title>
      <link href="/STL-%E6%BA%90%E7%A0%81/deque-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/STL-%E6%BA%90%E7%A0%81/deque-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="deque-源码分析"><a href="#deque-源码分析" class="headerlink" title="deque 源码分析"></a>deque 源码分析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p><code>deque</code> 所提供的功能相较于其他顺序容器, 拥有较为强大的功能, 在实现上相对于 <code>list</code> , <code>vector</code> 更复杂, <code>deque</code>  的迭代器是属于 <code>random_access_iterator_tag</code> 类型,  在分析 <code>vector</code> 时, 可以发现, 在某些极端情况下, 由于 <code>vector</code> 采用连续的空间储存元素, 会出现头插入以及扩容时进行大量元素的复制, 导致复杂度很高, 且对于空间的要求也是相对较高的. <code>deque</code> 则是 <strong>相对连续的</strong> 即它将多个数组按照顺序排序, 这样即使每个数组的头地址并不是连续的, 但是并不影响元素是<strong>连续</strong>的, 这里的连续指的是逻辑上是连续, 而不是地址连续, <code>deque</code> 是一个双向开口的容器, 头尾插入和删除都是 O(1) 复杂度的, 空间也是可扩展的, 且扩展时不经常对已有的元素进行移动. </p><h2 id="deque-iterator迭代器结构"><a href="#deque-iterator迭代器结构" class="headerlink" title="__deque_iterator迭代器结构"></a>__deque_iterator迭代器结构</h2><p><code>deque</code> 的 <code>iterator</code> 和 <code>vector</code> 类似, 但是由于其结构为<strong>相对连续</strong>所以对于 <code>iterator</code> 的设计要比 <code>vector</code> 的 <code>iterator</code> 更为复杂</p><h3 id="全局函数"><a href="#全局函数" class="headerlink" title="全局函数"></a>全局函数</h3><p>用来计算每一个数组的大小</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="keyword">size_t</span> __deque_buf_size(<span class="keyword">size_t</span> n, <span class="keyword">size_t</span> sz)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> n != <span class="number">0</span> ? n : (sz &lt; <span class="number">512</span> ? <span class="built_in">size_t</span>(<span class="number">512</span> / sz) : <span class="built_in">size_t</span>(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型定义"><a href="#类型定义" class="headerlink" title="类型定义"></a>类型定义</h3><p><code>deque</code> 的 <code>iterator</code> 是 <code>random_access_iterator_tag</code> 类型, 满足 <code>traits</code> 编程</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __STL_NON_TYPE_TMPL_PARAM_BUG</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Ref</span>, <span class="keyword">class</span> <span class="title">Ptr</span>, <span class="title">size_t</span> <span class="title">BufSiz</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">deque_iterator</span> &#123;</span></span><br><span class="line"><span class="comment">// 迭代器定义</span></span><br><span class="line">  <span class="keyword">typedef</span> __deque_iterator&lt;T, T&amp;, T*, BufSiz&gt;             iterator;</span><br><span class="line">  <span class="keyword">typedef</span> __deque_iterator&lt;T, <span class="keyword">const</span> T&amp;, <span class="keyword">const</span> T*, BufSiz&gt; const_iterator;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">size_t</span> <span class="title">buffer_size</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> __deque_buf_size(BufSiz, <span class="built_in"><span class="keyword">sizeof</span></span>(T)); &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* __STL_NON_TYPE_TMPL_PARAM_BUG */</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Ref</span>, <span class="keyword">class</span> <span class="title">Ptr</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">deque_iterator</span> &#123;</span></span><br><span class="line">  <span class="keyword">typedef</span> __deque_iterator&lt;T, T&amp;, T*&gt;             iterator;</span><br><span class="line">  <span class="keyword">typedef</span> __deque_iterator&lt;T, <span class="keyword">const</span> T&amp;, <span class="keyword">const</span> T*&gt; const_iterator;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">size_t</span> <span class="title">buffer_size</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> __deque_buf_size(<span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(T)); &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">// deque是random_access_iterator_tag类型</span></span><br><span class="line">  <span class="keyword">typedef</span> random_access_iterator_tag iterator_category;</span><br><span class="line">  <span class="comment">// 基本类型的定义, 满足traits编程</span></span><br><span class="line">  <span class="keyword">typedef</span> T value_type;</span><br><span class="line">  <span class="keyword">typedef</span> Ptr pointer;</span><br><span class="line">  <span class="keyword">typedef</span> Ref reference;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">size_t</span> size_type;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span> difference_type;</span><br><span class="line">  <span class="comment">// node</span></span><br><span class="line">  <span class="keyword">typedef</span> T** map_pointer;</span><br><span class="line">  map_pointer node;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">typedef</span> __deque_iterator self;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>满足 <code>traits</code> 编程</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 满足traits编程</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Ref</span>, <span class="keyword">class</span> <span class="title">Ptr</span>, <span class="title">size_t</span> <span class="title">BufSiz</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> random_access_iterator_tag</span></span><br><span class="line"><span class="function"><span class="title">iterator_category</span><span class="params">(<span class="keyword">const</span> __deque_iterator&lt;T, Ref, Ptr, BufSiz&gt;&amp;)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">random_access_iterator_tag</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Ref</span>, <span class="keyword">class</span> <span class="title">Ptr</span>, <span class="title">size_t</span> <span class="title">BufSiz</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> T* <span class="title">value_type</span><span class="params">(<span class="keyword">const</span> __deque_iterator&lt;T, Ref, Ptr, BufSiz&gt;&amp;)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Ref</span>, <span class="keyword">class</span> <span class="title">Ptr</span>, <span class="title">size_t</span> <span class="title">BufSiz</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">ptrdiff_t</span>* <span class="title">distance_type</span><span class="params">(<span class="keyword">const</span> __deque_iterator&lt;T, Ref, Ptr, BufSiz&gt;&amp;)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上文提到, 由于 <code>deque</code> 的连续性是使用数组进行拼接的, 所以需要一个<strong>指向指针的指针</strong>来记录每块数组的地址, 所以 <code>iterator</code> 就需要一个<strong>指向指针的指针</strong>来保证 <code>iterator</code> 在跨域数组的时候找到下(上)一顺序的数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Ref</span>, <span class="keyword">class</span> <span class="title">Ptr</span>, <span class="title">size_t</span> <span class="title">BufSiz</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">deque_iterator</span> &#123;</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// node</span></span><br><span class="line">  <span class="keyword">typedef</span> T** map_pointer;</span><br><span class="line">  map_pointer node;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p> 同时还 <code>iterator</code> 中还设置了三个 <code>T*</code>指针 <code>cur</code>, <code>first</code>, <code>last</code> </p><ul><li>cur: 当前指向的位置</li><li>first: 该数组中头的位置</li><li>last: 该数组中尾的位置</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Ref</span>, <span class="keyword">class</span> <span class="title">Ptr</span>, <span class="title">size_t</span> <span class="title">BufSiz</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">deque_iterator</span> &#123;</span></span><br><span class="line">...</span><br><span class="line">  <span class="keyword">typedef</span> T value_type;</span><br><span class="line">  T* cur;</span><br><span class="line">  T* first;</span><br><span class="line">  T* last;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Ref</span>, <span class="keyword">class</span> <span class="title">Ptr</span>, <span class="title">size_t</span> <span class="title">BufSiz</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">deque_iterator</span> &#123;</span></span><br><span class="line">...</span><br><span class="line">  <span class="comment">// 初始化cur指向当前数组位置, last指针数组的尾, node指向y</span></span><br><span class="line">  __deque_iterator(T* x, map_pointer y)  : <span class="built_in">cur</span>(x), <span class="built_in">first</span>(*y), <span class="built_in">last</span>(*y + <span class="built_in">buffer_size</span>()), <span class="built_in">node</span>(y) &#123;&#125;</span><br><span class="line">  <span class="comment">// 初始化为一个空的deque</span></span><br><span class="line">  __deque_iterator() : <span class="built_in">cur</span>(<span class="number">0</span>), <span class="built_in">first</span>(<span class="number">0</span>), <span class="built_in">last</span>(<span class="number">0</span>), <span class="built_in">node</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">  <span class="comment">// 接受一个迭代器</span></span><br><span class="line">  __deque_iterator(<span class="keyword">const</span> iterator&amp; x) : <span class="built_in">cur</span>(x.cur), <span class="built_in">first</span>(x.first), <span class="built_in">last</span>(x.last), <span class="built_in">node</span>(x.node) &#123;&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="重载运算符"><a href="#重载运算符" class="headerlink" title="重载运算符"></a>重载运算符</h3><p><code>__deque_iterator</code> 实现了基本运算符 在分析 <code>__deque_iterator</code> 的运算符之前先介绍一个基础函数 <code>set_node</code> </p><p>由于在 <code>__deque_iterator</code> 移动时可能会跨越数组, 所以需要重新设定指向数组指针的位置, <code>set_node</code> 则提供了更新指向将要前往的数组的头部位置的功能</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Ref</span>, <span class="keyword">class</span> <span class="title">Ptr</span>, <span class="title">size_t</span> <span class="title">BufSiz</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">deque_iterator</span> &#123;</span></span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_node</span><span class="params">(map_pointer new_node)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 让node指针另一个数组的头, 同时修改头和尾的地址</span></span><br><span class="line">    node = new_node;</span><br><span class="line">    first = *new_node;</span><br><span class="line">    last = first + <span class="built_in">difference_type</span>(<span class="built_in">buffer_size</span>());</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="重载-和–"><a href="#重载-和–" class="headerlink" title="重载++和–"></a>重载++和–</h4><p>要注意 <code>__deque_iterator</code> 在向前或者向后移动在跨越数组时会出现越界的情况, 需要进行判断, 如果跨越了数组就要重新设置 <code>node</code> 指向的数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Ref</span>, <span class="keyword">class</span> <span class="title">Ptr</span>, <span class="title">size_t</span> <span class="title">BufSiz</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">deque_iterator</span> &#123;</span></span><br><span class="line">...  </span><br><span class="line"> <span class="comment">// 这里需要判断是否达到当前数组的尾部</span></span><br><span class="line">  self&amp; <span class="keyword">operator</span>++() &#123;</span><br><span class="line">    ++cur;</span><br><span class="line">    <span class="comment">// 达到了尾部就需要更新node的指向</span></span><br><span class="line">    <span class="keyword">if</span> (cur == last) &#123;</span><br><span class="line">      <span class="built_in">set_node</span>(node + <span class="number">1</span>);</span><br><span class="line">      cur = first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 同理, 需要判断是否到达数组的头. 到达就要更新node指向</span></span><br><span class="line">  self&amp; <span class="keyword">operator</span>--() &#123;</span><br><span class="line">    <span class="keyword">if</span> (cur == first) &#123;</span><br><span class="line">      <span class="built_in">set_node</span>(node - <span class="number">1</span>);</span><br><span class="line">      cur = last;</span><br><span class="line">    &#125;</span><br><span class="line">    --cur;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  self <span class="keyword">operator</span>++(<span class="keyword">int</span>)  &#123;</span><br><span class="line">    self tmp = *<span class="keyword">this</span>;</span><br><span class="line">    ++*<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  self <span class="keyword">operator</span>--(<span class="keyword">int</span>) &#123;</span><br><span class="line">    self tmp = *<span class="keyword">this</span>;</span><br><span class="line">    --*<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="重载-等"><a href="#重载-等" class="headerlink" title="重载+, -等"></a>重载+, -等</h4><p>由于 <code>__deque_iterator</code> 是 <code>random_access_iterator_tag</code> 类型迭代器, 所以支持   <code>+, -</code> 运算</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Ref</span>, <span class="keyword">class</span> <span class="title">Ptr</span>, <span class="title">size_t</span> <span class="title">BufSiz</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">deque_iterator</span> &#123;</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// 重载指针</span></span><br><span class="line">  reference <span class="keyword">operator</span>*() <span class="keyword">const</span> &#123; <span class="keyword">return</span> *cur; &#125;</span><br><span class="line">  reference <span class="keyword">operator</span>[](difference_type n) <span class="keyword">const</span> &#123; <span class="keyword">return</span> *(*<span class="keyword">this</span> + n); &#125; <span class="comment">// 这个会调用重载+运算符</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __SGI_STL_NO_ARROW_OPERATOR</span></span><br><span class="line">  pointer <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span> &#123; <span class="keyword">return</span> &amp;(<span class="keyword">operator</span>*()); &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __SGI_STL_NO_ARROW_OPERATOR */</span></span></span><br><span class="line"></span><br><span class="line">  self&amp; <span class="keyword">operator</span>+=(difference_type n) </span><br><span class="line">  &#123;</span><br><span class="line">    difference_type offset = n + (cur - first);<span class="comment">// 要移动的距离</span></span><br><span class="line">    <span class="comment">// 如果是在的当前数组内并且向前移动就直接指向那个位置就行了.</span></span><br><span class="line">    <span class="keyword">if</span> (offset &gt;= <span class="number">0</span> &amp;&amp; offset &lt; <span class="built_in">difference_type</span>(<span class="built_in">buffer_size</span>()))</span><br><span class="line">      cur += n;</span><br><span class="line">     <span class="comment">// 向后移动或已经不再当前数组中</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 计算需要跨多少个数组</span></span><br><span class="line">      difference_type node_offset = offset &gt; <span class="number">0</span> ? offset / <span class="built_in">difference_type</span>(<span class="built_in">buffer_size</span>()) : -<span class="built_in">difference_type</span>((-offset - <span class="number">1</span>) / <span class="built_in">buffer_size</span>()) - <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">set_node</span>(node + node_offset);</span><br><span class="line">      cur = first + (offset - node_offset * <span class="built_in">difference_type</span>(<span class="built_in">buffer_size</span>()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 以下都是调用+运算符</span></span><br><span class="line">difference_type <span class="keyword">operator</span>-(<span class="keyword">const</span> self&amp; x) <span class="keyword">const</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">difference_type</span>(<span class="built_in">buffer_size</span>()) * (node - x.node - <span class="number">1</span>) + (cur - first) + (x.last - x.cur);</span><br><span class="line">  &#125;</span><br><span class="line">  self <span class="keyword">operator</span>+(difference_type n) <span class="keyword">const</span> &#123;</span><br><span class="line">    self tmp = *<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> tmp += n;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  self&amp; <span class="keyword">operator</span>-=(difference_type n) &#123; <span class="keyword">return</span> *<span class="keyword">this</span> += -n; &#125;</span><br><span class="line"> </span><br><span class="line">  self <span class="keyword">operator</span>-(difference_type n) <span class="keyword">const</span> &#123;</span><br><span class="line">    self tmp = *<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> tmp -= n;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// </span></span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> self&amp; x) <span class="keyword">const</span> &#123; <span class="keyword">return</span> cur == x.cur; &#125;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> self&amp; x) <span class="keyword">const</span> &#123; <span class="keyword">return</span> !(*<span class="keyword">this</span> == x); &#125;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> self&amp; x) <span class="keyword">const</span> </span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> (node == x.node) ? (cur &lt; x.cur) : (node &lt; x.node);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="deque-结构"><a href="#deque-结构" class="headerlink" title="deque 结构"></a>deque 结构</h2><h3 id="基本类型定义"><a href="#基本类型定义" class="headerlink" title="基本类型定义"></a>基本类型定义</h3><p><code>deque</code> 满足  <code>traits</code> 编程的嵌套定义类型.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc, <span class="keyword">size_t</span> BufSiz = <span class="number">0</span>&gt; </span><br><span class="line">class deque &#123;</span><br><span class="line"><span class="keyword">public</span>:                         </span><br><span class="line">    <span class="comment">// 满足traits编程 可以利用 traits 来获取关于容器的基础信息</span></span><br><span class="line">  <span class="keyword">typedef</span> T value_type;</span><br><span class="line">  <span class="keyword">typedef</span> value_type* pointer;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">const</span> value_type* const_pointer;</span><br><span class="line">  <span class="keyword">typedef</span> value_type&amp; reference;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">const</span> value_type&amp; const_reference;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">size_t</span> size_type;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span> difference_type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:                        </span><br><span class="line">   <span class="comment">// 定义迭代器 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __STL_NON_TYPE_TMPL_PARAM_BUG</span></span><br><span class="line">  <span class="keyword">typedef</span> __deque_iterator&lt;T, T&amp;, T*, BufSiz&gt;              iterator;</span><br><span class="line">  <span class="keyword">typedef</span> __deque_iterator&lt;T, <span class="keyword">const</span> T&amp;, <span class="keyword">const</span> T&amp;, BufSiz&gt;  const_iterator;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* __STL_NON_TYPE_TMPL_PARAM_BUG */</span></span></span><br><span class="line">  <span class="keyword">typedef</span> __deque_iterator&lt;T, T&amp;, T*&gt;                      iterator;</span><br><span class="line">  <span class="keyword">typedef</span> __deque_iterator&lt;T, <span class="keyword">const</span> T&amp;, <span class="keyword">const</span> T*&gt;          const_iterator;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __STL_NON_TYPE_TMPL_PARAM_BUG */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反向迭代器</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STL_CLASS_PARTIAL_SPECIALIZATION</span></span><br><span class="line">  <span class="keyword">typedef</span> reverse_iterator&lt;const_iterator&gt; const_reverse_iterator;</span><br><span class="line">  <span class="keyword">typedef</span> reverse_iterator&lt;iterator&gt; reverse_iterator;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* __STL_CLASS_PARTIAL_SPECIALIZATION */</span></span></span><br><span class="line">  <span class="keyword">typedef</span> reverse_iterator&lt;const_iterator, value_type, const_reference, </span><br><span class="line">                           difference_type&gt;  </span><br><span class="line">          const_reverse_iterator;</span><br><span class="line">  <span class="keyword">typedef</span> reverse_iterator&lt;iterator, value_type, reference, difference_type&gt;</span><br><span class="line">          reverse_iterator; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __STL_CLASS_PARTIAL_SPECIALIZATION */</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:                      <span class="comment">// Internal typedefs</span></span><br><span class="line">    <span class="comment">// map, 指向指针的指针 用来记录数组的地址</span></span><br><span class="line">  <span class="keyword">typedef</span> pointer* map_pointer;</span><br><span class="line">  <span class="keyword">typedef</span> simple_alloc&lt;value_type, Alloc&gt; data_allocator;<span class="comment">// value_type类型的空间配置器</span></span><br><span class="line">  <span class="keyword">typedef</span> simple_alloc&lt;pointer, Alloc&gt; map_allocator;<span class="comment">// 指针类型的空间配置器</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>map_pointer</code> 是一个 <strong>指向指针的指针</strong> 用来管理 <code>deque</code> 中数组的数据</p><h3 id="构造和析构函数"><a href="#构造和析构函数" class="headerlink" title="构造和析构函数"></a>构造和析构函数</h3><p><strong>构造函数</strong> 有多种重载函数, 接受许多类型的创建 <code>deque</code> 的方式, 不过可以发现绝大部分的构造函数都会调用 <code>create_map_and_nodes</code> 这个方法, 其就是构造函数的核心, 在下面将会进行分析</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc, <span class="keyword">size_t</span> BufSiz = <span class="number">0</span>&gt; </span><br><span class="line">class deque &#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">public</span>:                        </span><br><span class="line">    <span class="comment">// 默认构造函数</span></span><br><span class="line">  <span class="built_in">deque</span>() : <span class="built_in">start</span>(), <span class="built_in">finish</span>(), <span class="built_in">map</span>(<span class="number">0</span>), <span class="built_in">map_size</span>(<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">create_map_and_nodes</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">// 接受一个deque</span></span><br><span class="line">  <span class="built_in">deque</span>(<span class="keyword">const</span> deque&amp; x) : <span class="built_in">start</span>(), <span class="built_in">finish</span>(), <span class="built_in">map</span>(<span class="number">0</span>), <span class="built_in">map_size</span>(<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">create_map_and_nodes</span>(x.<span class="built_in">size</span>());</span><br><span class="line">    __STL_TRY &#123;</span><br><span class="line">      <span class="built_in">uninitialized_copy</span>(x.<span class="built_in">begin</span>(), x.<span class="built_in">end</span>(), start);</span><br><span class="line">    &#125;</span><br><span class="line">    __STL_UNWIND(<span class="built_in">destroy_map_and_nodes</span>());</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">// 接受 n:初始化大小, value:初始化的值</span></span><br><span class="line">  <span class="built_in">deque</span>(size_type n, <span class="keyword">const</span> value_type&amp; value) : <span class="built_in">start</span>(), <span class="built_in">finish</span>(), <span class="built_in">map</span>(<span class="number">0</span>), <span class="built_in">map_size</span>(<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">fill_initialize</span>(n, value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">deque</span>(<span class="keyword">int</span> n, <span class="keyword">const</span> value_type&amp; value) : <span class="built_in">start</span>(), <span class="built_in">finish</span>(), <span class="built_in">map</span>(<span class="number">0</span>), <span class="built_in">map_size</span>(<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">fill_initialize</span>(n, value);</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="built_in">deque</span>(<span class="keyword">long</span> n, <span class="keyword">const</span> value_type&amp; value) : <span class="built_in">start</span>(), <span class="built_in">finish</span>(), <span class="built_in">map</span>(<span class="number">0</span>), <span class="built_in">map_size</span>(<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">fill_initialize</span>(n, value);</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">// 接受 n:初始化大小</span></span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">deque</span><span class="params">(size_type n)</span> : start(), finish(), map(<span class="number">0</span>), map_size(<span class="number">0</span>)</span></span><br><span class="line"><span class="function">  &#123;</span></span><br><span class="line">    <span class="built_in">fill_initialize</span>(n, <span class="built_in">value_type</span>());</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STL_MEMBER_TEMPLATES</span></span><br><span class="line">    <span class="comment">//利用两个 InputIterator 类型迭代器范围内的元素进行初始化</span></span><br><span class="line">    <span class="comment">// 前提是可以使用成员模板</span></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>&gt;</span></span><br><span class="line">  <span class="built_in">deque</span>(InputIterator first, InputIterator last) : <span class="built_in">start</span>(), <span class="built_in">finish</span>(), <span class="built_in">map</span>(<span class="number">0</span>), <span class="built_in">map_size</span>(<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">range_initialize</span>(first, last, <span class="built_in">iterator_category</span>(first));</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* __STL_MEMBER_TEMPLATES */</span></span></span><br><span class="line">  <span class="built_in">deque</span>(<span class="keyword">const</span> value_type* first, <span class="keyword">const</span> value_type* last) : <span class="built_in">start</span>(), <span class="built_in">finish</span>(), <span class="built_in">map</span>(<span class="number">0</span>), <span class="built_in">map_size</span>(<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">create_map_and_nodes</span>(last - first);</span><br><span class="line">    __STL_TRY &#123;</span><br><span class="line">      <span class="built_in">uninitialized_copy</span>(first, last, start);</span><br><span class="line">    &#125;</span><br><span class="line">    __STL_UNWIND(<span class="built_in">destroy_map_and_nodes</span>());</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">// 接受两个迭代器, 构造一个范围</span></span><br><span class="line">  <span class="built_in">deque</span>(const_iterator first, const_iterator last) : <span class="built_in">start</span>(), <span class="built_in">finish</span>(), <span class="built_in">map</span>(<span class="number">0</span>), <span class="built_in">map_size</span>(<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">create_map_and_nodes</span>(last - first);</span><br><span class="line">    __STL_TRY &#123;</span><br><span class="line">      <span class="built_in">uninitialized_copy</span>(first, last, start);</span><br><span class="line">    &#125;</span><br><span class="line">    __STL_UNWIND(<span class="built_in">destroy_map_and_nodes</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __STL_MEMBER_TEMPLATES */</span></span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="create-map-and-nodes-函数实现"><a href="#create-map-and-nodes-函数实现" class="headerlink" title="create_map_and_nodes 函数实现."></a>create_map_and_nodes 函数实现.</h4><ol><li><p>计算初始化时需要容纳多少元素</p></li><li><p>在默认开辟的空间和第一步中的空间取 <code>max</code> 保证 <code>dqeue</code> 在向前和向后扩展数组时都有空间</p></li><li><p>计算出初始时最前面数组和最后面数组的位置, 这里给两个位置前面预留的空间为 <code>(map_size - num_nodes) / 2</code> 保证了前后预留空间都相同</p></li><li><p>为已经确定的空间范围**(最前和最后两个数组之间)** 都分配一个 <code>buffer_size</code> 的数组</p></li><li><p>将 <code>start</code> 和 <code>finish</code> 中的 <code>cur</code> 指向所对应的数组, 并更新 <code>first, lasr</code> , 即将 <code>start</code> 和 <code>finish</code> 指向第一个元素和最后一个元素的位置</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">size_t</span> <span class="title">BufSize</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> deque&lt;T, Alloc, BufSize&gt;::<span class="built_in">create_map_and_nodes</span>(size_type num_elements) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 计算初始化类型参数的个数</span></span><br><span class="line">  size_type num_nodes = num_elements / <span class="built_in">buffer_size</span>() + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 因为deque是头尾插入都是O(1), 就是deque在头和尾都留有空间方便头尾插入</span></span><br><span class="line">    <span class="comment">// 两者取最大的. num_nodes是保证前后都留有位置</span></span><br><span class="line">  map_size = <span class="built_in">max</span>(<span class="built_in">initial_map_size</span>(), num_nodes + <span class="number">2</span>);</span><br><span class="line">  map = map_allocator::<span class="built_in">allocate</span>(map_size);<span class="comment">// 分配空间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算出数组的头前面留出来的位置保存并在nstart.</span></span><br><span class="line">  map_pointer nstart = map + (map_size - num_nodes) / <span class="number">2</span>;</span><br><span class="line">  map_pointer nfinish = nstart + num_nodes - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">  map_pointer cur;</span><br><span class="line">  __STL_TRY </span><br><span class="line">  &#123;</span><br><span class="line">      <span class="comment">// 为每一个a[cur]分配一个buffer_size的数组, 即这样就实现了二维数组即map</span></span><br><span class="line">    <span class="keyword">for</span> (cur = nstart; cur &lt;= nfinish; ++cur)</span><br><span class="line">      *cur = <span class="built_in">allocate_node</span>();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#     <span class="meta-keyword">ifdef</span>  __STL_USE_EXCEPTIONS </span></span><br><span class="line">  <span class="built_in"><span class="keyword">catch</span></span>(...) &#123;</span><br><span class="line">    <span class="keyword">for</span> (map_pointer n = nstart; n &lt; cur; ++n)</span><br><span class="line">      <span class="built_in">deallocate_node</span>(*n);</span><br><span class="line">    map_allocator::<span class="built_in">deallocate</span>(map, map_size);</span><br><span class="line">    <span class="keyword">throw</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#     <span class="meta-keyword">endif</span> <span class="comment">/* __STL_USE_EXCEPTIONS */</span></span></span><br><span class="line"><span class="comment">// 修改start, finish, cur指针的位置</span></span><br><span class="line">  start.<span class="built_in">set_node</span>(nstart);</span><br><span class="line">  finish.<span class="built_in">set_node</span>(nfinish);</span><br><span class="line">  start.cur = start.first;</span><br><span class="line">  finish.cur = finish.first + num_elements % <span class="built_in">buffer_size</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="range-initialize-函数"><a href="#range-initialize-函数" class="headerlink" title="range_initialize 函数"></a>range_initialize 函数</h4><p>虽然 <code>deque</code> 的 <code>iterator</code> 是 <code>random_access_iterator_tag</code> 类型, 但是在执行构造函数时可能接收到的是 <code>list</code> 或其他容器的迭代器, 就会通过该方法来确定如何向 <code>deque</code> 内部添加元素</p><p>这种设计考虑了不同迭代器的差异, 迭代器要 <strong>向下兼容</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">size_t</span> <span class="title">BufSize</span>&gt;</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> deque&lt;T, Alloc, BufSize&gt;::<span class="built_in">range_initialize</span>(InputIterator first,</span><br><span class="line">                                                InputIterator last,</span><br><span class="line">                                                input_iterator_tag) &#123;</span><br><span class="line">  <span class="built_in">create_map_and_nodes</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 一个个进行插入操作</span></span><br><span class="line">  <span class="keyword">for</span> ( ; first != last; ++first)</span><br><span class="line">    <span class="built_in">push_back</span>(*first);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">size_t</span> <span class="title">BufSize</span>&gt;</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> deque&lt;T, Alloc, BufSize&gt;::<span class="built_in">range_initialize</span>(ForwardIterator first,</span><br><span class="line">                                                ForwardIterator last,</span><br><span class="line">                                                forward_iterator_tag) &#123;</span><br><span class="line">  size_type n = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 计算距离, 申请空间. 失败则释放所有空间</span></span><br><span class="line">  <span class="built_in">distance</span>(first, last, n);</span><br><span class="line">  <span class="built_in">create_map_and_nodes</span>(n);</span><br><span class="line">  __STL_TRY &#123;</span><br><span class="line">    <span class="built_in">uninitialized_copy</span>(first, last, start);</span><br><span class="line">  &#125;</span><br><span class="line">  __STL_UNWIND(<span class="built_in">destroy_map_and_nodes</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="fill-initialize-函数"><a href="#fill-initialize-函数" class="headerlink" title="fill_initialize 函数"></a>fill_initialize 函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">size_t</span> <span class="title">BufSize</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> deque&lt;T, Alloc, BufSize&gt;::<span class="built_in">fill_initialize</span>(size_type n, <span class="keyword">const</span> value_type&amp; value) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 申请空间</span></span><br><span class="line">  <span class="built_in">create_map_and_nodes</span>(n);</span><br><span class="line">  map_pointer cur;</span><br><span class="line">  __STL_TRY &#123;</span><br><span class="line">      <span class="comment">//对每个空间进行初始化</span></span><br><span class="line">    <span class="keyword">for</span> (cur = start.node; cur &lt; finish.node; ++cur)</span><br><span class="line">      <span class="built_in">uninitialized_fill</span>(*cur, *cur + <span class="built_in">buffer_size</span>(), value);</span><br><span class="line">      <span class="comment">// 最后一个数组单独处理. 毕竟最后一个数组一般不是会全部填充满</span></span><br><span class="line">    <span class="built_in">uninitialized_fill</span>(finish.first, finish.cur, value);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STL_USE_EXCEPTIONS</span></span><br><span class="line">  <span class="built_in"><span class="keyword">catch</span></span>(...) &#123;</span><br><span class="line">    <span class="keyword">for</span> (map_pointer n = start.node; n &lt; cur; ++n)</span><br><span class="line">      <span class="built_in">destroy</span>(*n, *n + <span class="built_in">buffer_size</span>());</span><br><span class="line">    <span class="built_in">destroy_map_and_nodes</span>();</span><br><span class="line">    <span class="keyword">throw</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#       <span class="meta-keyword">endif</span> <span class="comment">/* __STL_USE_EXCEPTIONS */</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="析构函数-分步释放内存"><a href="#析构函数-分步释放内存" class="headerlink" title="析构函数, 分步释放内存."></a>析构函数, 分步释放内存.</h3><ul><li>释放开辟的各个数组内的元素</li><li>释放记录数组地址的数组空间</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc, <span class="keyword">size_t</span> BufSiz = <span class="number">0</span>&gt; </span><br><span class="line">class deque &#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">   ~<span class="built_in">deque</span>() &#123;</span><br><span class="line">    <span class="built_in">destroy</span>(start, finish);</span><br><span class="line">    <span class="built_in">destroy_map_and_nodes</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p><code>deque</code>是一个”二维数组”并且每个数组之间并不连续, 所以需要一个数组一个数组的执行释放.</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This is only used as a cleanup function in catch clauses.</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">size_t</span> <span class="title">BufSize</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> deque&lt;T, Alloc, BufSize&gt;::<span class="built_in">destroy_map_and_nodes</span>() &#123;</span><br><span class="line"><span class="comment">// 便利所有的数组, 一个个析构</span></span><br><span class="line">  <span class="keyword">for</span> (map_pointer cur = start.node; cur &lt;= finish.node; ++cur)</span><br><span class="line">    <span class="built_in">deallocate_node</span>(*cur);</span><br><span class="line">    <span class="comment">// 内存释放</span></span><br><span class="line">  map_allocator::<span class="built_in">deallocate</span>(map, map_size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc, <span class="keyword">size_t</span> BufSiz = <span class="number">0</span>&gt; </span><br><span class="line">class deque &#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">  pointer <span class="built_in">allocate_node</span>() &#123; <span class="keyword">return</span> data_allocator::<span class="built_in">allocate</span>(<span class="built_in">buffer_size</span>()); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">deallocate_node</span><span class="params">(pointer n)</span> </span>&#123;</span><br><span class="line">    data_allocator::<span class="built_in">deallocate</span>(n, <span class="built_in">buffer_size</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="deque基本属性获取方法"><a href="#deque基本属性获取方法" class="headerlink" title="deque基本属性获取方法"></a>deque基本属性获取方法</h3><p><code>deque</code> 的 <code>first</code> 指向第一个元素的地址, <code>finish</code> 指向最后一个元素的后一个位置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc, <span class="keyword">size_t</span> BufSiz = <span class="number">0</span>&gt; </span><br><span class="line">class deque &#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">protected</span>:                      <span class="comment">// Internal typedefs</span></span><br><span class="line">...</span><br><span class="line">    <span class="comment">// 获取缓冲区大小</span></span><br><span class="line">  <span class="keyword">static</span> size_type <span class="built_in">buffer_size</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> __deque_buf_size(BufSiz, <span class="built_in"><span class="keyword">sizeof</span></span>(value_type));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> size_type <span class="title">initial_map_size</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">8</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:                      <span class="comment">// Data members</span></span><br><span class="line">  iterator start;<span class="comment">// 指向第一个元素的地址</span></span><br><span class="line">  iterator finish;<span class="comment">// 指向最后一个元素的后一个地址, 即尾</span></span><br><span class="line"></span><br><span class="line">  map_pointer map;<span class="comment">// 定义map, 指向指针的指针</span></span><br><span class="line">  size_type map_size;<span class="comment">// map的实际大小</span></span><br><span class="line"><span class="keyword">public</span>:                         <span class="comment">// Basic accessors</span></span><br><span class="line">  <span class="function">iterator <span class="title">begin</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> start; &#125;<span class="comment">// 获取头地址</span></span><br><span class="line">  <span class="function">const_iterator <span class="title">begin</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> start; &#125;</span><br><span class="line">  <span class="function">iterator <span class="title">end</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> finish; &#125;<span class="comment">// 获取尾地址</span></span><br><span class="line">  <span class="function">const_iterator <span class="title">end</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> finish; &#125;</span><br><span class="line"><span class="comment">// 倒转后获取首尾地址.</span></span><br><span class="line">  <span class="function">reverse_iterator <span class="title">rbegin</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">reverse_iterator</span>(finish); &#125;</span><br><span class="line">  <span class="function">reverse_iterator <span class="title">rend</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">reverse_iterator</span>(start); &#125;</span><br><span class="line">  <span class="function">const_reverse_iterator <span class="title">rbegin</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">const_reverse_iterator</span>(finish);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">const_reverse_iterator <span class="title">rend</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">const_reverse_iterator</span>(start);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取第一个和最后一个元素的值</span></span><br><span class="line">  <span class="function">reference <span class="title">front</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> *start; &#125;</span><br><span class="line">  <span class="function">reference <span class="title">back</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    iterator tmp = finish;</span><br><span class="line">    --tmp;</span><br><span class="line">    <span class="keyword">return</span> *tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">const_reference <span class="title">front</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> *start; &#125;</span><br><span class="line">  <span class="function">const_reference <span class="title">back</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    const_iterator tmp = finish;</span><br><span class="line">    --tmp;</span><br><span class="line">    <span class="keyword">return</span> *tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">size_type <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> finish - start;; &#125; <span class="comment">// 获取数组的大小</span></span><br><span class="line">  <span class="function">size_type <span class="title">max_size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">size_type</span>(<span class="number">-1</span>); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> finish == start; &#125;<span class="comment">// 判断deque是否为空</span></span><br><span class="line">    </span><br><span class="line">  reference <span class="keyword">operator</span>[](size_type n) &#123; <span class="keyword">return</span> start[<span class="built_in">difference_type</span>(n)]; &#125;</span><br><span class="line">  const_reference <span class="keyword">operator</span>[](size_type n) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> start[<span class="built_in">difference_type</span>(n)];</span><br><span class="line">  &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="deque-的操作符重载"><a href="#deque-的操作符重载" class="headerlink" title="deque 的操作符重载"></a>deque 的操作符重载</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc, <span class="keyword">size_t</span> BufSiz = <span class="number">0</span>&gt; </span><br><span class="line">class deque &#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">public</span>:                         <span class="comment">// Constructor, destructor.</span></span><br><span class="line">    <span class="comment">// 重载 = </span></span><br><span class="line">    <span class="comment">// 原deque比赋值的大, 就必须清除多余的元素, 否则就需要将多余的元素进行插入</span></span><br><span class="line">  deque&amp; <span class="keyword">operator</span>= (<span class="keyword">const</span> deque&amp; x) &#123;</span><br><span class="line">    <span class="keyword">const</span> size_type len = <span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (&amp;x != <span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">// 清楚原deque的多余元素</span></span><br><span class="line">      <span class="keyword">if</span> (len &gt;= x.<span class="built_in">size</span>())</span><br><span class="line">        <span class="built_in">erase</span>(<span class="built_in">copy</span>(x.<span class="built_in">begin</span>(), x.<span class="built_in">end</span>(), start), finish);</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        const_iterator mid = x.<span class="built_in">begin</span>() + <span class="built_in">difference_type</span>(len);</span><br><span class="line">        <span class="built_in">copy</span>(x.<span class="built_in">begin</span>(), mid, start);</span><br><span class="line">        <span class="built_in">insert</span>(finish, mid, x.<span class="built_in">end</span>());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;        </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STL_NON_TYPE_TMPL_PARAM_BUG</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 重载==, !=, &lt;</span></span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> deque&lt;T, Alloc, <span class="number">0</span>&gt;&amp; x) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">size</span>() == x.<span class="built_in">size</span>() &amp;&amp; <span class="built_in">equal</span>(<span class="built_in">begin</span>(), <span class="built_in">end</span>(), x.<span class="built_in">begin</span>());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> deque&lt;T, Alloc, <span class="number">0</span>&gt;&amp; x) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">size</span>() != x.<span class="built_in">size</span>() || !<span class="built_in">equal</span>(<span class="built_in">begin</span>(), <span class="built_in">end</span>(), x.<span class="built_in">begin</span>());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> deque&lt;T, Alloc, <span class="number">0</span>&gt;&amp; x) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lexicographical_compare</span>(<span class="built_in">begin</span>(), <span class="built_in">end</span>(), x.<span class="built_in">begin</span>(), x.<span class="built_in">end</span>());</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __STL_NON_TYPE_TMPL_PARAM_BUG */</span></span></span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">size_t</span> <span class="title">BufSiz</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> deque&lt;T, Alloc, BufSiz&gt;&amp; x,</span><br><span class="line">                <span class="keyword">const</span> deque&lt;T, Alloc, BufSiz&gt;&amp; y) &#123;</span><br><span class="line">  <span class="keyword">return</span> x.<span class="built_in">size</span>() == y.<span class="built_in">size</span>() &amp;&amp; <span class="built_in">equal</span>(x.<span class="built_in">begin</span>(), x.<span class="built_in">end</span>(), y.<span class="built_in">begin</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">size_t</span> <span class="title">BufSiz</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> deque&lt;T, Alloc, BufSiz&gt;&amp; x,</span><br><span class="line">               <span class="keyword">const</span> deque&lt;T, Alloc, BufSiz&gt;&amp; y) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">lexicographical_compare</span>(x.<span class="built_in">begin</span>(), x.<span class="built_in">end</span>(), y.<span class="built_in">begin</span>(), y.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="deque-的-元素操作"><a href="#deque-的-元素操作" class="headerlink" title="deque 的 元素操作"></a>deque 的 元素操作</h2><h3 id="push-pop"><a href="#push-pop" class="headerlink" title="push, pop"></a>push, pop</h3><p>由于 <code>deque</code> 都可以实现双向操作 所以其 <code>push</code>, <code>pop</code> 的操作都类似于 <code>list</code> 的 <code>push</code> 和 <code>pop</code> 操作, 但是由于 <code>list</code> 采用链表实现, 所以不会涉及到容器边界的判断, 而由于 <code>deque</code> 是利用不连续的数组来实现元素的存储, 所以在插入和弹出数据是需要对边界线进行判断</p><h4 id="push-实现"><a href="#push-实现" class="headerlink" title="push 实现"></a>push 实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc, <span class="keyword">size_t</span> BufSiz = <span class="number">0</span>&gt; </span><br><span class="line">class deque &#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">public</span>:                         </span><br><span class="line">    <span class="comment">// 对尾进行插入</span></span><br><span class="line">    <span class="comment">// 判断函数是否达到了数组尾部. 没有达到就直接进行插入</span></span><br><span class="line">  <span class="keyword">void</span> <span class="built_in">push_back</span>(<span class="keyword">const</span> value_type&amp; t) &#123;</span><br><span class="line">    <span class="keyword">if</span> (finish.cur != finish.last - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">construct</span>(finish.cur, t);</span><br><span class="line">      ++finish.cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">push_back_aux</span>(t);</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">// 对头进行插入</span></span><br><span class="line">    <span class="comment">// 判断函数是否达到了数组头部. 没有达到就直接进行插入</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">push_front</span><span class="params">(<span class="keyword">const</span> value_type&amp; t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start.cur != start.first) &#123;</span><br><span class="line">      <span class="built_in">construct</span>(start.cur - <span class="number">1</span>, t);</span><br><span class="line">      --start.cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">push_front_aux</span>(t);</span><br><span class="line">  &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果在 <code>push</code> 操作中发现数组越界的情况, 就移动到相应的下一个数组进行 <code>push</code> 操作, 其是调用 <code>push_front(back)_aux</code> 方法来实现, 这个辅助方法会在后面进行介绍</p><h4 id="push-front-back-aux"><a href="#push-front-back-aux" class="headerlink" title="push_front(back)_aux"></a>push_front(back)_aux</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Called only if finish.cur == finish.last - 1.</span></span><br><span class="line"><span class="comment">// 到达了数组的尾部</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">size_t</span> <span class="title">BufSize</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> deque&lt;T, Alloc, BufSize&gt;::<span class="built_in">push_back_aux</span>(<span class="keyword">const</span> value_type&amp; t) &#123;</span><br><span class="line">  value_type t_copy = t;</span><br><span class="line">  <span class="built_in">reserve_map_at_back</span>();</span><br><span class="line">  <span class="comment">// 申请空间</span></span><br><span class="line">  *(finish.node + <span class="number">1</span>) = <span class="built_in">allocate_node</span>();</span><br><span class="line">  __STL_TRY &#123;</span><br><span class="line">  <span class="comment">// 执行构造</span></span><br><span class="line">    <span class="built_in">construct</span>(finish.cur, t_copy);</span><br><span class="line">    <span class="comment">// 移动node, 指向下一个数组的头</span></span><br><span class="line">    finish.<span class="built_in">set_node</span>(finish.node + <span class="number">1</span>);</span><br><span class="line">    finish.cur = finish.first;<span class="comment">// cur只指向当前数组的头</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果分配失败, 释放掉该内存</span></span><br><span class="line">  __STL_UNWIND(<span class="built_in">deallocate_node</span>(*(finish.node + <span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Called only if start.cur == start.first.</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">size_t</span> <span class="title">BufSize</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> deque&lt;T, Alloc, BufSize&gt;::<span class="built_in">push_front_aux</span>(<span class="keyword">const</span> value_type&amp; t) &#123;</span><br><span class="line">  value_type t_copy = t;</span><br><span class="line">  <span class="built_in">reserve_map_at_front</span>();</span><br><span class="line">  <span class="comment">// 申请空间</span></span><br><span class="line">  *(start.node - <span class="number">1</span>) = <span class="built_in">allocate_node</span>();</span><br><span class="line">  __STL_TRY &#123;</span><br><span class="line">  <span class="comment">// 先要移动node, 让其指向上一个数组的尾部</span></span><br><span class="line">    start.<span class="built_in">set_node</span>(start.node - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// cur指向当前数组的尾部</span></span><br><span class="line">    start.cur = start.last - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 执行构造</span></span><br><span class="line">    <span class="built_in">construct</span>(start.cur, t_copy);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#     <span class="meta-keyword">ifdef</span> __STL_USE_EXCEPTIONS</span></span><br><span class="line">  <span class="built_in"><span class="keyword">catch</span></span>(...) &#123;</span><br><span class="line">    start.<span class="built_in">set_node</span>(start.node + <span class="number">1</span>);</span><br><span class="line">    start.cur = start.first;</span><br><span class="line">    <span class="built_in">deallocate_node</span>(*(start.node - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">throw</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#     <span class="meta-keyword">endif</span> <span class="comment">/* __STL_USE_EXCEPTIONS */</span></span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这里要注意, 由于在尾部插入的时候, 是判断的插入的位置是不是该数组的最后一个位置, 也即 <code>finish</code> 是指向的最后一个元素的后一个地址, 而 <code>first</code> 当前指向的位置是有元素的, 所以 <code>push_back</code> 是先执行构造再移动 <code>node</code>, <code>push_front</code> 则是先移动 <code>node</code> 再进行构造, 下面 <code>pop</code> 也是同理 </p><h4 id="pop-实现"><a href="#pop-实现" class="headerlink" title="pop 实现"></a>pop 实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc, <span class="keyword">size_t</span> BufSiz = <span class="number">0</span>&gt; </span><br><span class="line">class deque &#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="comment">// 对尾部进行操作</span></span><br><span class="line">    <span class="comment">// 判断是否达到数组的头部. 没有到达就直接释放</span></span><br><span class="line">    <span class="keyword">void</span> <span class="built_in">pop_back</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (finish.cur != finish.first) &#123;</span><br><span class="line">      --finish.cur;</span><br><span class="line">      <span class="built_in">destroy</span>(finish.cur);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">pop_back_aux</span>();</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">// 对头部进行操作</span></span><br><span class="line">    <span class="comment">// 判断是否达到数组的尾部. 没有到达就直接释放</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">pop_front</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start.cur != start.last - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">destroy</span>(start.cur);</span><br><span class="line">      ++start.cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">      <span class="built_in">pop_front_aux</span>();</span><br><span class="line">  &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="pop判断越界后执行-pop-xxx-aux-方法"><a href="#pop判断越界后执行-pop-xxx-aux-方法" class="headerlink" title="pop判断越界后执行 pop_xxx_aux 方法"></a>pop判断越界后执行 <code>pop_xxx_aux</code> 方法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Called only if finish.cur == finish.first.</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">size_t</span> <span class="title">BufSize</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> deque&lt;T, Alloc, BufSize&gt;:: <span class="built_in">pop_back_aux</span>() &#123;</span><br><span class="line">  <span class="built_in">deallocate_node</span>(finish.first);<span class="comment">// 先调用析构函数</span></span><br><span class="line">  finish.<span class="built_in">set_node</span>(finish.node - <span class="number">1</span>);<span class="comment">// 再移动node</span></span><br><span class="line">  finish.cur = finish.last - <span class="number">1</span>;<span class="comment">// 然后cur指向当前数组的最后位置</span></span><br><span class="line">  <span class="built_in">destroy</span>(finish.cur);<span class="comment">// 最后释放内存空间.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Called only if start.cur == start.last - 1.  Note that if the deque</span></span><br><span class="line"><span class="comment">//  has at least one element (a necessary precondition for this member</span></span><br><span class="line"><span class="comment">//  function), and if start.cur == start.last, then the deque must have</span></span><br><span class="line"><span class="comment">//  at least two nodes.</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">size_t</span> <span class="title">BufSize</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> deque&lt;T, Alloc, BufSize&gt;::<span class="built_in">pop_front_aux</span>() &#123;</span><br><span class="line">  <span class="built_in">destroy</span>(start.cur);<span class="comment">// 先释放内存空间.</span></span><br><span class="line">  <span class="built_in">deallocate_node</span>(start.first);<span class="comment">// 再调用析构函数</span></span><br><span class="line">  start.<span class="built_in">set_node</span>(start.node + <span class="number">1</span>);<span class="comment">// 然后移动node</span></span><br><span class="line">  start.cur = start.first;<span class="comment">// 最后cur指向当前数组的第一个位置</span></span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p><strong>注意</strong> 这里 <code>dellocate_node</code> 函数是析构的数组空间</p><blockquote><p>reserve_map_at一类函数. pop和push都先调用了reserve_map_at_XX函数, 这些函数<br>主要是为了判断前后空间是否足够.</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc, <span class="keyword">size_t</span> BufSiz = <span class="number">0</span>&gt; </span><br><span class="line">class deque &#123;</span><br><span class="line">    ...</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">void</span> <span class="built_in">new_elements_at_front</span>(size_type new_elements);</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">new_elements_at_back</span><span class="params">(size_type new_elements)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">destroy_nodes_at_front</span><span class="params">(iterator before_start)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">destroy_nodes_at_back</span><span class="params">(iterator after_finish)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:                      <span class="comment">// Allocation of map and nodes</span></span><br><span class="line">  <span class="comment">// Makes sure the map has space for new nodes.  Does not actually</span></span><br><span class="line">  <span class="comment">//  add the nodes.  Can invalidate map pointers.  (And consequently, </span></span><br><span class="line">  <span class="comment">//  deque iterators.)</span></span><br><span class="line"><span class="comment">// 始终保证后面要有一个及以上的空数组大小</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">reserve_map_at_back</span> <span class="params">(size_type nodes_to_add = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nodes_to_add + <span class="number">1</span> &gt; map_size - (finish.node - map))</span><br><span class="line">      <span class="built_in">reallocate_map</span>(nodes_to_add, <span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 始终保证前面要有一个及以上的空数组大小</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">reserve_map_at_front</span> <span class="params">(size_type nodes_to_add = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nodes_to_add &gt; start.node - map)</span><br><span class="line">      <span class="built_in">reallocate_map</span>(nodes_to_add, <span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">reallocate_map</span><span class="params">(size_type nodes_to_add, <span class="keyword">bool</span> add_at_front)</span></span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="对于-reallocate-map-方法"><a href="#对于-reallocate-map-方法" class="headerlink" title="对于 reallocate_map 方法"></a>对于 reallocate_map 方法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">size_t</span> <span class="title">BufSize</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> deque&lt;T, Alloc, BufSize&gt;::<span class="built_in">reallocate_map</span>(size_type nodes_to_add, <span class="keyword">bool</span> add_at_front) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 保存现在的空间大小和新的空间大小</span></span><br><span class="line">  size_type old_num_nodes = finish.node - start.node + <span class="number">1</span>;</span><br><span class="line">  size_type new_num_nodes = old_num_nodes + nodes_to_add;</span><br><span class="line"></span><br><span class="line">  map_pointer new_nstart;</span><br><span class="line">    <span class="comment">// map_size &gt; 2 * new_num_nodes 发现deque空间还很充足就只是调整deque内部的元素就行了, 没必要重新开空间</span></span><br><span class="line">    <span class="comment">// 这种情况主要出现在一直往首或尾单方向插入元素, 导致首(尾)前面还有很多余留的空间, 这种情况就这样调整</span></span><br><span class="line">  <span class="keyword">if</span> (map_size &gt; <span class="number">2</span> * new_num_nodes) &#123;</span><br><span class="line">    new_nstart = map + (map_size - new_num_nodes) / <span class="number">2</span> + (add_at_front ? nodes_to_add : <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (new_nstart &lt; start.node)</span><br><span class="line">      <span class="built_in">copy</span>(start.node, finish.node + <span class="number">1</span>, new_nstart);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">copy_backward</span>(start.node, finish.node + <span class="number">1</span>, new_nstart + old_num_nodes);</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">// 空间是真的不够了</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    size_type new_map_size = map_size + <span class="built_in">max</span>(map_size, nodes_to_add) + <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 分配空间. 重新定位start的位置</span></span><br><span class="line">    map_pointer new_map = map_allocator::<span class="built_in">allocate</span>(new_map_size);</span><br><span class="line">    new_nstart = new_map + (new_map_size - new_num_nodes) / <span class="number">2</span> + (add_at_front ? nodes_to_add : <span class="number">0</span>);</span><br><span class="line">      <span class="comment">// 拷贝原deque元素, 最后释放掉原内存空间</span></span><br><span class="line">    <span class="built_in">copy</span>(start.node, finish.node + <span class="number">1</span>, new_nstart);</span><br><span class="line">    map_allocator::<span class="built_in">deallocate</span>(map, map_size);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 调整map</span></span><br><span class="line">    map = new_map;</span><br><span class="line">    map_size = new_map_size;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 重新调整start, finish</span></span><br><span class="line">  start.<span class="built_in">set_node</span>(new_nstart);</span><br><span class="line">  finish.<span class="built_in">set_node</span>(new_nstart + old_num_nodes - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其是在 <code>deque</code> 空间不足时使用, 来进行扩容</p><ol><li>deque 的空间足够使用 其内部移动 <code>start</code>, <code>finish</code> 来实现, 这种情况一般是前后剩余空间失衡所进行的移动</li><li>deque 空间不足<br>i. 申请更大的空间<br>ii. 将所有元素拷贝到新的空间<br>iii. 修改原 map 的 start 和 finish 指向</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">size_t</span> <span class="title">BufSize</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> deque&lt;T, Alloc, BufSize&gt;::<span class="built_in">destroy_nodes_at_front</span>(iterator before_start) &#123;</span><br><span class="line">  <span class="keyword">for</span> (map_pointer n = before_start.node; n &lt; start.node; ++n)</span><br><span class="line">    <span class="built_in">deallocate_node</span>(*n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">size_t</span> <span class="title">BufSize</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> deque&lt;T, Alloc, BufSize&gt;::<span class="built_in">destroy_nodes_at_back</span>(iterator after_finish) &#123;</span><br><span class="line">  <span class="keyword">for</span> (map_pointer n = after_finish.node; n &gt; finish.node; --n)</span><br><span class="line">    <span class="built_in">deallocate_node</span>(*n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc, <span class="keyword">size_t</span> BufSiz = <span class="number">0</span>&gt; </span><br><span class="line">class deque &#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">  iterator <span class="built_in">reserve_elements_at_front</span>(size_type n) &#123;</span><br><span class="line">      <span class="comment">//查看最前面的数组剩余多少空间</span></span><br><span class="line">    size_type vacancies = start.cur - start.first;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; vacancies) </span><br><span class="line">        <span class="comment">//给多出元素数量在分配足够的数组</span></span><br><span class="line">      <span class="built_in">new_elements_at_front</span>(n - vacancies);</span><br><span class="line">      <span class="comment">//返回重新添加元素后的新的 start</span></span><br><span class="line">    <span class="keyword">return</span> start - <span class="built_in">difference_type</span>(n);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//同上</span></span><br><span class="line">  <span class="function">iterator <span class="title">reserve_elements_at_back</span><span class="params">(size_type n)</span> </span>&#123;</span><br><span class="line">    size_type vacancies = (finish.last - finish.cur) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; vacancies)</span><br><span class="line">      <span class="built_in">new_elements_at_back</span>(n - vacancies);</span><br><span class="line">    <span class="keyword">return</span> finish + <span class="built_in">difference_type</span>(n);</span><br><span class="line">  &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">size_t</span> <span class="title">BufSize</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> deque&lt;T, Alloc, BufSize&gt;::<span class="built_in">new_elements_at_front</span>(size_type new_elements) &#123;</span><br><span class="line">    <span class="comment">//计算至少需要多少数组</span></span><br><span class="line">  size_type new_nodes = (new_elements + <span class="built_in">buffer_size</span>() - <span class="number">1</span>) / <span class="built_in">buffer_size</span>();</span><br><span class="line">  <span class="built_in">reserve_map_at_front</span>(new_nodes);</span><br><span class="line">  size_type i;</span><br><span class="line">  __STL_TRY &#123;</span><br><span class="line">      <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= new_nodes; ++i)</span><br><span class="line">      *(start.node - i) = <span class="built_in">allocate_node</span>();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta"># <span class="meta-keyword">ifdef</span> __STL_USE_EXCEPTIONS</span></span><br><span class="line">  <span class="built_in"><span class="keyword">catch</span></span>(...) &#123;</span><br><span class="line">    <span class="keyword">for</span> (size_type j = <span class="number">1</span>; j &lt; i; ++j)</span><br><span class="line">      <span class="built_in">deallocate_node</span>(*(start.node - j));      </span><br><span class="line">    <span class="keyword">throw</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __STL_USE_EXCEPTIONS */</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">size_t</span> <span class="title">BufSize</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> deque&lt;T, Alloc, BufSize&gt;::<span class="built_in">new_elements_at_back</span>(size_type new_elements) &#123;</span><br><span class="line">  size_type new_nodes = (new_elements + <span class="built_in">buffer_size</span>() - <span class="number">1</span>) / <span class="built_in">buffer_size</span>();</span><br><span class="line">  <span class="built_in">reserve_map_at_back</span>(new_nodes);</span><br><span class="line">  size_type i;</span><br><span class="line">  __STL_TRY &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= new_nodes; ++i)</span><br><span class="line">      *(finish.node + i) = <span class="built_in">allocate_node</span>();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STL_USE_EXCEPTIONS</span></span><br><span class="line">  <span class="built_in"><span class="keyword">catch</span></span>(...) &#123;</span><br><span class="line">    <span class="keyword">for</span> (size_type j = <span class="number">1</span>; j &lt; i; ++j)</span><br><span class="line">      <span class="built_in">deallocate_node</span>(*(finish.node + j));      </span><br><span class="line">    <span class="keyword">throw</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __STL_USE_EXCEPTIONS */</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p>之前考虑到 <code>deque</code> 在前后实现插入时为了保证时间复杂度为 O(1), 所以在前后预留了空间, 所以 <code>push</code> 和 `pop  都可以在前面的数组进行操作</p><p>对于 <code>earse</code> 由于 <code>deque</code> 是由数组构成的, 所以地址空间是 <strong>相对连续</strong> 的, 故在删除时也要像 <code>vector</code> 一样, 要移动大量元素, <code>deque</code> 为了保证效率尽可能的高, 采用了判断删除的位置是中间偏后还是中间偏前来进行移动</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc, <span class="keyword">size_t</span> BufSiz = <span class="number">0</span>&gt; </span><br><span class="line">class deque &#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">public</span>:                         <span class="comment">// Erase</span></span><br><span class="line">  iterator <span class="built_in">erase</span>(iterator pos) </span><br><span class="line">  &#123;</span><br><span class="line">    iterator next = pos;</span><br><span class="line">    ++next;</span><br><span class="line">    difference_type index = pos - start;</span><br><span class="line">      <span class="comment">// 删除的地方是中间偏前, 移动前面的元素</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (<span class="built_in">size</span>() &gt;&gt; <span class="number">1</span>)) </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">copy_backward</span>(start, pos, next);</span><br><span class="line">      <span class="built_in">pop_front</span>();</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="comment">// 删除的地方是中间偏后, 移动后面的元素</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">copy</span>(next, finish, pos);</span><br><span class="line">      <span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> start + index;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 范围删除, 实际也是调用上面的erase函数.</span></span><br><span class="line">  <span class="function">iterator <span class="title">erase</span><span class="params">(iterator first, iterator last)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>; </span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>erase(iterator first, iterator last)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">size_t</span> <span class="title">BufSize</span>&gt;</span></span><br><span class="line">deque&lt;T, Alloc, BufSize&gt;::iterator </span><br><span class="line">deque&lt;T, Alloc, BufSize&gt;::<span class="built_in">erase</span>(iterator first, iterator last) </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (first == start &amp;&amp; last == finish) &#123;</span><br><span class="line">    <span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">return</span> finish;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 计算出两个迭代器的距离, 毕竟是连续的, 可以直接计算</span></span><br><span class="line">    difference_type n = last - first;</span><br><span class="line">      <span class="comment">// 同样, 选择前后哪种方法移动.</span></span><br><span class="line">    difference_type elems_before = first - start;</span><br><span class="line">      <span class="comment">// 删除的地方是中间偏前, 移动前面的元素</span></span><br><span class="line">    <span class="keyword">if</span> (elems_before &lt; (<span class="built_in">size</span>() - n) / <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="built_in">copy_backward</span>(start, first, last);</span><br><span class="line">      iterator new_start = start + n;</span><br><span class="line">      <span class="built_in">destroy</span>(start, new_start);</span><br><span class="line">        <span class="comment">// 可能会涉及到跨数组的问题(用户使用并不知道)</span></span><br><span class="line">      <span class="keyword">for</span> (map_pointer cur = start.node; cur &lt; new_start.node; ++cur)</span><br><span class="line">        data_allocator::<span class="built_in">deallocate</span>(*cur, <span class="built_in">buffer_size</span>());</span><br><span class="line">      start = new_start;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="comment">// 删除的地方是中间偏后, 移动后面的元素</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">copy</span>(last, finish, first);</span><br><span class="line">      iterator new_finish = finish - n;</span><br><span class="line">      <span class="built_in">destroy</span>(new_finish, finish);</span><br><span class="line">        <span class="comment">// 可能会涉及到跨数组的问题(用户使用并不知道)</span></span><br><span class="line">      <span class="keyword">for</span> (map_pointer cur = new_finish.node + <span class="number">1</span>; cur &lt;= finish.node; ++cur)</span><br><span class="line">        data_allocator::<span class="built_in">deallocate</span>(*cur, <span class="built_in">buffer_size</span>());</span><br><span class="line">      finish = new_finish;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> start + elems_before;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="clear-方法"><a href="#clear-方法" class="headerlink" title="clear 方法"></a>clear 方法</h3><p>删除所有元素, 一共有两步</p><ol><li>从第二个数组一直到倒数第二个数组, 一次性全部删除, 因为中间的数组一定是满的</li><li>删除首尾两个数组元素</li><li></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">size_t</span> <span class="title">BufSize</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> deque&lt;T, Alloc, BufSize&gt;::<span class="built_in">clear</span>() &#123;</span><br><span class="line"><span class="comment">// 从第二个数组开始到倒数第二个数组一次性全部删除</span></span><br><span class="line"><span class="comment">// 毕竟中间的数组肯定都是满的, 前后两个数组就不一定是填充满的.</span></span><br><span class="line">  <span class="keyword">for</span> (map_pointer node = start.node + <span class="number">1</span>; node &lt; finish.node; ++node) &#123;</span><br><span class="line">    <span class="built_in">destroy</span>(*node, *node + <span class="built_in">buffer_size</span>());</span><br><span class="line">    data_allocator::<span class="built_in">deallocate</span>(*node, <span class="built_in">buffer_size</span>());</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 删除前后两个数组的元素.</span></span><br><span class="line">  <span class="keyword">if</span> (start.node != finish.node) &#123; <span class="comment">// 防止重复释放元素</span></span><br><span class="line">    <span class="built_in">destroy</span>(start.cur, start.last);</span><br><span class="line">    <span class="built_in">destroy</span>(finish.first, finish.cur);</span><br><span class="line">    data_allocator::<span class="built_in">deallocate</span>(finish.first, <span class="built_in">buffer_size</span>());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">destroy</span>(start.cur, finish.cur);</span><br><span class="line"></span><br><span class="line">  finish = start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><p><code>deque</code>的swap操作也只是交换了start, finish, map, 并没有交换所有的元素.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc, <span class="keyword">size_t</span> BufSiz = <span class="number">0</span>&gt; </span><br><span class="line">class deque &#123;</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">void</span> <span class="built_in">swap</span>(deque&amp; x)</span><br><span class="line">        &#123;</span><br><span class="line">        __STD::<span class="built_in">swap</span>(start, x.start);</span><br><span class="line">        __STD::<span class="built_in">swap</span>(finish, x.finish);</span><br><span class="line">        __STD::<span class="built_in">swap</span>(map, x.map);</span><br><span class="line">        __STD::<span class="built_in">swap</span>(map_size, x.map_size);</span><br><span class="line">      &#125;</span><br><span class="line">        ...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">size_t</span> <span class="title">BufSiz</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(deque&lt;T, Alloc, BufSiz&gt;&amp; x, deque&lt;T, Alloc, BufSiz&gt;&amp; y)</span> </span>&#123;</span><br><span class="line">  x.<span class="built_in">swap</span>(y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="resize函数"><a href="#resize函数" class="headerlink" title="resize函数"></a>resize函数</h3><p><strong>resize函数</strong>. 重新将<code>deque</code>进行调整, 实现与<code>list</code>一样的.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc, <span class="keyword">size_t</span> BufSiz = <span class="number">0</span>&gt; </span><br><span class="line">class deque &#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="keyword">void</span> <span class="built_in">resize</span>(size_type new_size) &#123; <span class="built_in">resize</span>(new_size, <span class="built_in">value_type</span>()); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(size_type new_size, <span class="keyword">const</span> value_type&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> size_type len = <span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">// 元素大小大于了要修改的大小, 则释放掉超过的元素</span></span><br><span class="line">    <span class="keyword">if</span> (new_size &lt; len) </span><br><span class="line">      <span class="built_in">erase</span>(start + new_size, finish);</span><br><span class="line">    <span class="comment">// 元素不够, 就从end开始到要求的大小为止都初始化x</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">insert</span>(finish, new_size - len, x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><h4 id="insert-实现"><a href="#insert-实现" class="headerlink" title="insert 实现"></a>insert 实现</h4><p>先列出所有的重载方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">iterator <span class="title">insert</span><span class="params">(iterator position, <span class="keyword">const</span> value_type&amp; x)</span></span>;</span><br><span class="line"><span class="function">iterator <span class="title">insert</span><span class="params">(iterator position)</span> </span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用相同的重载函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(iterator pos, size_type n, <span class="keyword">const</span> value_type&amp; x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(iterator pos, <span class="keyword">int</span> n, <span class="keyword">const</span> value_type&amp; x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(iterator pos, <span class="keyword">long</span> n, <span class="keyword">const</span> value_type&amp; x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(iterator pos, InputIterator first, InputIterator last)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(iterator pos, <span class="keyword">const</span> value_type* first, <span class="keyword">const</span> value_type* last)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(iterator pos, const_iterator first, const_iterator last)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(iterator pos, InputIterator first, InputIterator last, input_iterator_tag)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(iterator pos, ForwardIterator first, ForwardIterator last,forward_iterator_tag)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>单点插入</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc, <span class="keyword">size_t</span> BufSiz = <span class="number">0</span>&gt; </span><br><span class="line">class deque &#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">public</span>:                         <span class="comment">// Insert</span></span><br><span class="line">  iterator <span class="built_in">insert</span>(iterator position, <span class="keyword">const</span> value_type&amp; x) &#123;</span><br><span class="line">      <span class="comment">// 如果只是在头尾插入, 直接调用push就行了.</span></span><br><span class="line">    <span class="keyword">if</span> (position.cur == start.cur) &#123;</span><br><span class="line">      <span class="built_in">push_front</span>(x);</span><br><span class="line">      <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (position.cur == finish.cur) &#123;</span><br><span class="line">      <span class="built_in">push_back</span>(x);</span><br><span class="line">      iterator tmp = finish;</span><br><span class="line">      --tmp;</span><br><span class="line">      <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="comment">// 随机插入</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">insert_aux</span>(position, x);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>单位置插入多个元素</strong></p><p>**insert(iterator pos, size_type n, const value_type&amp; x) ** 在指定的位置插入n个元素并初始化.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">size_t</span> <span class="title">BufSize</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> deque&lt;T, Alloc, BufSize&gt;::<span class="built_in">insert</span>(iterator pos, size_type n, <span class="keyword">const</span> value_type&amp; x) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 同样判断是不是直接在头尾进行插入.</span></span><br><span class="line">  <span class="keyword">if</span> (pos.cur == start.cur) &#123;</span><br><span class="line">      <span class="comment">// 判断还有没有足够的空间</span></span><br><span class="line">    iterator new_start = <span class="built_in">reserve_elements_at_front</span>(n);</span><br><span class="line">    <span class="built_in">uninitialized_fill</span>(new_start, start, x); <span class="comment">// 范围初始化</span></span><br><span class="line">    start = new_start;<span class="comment">// 修改start位置</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (pos.cur == finish.cur) &#123;</span><br><span class="line">    iterator new_finish = <span class="built_in">reserve_elements_at_back</span>(n);<span class="comment">// 判断还有没有足够的空间</span></span><br><span class="line">    <span class="built_in">uninitialized_fill</span>(finish, new_finish, x);<span class="comment">// 范围初始化</span></span><br><span class="line">    finish = new_finish;<span class="comment">// 修改finish位置</span></span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">// 随机插入</span></span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">    <span class="built_in">insert_aux</span>(pos, n, x);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(iterator pos, <span class="keyword">int</span> n, <span class="keyword">const</span> value_type&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">insert</span>(pos, (size_type) n, x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(iterator pos, <span class="keyword">long</span> n, <span class="keyword">const</span> value_type&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">insert</span>(pos, (size_type) n, x);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>**void insert(iterator pos, InputIterator first, InputIterator last) **. 通过参数的类型选择最优, 高效率的插入方式.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(iterator pos, InputIterator first, InputIterator last)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">insert</span>(pos, first, last, <span class="built_in">iterator_category</span>(first));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// input_iterator_tag类型的迭代器</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">size_t</span> <span class="title">BufSize</span>&gt;</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> deque&lt;T, Alloc, BufSize&gt;::<span class="built_in">insert</span>(iterator pos,InputIterator first, InputIterator last,</span><br><span class="line">input_iterator_tag) </span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">copy</span>(first, last, <span class="built_in">inserter</span>(*<span class="keyword">this</span>, pos));<span class="comment">// 直接调用copy函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// forward_iterator_tag类型的迭代器</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">size_t</span> <span class="title">BufSize</span>&gt;</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> deque&lt;T, Alloc, BufSize&gt;::<span class="built_in">insert</span>(iterator pos,ForwardIterator first,ForwardIterator last,forward_iterator_tag) </span><br><span class="line">&#123;</span><br><span class="line">  size_type n = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">distance</span>(first, last, n); <span class="comment">// 计算迭代器之间的距离</span></span><br><span class="line">    <span class="comment">// 同样, 首尾插入判断</span></span><br><span class="line">  <span class="keyword">if</span> (pos.cur == start.cur) &#123;</span><br><span class="line">    iterator new_start = <span class="built_in">reserve_elements_at_front</span>(n);</span><br><span class="line">    __STL_TRY &#123;</span><br><span class="line">      <span class="built_in">uninitialized_copy</span>(first, last, new_start);</span><br><span class="line">      start = new_start;</span><br><span class="line">    &#125;</span><br><span class="line">    __STL_UNWIND(<span class="built_in">destroy_nodes_at_front</span>(new_start));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (pos.cur == finish.cur) &#123;</span><br><span class="line">    iterator new_finish = <span class="built_in">reserve_elements_at_back</span>(n);</span><br><span class="line">    __STL_TRY &#123;</span><br><span class="line">      <span class="built_in">uninitialized_copy</span>(first, last, finish);</span><br><span class="line">      finish = new_finish;</span><br><span class="line">    &#125;</span><br><span class="line">    __STL_UNWIND(<span class="built_in">destroy_nodes_at_back</span>(new_finish));</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">// 随机插入</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">insert_aux</span>(pos, first, last, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">size_t</span> <span class="title">BufSize</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> deque&lt;T, Alloc, BufSize&gt;::<span class="built_in">insert</span>(iterator pos,<span class="keyword">const</span> value_type* first,<span class="keyword">const</span> value_type* last) </span><br><span class="line">&#123;</span><br><span class="line">  size_type n = last - first;</span><br><span class="line">  <span class="keyword">if</span> (pos.cur == start.cur) &#123;</span><br><span class="line">    iterator new_start = <span class="built_in">reserve_elements_at_front</span>(n);</span><br><span class="line">    __STL_TRY &#123;</span><br><span class="line">      <span class="built_in">uninitialized_copy</span>(first, last, new_start);</span><br><span class="line">      start = new_start;</span><br><span class="line">    &#125;</span><br><span class="line">    __STL_UNWIND(<span class="built_in">destroy_nodes_at_front</span>(new_start));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (pos.cur == finish.cur) &#123;</span><br><span class="line">    iterator new_finish = <span class="built_in">reserve_elements_at_back</span>(n);</span><br><span class="line">    __STL_TRY &#123;</span><br><span class="line">      <span class="built_in">uninitialized_copy</span>(first, last, finish);</span><br><span class="line">      finish = new_finish;</span><br><span class="line">    &#125;</span><br><span class="line">    __STL_UNWIND(<span class="built_in">destroy_nodes_at_back</span>(new_finish));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">insert_aux</span>(pos, first, last, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">size_t</span> <span class="title">BufSize</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> deque&lt;T, Alloc, BufSize&gt;::<span class="built_in">insert</span>(iterator pos,const_iterator first,const_iterator last)</span><br><span class="line">&#123;</span><br><span class="line">  size_type n = last - first;</span><br><span class="line">  <span class="keyword">if</span> (pos.cur == start.cur) &#123;</span><br><span class="line">    iterator new_start = <span class="built_in">reserve_elements_at_front</span>(n);</span><br><span class="line">    __STL_TRY &#123;</span><br><span class="line">      <span class="built_in">uninitialized_copy</span>(first, last, new_start);</span><br><span class="line">      start = new_start;</span><br><span class="line">    &#125;</span><br><span class="line">    __STL_UNWIND(<span class="built_in">destroy_nodes_at_front</span>(new_start));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (pos.cur == finish.cur) &#123;</span><br><span class="line">    iterator new_finish = <span class="built_in">reserve_elements_at_back</span>(n);</span><br><span class="line">    __STL_TRY &#123;</span><br><span class="line">      <span class="built_in">uninitialized_copy</span>(first, last, finish);</span><br><span class="line">      finish = new_finish;</span><br><span class="line">    &#125;</span><br><span class="line">    __STL_UNWIND(<span class="built_in">destroy_nodes_at_back</span>(new_finish));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">insert_aux</span>(pos, first, last, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>insert_aux</strong></p><p>上面的每一个方法, 基本都调用了 <code>insert_aux</code> 方法, 下面就介绍一下该方法</p><p>**insert_aux(iterator pos, const value_type&amp; x) **</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">size_t</span> <span class="title">BufSize</span>&gt;</span></span><br><span class="line"><span class="keyword">typename</span> deque&lt;T, Alloc, BufSize&gt;::iterator</span><br><span class="line">deque&lt;T, Alloc, BufSize&gt;::<span class="built_in">insert_aux</span>(iterator pos, <span class="keyword">const</span> value_type&amp; x) </span><br><span class="line">&#123;</span><br><span class="line">  difference_type index = pos - start;</span><br><span class="line">  value_type x_copy = x;</span><br><span class="line">    <span class="comment">// 判断插入的位置离头还是尾比较近</span></span><br><span class="line">    <span class="comment">// 离头进</span></span><br><span class="line">  <span class="keyword">if</span> (index &lt; <span class="built_in">size</span>() / <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">push_front</span>(<span class="built_in">front</span>());<span class="comment">// 将头往前移动</span></span><br><span class="line">      <span class="comment">// 调整将要移动的距离</span></span><br><span class="line">    iterator front1 = start;</span><br><span class="line">    ++front1;</span><br><span class="line">    iterator front2 = front1;</span><br><span class="line">    ++front2;</span><br><span class="line">    pos = start + index;</span><br><span class="line">    iterator pos1 = pos;</span><br><span class="line">    ++pos1;</span><br><span class="line">      <span class="comment">// 用copy进行调整</span></span><br><span class="line">    <span class="built_in">copy</span>(front2, pos1, front1);</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">// 离尾近</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">push_back</span>(<span class="built_in">back</span>());<span class="comment">// 将尾往前移动</span></span><br><span class="line">      <span class="comment">// 调整将要移动的距离</span></span><br><span class="line">    iterator back1 = finish;</span><br><span class="line">    --back1;</span><br><span class="line">    iterator back2 = back1;</span><br><span class="line">    --back2;</span><br><span class="line">    pos = start + index;</span><br><span class="line">      <span class="comment">// 用copy进行调整</span></span><br><span class="line">    <span class="built_in">copy_backward</span>(pos, back2, back1);</span><br><span class="line">  &#125;</span><br><span class="line">  *pos = x_copy;</span><br><span class="line">  <span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**insert_aux(iterator pos, size_type n, const value_type&amp; x) ** </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">size_t</span> <span class="title">BufSize</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> deque&lt;T, Alloc, BufSize&gt;::<span class="built_in">insert_aux</span>(iterator pos, size_type n, <span class="keyword">const</span> value_type&amp; x) </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> difference_type elems_before = pos - start;</span><br><span class="line">  size_type length = <span class="built_in">size</span>();</span><br><span class="line">  value_type x_copy = x;</span><br><span class="line">    <span class="comment">// 判断插入的位置离头还是尾比较近</span></span><br><span class="line">    <span class="comment">// 离头近</span></span><br><span class="line">  <span class="keyword">if</span> (elems_before &lt; length / <span class="number">2</span>) &#123;</span><br><span class="line">    iterator new_start = <span class="built_in">reserve_elements_at_front</span>(n);<span class="comment">// 新的内存空间</span></span><br><span class="line">    iterator old_start = start;</span><br><span class="line">      <span class="comment">// 计算pos的新位置</span></span><br><span class="line">    pos = start + elems_before;</span><br><span class="line">    __STL_TRY &#123;</span><br><span class="line">        <span class="comment">// 到头的距离大于插入的个数n</span></span><br><span class="line">      <span class="keyword">if</span> (elems_before &gt;= <span class="built_in">difference_type</span>(n)) &#123;</span><br><span class="line">          <span class="comment">// 一部分一部分的进行调整</span></span><br><span class="line">        iterator start_n = start + <span class="built_in">difference_type</span>(n);</span><br><span class="line">        <span class="built_in">uninitialized_copy</span>(start, start_n, new_start);</span><br><span class="line">        start = new_start;</span><br><span class="line">        <span class="built_in">copy</span>(start_n, pos, old_start);</span><br><span class="line">        <span class="built_in">fill</span>(pos - <span class="built_in">difference_type</span>(n), pos, x_copy);</span><br><span class="line">      &#125;</span><br><span class="line">        <span class="comment">// 到头的距离不大于插入的个数n</span></span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        __uninitialized_copy_fill(start, pos, new_start, start, x_copy);</span><br><span class="line">        start = new_start;</span><br><span class="line">        <span class="built_in">fill</span>(old_start, pos, x_copy);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    __STL_UNWIND(<span class="built_in">destroy_nodes_at_front</span>(new_start));</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">// 离尾近. 执行都是一样的</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    iterator new_finish = <span class="built_in">reserve_elements_at_back</span>(n);</span><br><span class="line">    iterator old_finish = finish;</span><br><span class="line">    <span class="keyword">const</span> difference_type elems_after = <span class="built_in">difference_type</span>(length) - elems_before;</span><br><span class="line">    pos = finish - elems_after;</span><br><span class="line">    __STL_TRY &#123;</span><br><span class="line">      <span class="keyword">if</span> (elems_after &gt; <span class="built_in">difference_type</span>(n)) &#123;</span><br><span class="line">        iterator finish_n = finish - <span class="built_in">difference_type</span>(n);</span><br><span class="line">        <span class="built_in">uninitialized_copy</span>(finish_n, finish, finish);</span><br><span class="line">        finish = new_finish;</span><br><span class="line">        <span class="built_in">copy_backward</span>(pos, finish_n, old_finish);</span><br><span class="line">        <span class="built_in">fill</span>(pos, pos + <span class="built_in">difference_type</span>(n), x_copy);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        __uninitialized_fill_copy(finish, pos + <span class="built_in">difference_type</span>(n),</span><br><span class="line">                                  x_copy,</span><br><span class="line">                                  pos, finish);</span><br><span class="line">        finish = new_finish;</span><br><span class="line">        <span class="built_in">fill</span>(pos, old_finish, x_copy);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    __STL_UNWIND(<span class="built_in">destroy_nodes_at_back</span>(new_finish));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>剩余方法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STL_MEMBER_TEMPLATES  </span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">size_t</span> <span class="title">BufSize</span>&gt;</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> deque&lt;T, Alloc, BufSize&gt;::<span class="built_in">insert_aux</span>(iterator pos,</span><br><span class="line">                                          ForwardIterator first,</span><br><span class="line">                                          ForwardIterator last,</span><br><span class="line">                                          size_type n)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> difference_type elems_before = pos - start;</span><br><span class="line">  size_type length = <span class="built_in">size</span>();</span><br><span class="line">  <span class="keyword">if</span> (elems_before &lt; length / <span class="number">2</span>) &#123;</span><br><span class="line">    iterator new_start = <span class="built_in">reserve_elements_at_front</span>(n);</span><br><span class="line">    iterator old_start = start;</span><br><span class="line">    pos = start + elems_before;</span><br><span class="line">    __STL_TRY &#123;</span><br><span class="line">      <span class="keyword">if</span> (elems_before &gt;= <span class="built_in">difference_type</span>(n)) &#123;</span><br><span class="line">        iterator start_n = start + <span class="built_in">difference_type</span>(n); </span><br><span class="line">        <span class="built_in">uninitialized_copy</span>(start, start_n, new_start);</span><br><span class="line">        start = new_start;</span><br><span class="line">        <span class="built_in">copy</span>(start_n, pos, old_start);</span><br><span class="line">        <span class="built_in">copy</span>(first, last, pos - <span class="built_in">difference_type</span>(n));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        ForwardIterator mid = first;</span><br><span class="line">        <span class="built_in">advance</span>(mid, <span class="built_in">difference_type</span>(n) - elems_before);</span><br><span class="line">        __uninitialized_copy_copy(start, pos, first, mid, new_start);</span><br><span class="line">        start = new_start;</span><br><span class="line">        <span class="built_in">copy</span>(mid, last, old_start);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    __STL_UNWIND(<span class="built_in">destroy_nodes_at_front</span>(new_start));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    iterator new_finish = <span class="built_in">reserve_elements_at_back</span>(n);</span><br><span class="line">    iterator old_finish = finish;</span><br><span class="line">    <span class="keyword">const</span> difference_type elems_after = <span class="built_in">difference_type</span>(length) - elems_before;</span><br><span class="line">    pos = finish - elems_after;</span><br><span class="line">    __STL_TRY &#123;</span><br><span class="line">      <span class="keyword">if</span> (elems_after &gt; <span class="built_in">difference_type</span>(n)) &#123;</span><br><span class="line">        iterator finish_n = finish - <span class="built_in">difference_type</span>(n);</span><br><span class="line">        <span class="built_in">uninitialized_copy</span>(finish_n, finish, finish);</span><br><span class="line">        finish = new_finish;</span><br><span class="line">        <span class="built_in">copy_backward</span>(pos, finish_n, old_finish);</span><br><span class="line">        <span class="built_in">copy</span>(first, last, pos);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        ForwardIterator mid = first;</span><br><span class="line">        <span class="built_in">advance</span>(mid, elems_after);</span><br><span class="line">        __uninitialized_copy_copy(mid, last, pos, finish, finish);</span><br><span class="line">        finish = new_finish;</span><br><span class="line">        <span class="built_in">copy</span>(first, mid, pos);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    __STL_UNWIND(<span class="built_in">destroy_nodes_at_back</span>(new_finish));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* __STL_MEMBER_TEMPLATES */</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">size_t</span> <span class="title">BufSize</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> deque&lt;T, Alloc, BufSize&gt;::<span class="built_in">insert_aux</span>(iterator pos,</span><br><span class="line">                                          <span class="keyword">const</span> value_type* first,</span><br><span class="line">                                          <span class="keyword">const</span> value_type* last,</span><br><span class="line">                                          size_type n)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> difference_type elems_before = pos - start;</span><br><span class="line">  size_type length = <span class="built_in">size</span>();</span><br><span class="line">  <span class="keyword">if</span> (elems_before &lt; length / <span class="number">2</span>) &#123;</span><br><span class="line">    iterator new_start = <span class="built_in">reserve_elements_at_front</span>(n);</span><br><span class="line">    iterator old_start = start;</span><br><span class="line">    pos = start + elems_before;</span><br><span class="line">    __STL_TRY &#123;</span><br><span class="line">      <span class="keyword">if</span> (elems_before &gt;= <span class="built_in">difference_type</span>(n)) &#123;</span><br><span class="line">        iterator start_n = start + <span class="built_in">difference_type</span>(n);</span><br><span class="line">        <span class="built_in">uninitialized_copy</span>(start, start_n, new_start);</span><br><span class="line">        start = new_start;</span><br><span class="line">        <span class="built_in">copy</span>(start_n, pos, old_start);</span><br><span class="line">        <span class="built_in">copy</span>(first, last, pos - <span class="built_in">difference_type</span>(n));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> value_type* mid = first + (<span class="built_in">difference_type</span>(n) - elems_before);</span><br><span class="line">        __uninitialized_copy_copy(start, pos, first, mid, new_start);</span><br><span class="line">        start = new_start;</span><br><span class="line">        <span class="built_in">copy</span>(mid, last, old_start);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    __STL_UNWIND(<span class="built_in">destroy_nodes_at_front</span>(new_start));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    iterator new_finish = <span class="built_in">reserve_elements_at_back</span>(n);</span><br><span class="line">    iterator old_finish = finish;</span><br><span class="line">    <span class="keyword">const</span> difference_type elems_after = <span class="built_in">difference_type</span>(length) - elems_before;</span><br><span class="line">    pos = finish - elems_after;</span><br><span class="line">    __STL_TRY &#123;</span><br><span class="line">      <span class="keyword">if</span> (elems_after &gt; <span class="built_in">difference_type</span>(n)) &#123;</span><br><span class="line">        iterator finish_n = finish - <span class="built_in">difference_type</span>(n);</span><br><span class="line">        <span class="built_in">uninitialized_copy</span>(finish_n, finish, finish);</span><br><span class="line">        finish = new_finish;</span><br><span class="line">        <span class="built_in">copy_backward</span>(pos, finish_n, old_finish);</span><br><span class="line">        <span class="built_in">copy</span>(first, last, pos);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> value_type* mid = first + elems_after;</span><br><span class="line">        __uninitialized_copy_copy(mid, last, pos, finish, finish);</span><br><span class="line">        finish = new_finish;</span><br><span class="line">        <span class="built_in">copy</span>(first, mid, pos);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    __STL_UNWIND(<span class="built_in">destroy_nodes_at_back</span>(new_finish));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">size_t</span> <span class="title">BufSize</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> deque&lt;T, Alloc, BufSize&gt;::<span class="built_in">insert_aux</span>(iterator pos,</span><br><span class="line">                                          const_iterator first,</span><br><span class="line">                                          const_iterator last,</span><br><span class="line">                                          size_type n)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> difference_type elems_before = pos - start;</span><br><span class="line">  size_type length = <span class="built_in">size</span>();</span><br><span class="line">  <span class="keyword">if</span> (elems_before &lt; length / <span class="number">2</span>) &#123;</span><br><span class="line">    iterator new_start = <span class="built_in">reserve_elements_at_front</span>(n);</span><br><span class="line">    iterator old_start = start;</span><br><span class="line">    pos = start + elems_before;</span><br><span class="line">    __STL_TRY &#123;</span><br><span class="line">      <span class="keyword">if</span> (elems_before &gt;= n) &#123;</span><br><span class="line">        iterator start_n = start + n;</span><br><span class="line">        <span class="built_in">uninitialized_copy</span>(start, start_n, new_start);</span><br><span class="line">        start = new_start;</span><br><span class="line">        <span class="built_in">copy</span>(start_n, pos, old_start);</span><br><span class="line">        <span class="built_in">copy</span>(first, last, pos - <span class="built_in">difference_type</span>(n));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        const_iterator mid = first + (n - elems_before);</span><br><span class="line">        __uninitialized_copy_copy(start, pos, first, mid, new_start);</span><br><span class="line">        start = new_start;</span><br><span class="line">        <span class="built_in">copy</span>(mid, last, old_start);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    __STL_UNWIND(<span class="built_in">destroy_nodes_at_front</span>(new_start));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    iterator new_finish = <span class="built_in">reserve_elements_at_back</span>(n);</span><br><span class="line">    iterator old_finish = finish;</span><br><span class="line">    <span class="keyword">const</span> difference_type elems_after = length - elems_before;</span><br><span class="line">    pos = finish - elems_after;</span><br><span class="line">    __STL_TRY &#123;</span><br><span class="line">      <span class="keyword">if</span> (elems_after &gt; n) &#123;</span><br><span class="line">        iterator finish_n = finish - <span class="built_in">difference_type</span>(n);</span><br><span class="line">        <span class="built_in">uninitialized_copy</span>(finish_n, finish, finish);</span><br><span class="line">        finish = new_finish;</span><br><span class="line">        <span class="built_in">copy_backward</span>(pos, finish_n, old_finish);</span><br><span class="line">        <span class="built_in">copy</span>(first, last, pos);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        const_iterator mid = first + elems_after;</span><br><span class="line">        __uninitialized_copy_copy(mid, last, pos, finish, finish);</span><br><span class="line">        finish = new_finish;</span><br><span class="line">        <span class="built_in">copy</span>(first, mid, pos);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    __STL_UNWIND(<span class="built_in">destroy_nodes_at_back</span>(new_finish));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><p>为了渐少在增加或者删除元素时移动元素所带来的时间复杂度的提升, <code>deque</code> 的设计不可谓不复杂, 但是我认为, 其是为了支持更多的功能而采用如此复杂的设计. 不过其中一些操作在我看来是不需要进行深入了解的, 比如 <code>earse</code> 以及 <code>insert</code> 操作, 其原因在于对于 <code>deque</code> 的定义<strong>双端队列</strong>的<strong>元素出入顺序就只允许首尾进出</strong>, 所以对于<code>deque</code> 设计出的随机插入, 删除, 提取元素是不符合双端队列的定义, 而且绝大多数使用者都是按照双端队列的定义来进行使用的, 我暂时没有思考出 <code>deque</code> 提供如此复杂的设计和功能是出于什么目的, 不过以后在阅读了更多的优秀源码之后, 可能会得到答案, 到时会进行分析==(预定 &lt;分析为何部分 **STL** 容器的设计复杂度远超过其定义&gt; )==.</p><p>在后续实现自己 <strong>Tiny STL</strong> 时, 考虑使用 <code>list</code> 作为适配器来实现 <code>deque</code>的功能, 其实对于 <code>stack</code> 和 <code>queue</code> 使用<code>list</code> 来实现底层容器在时间复杂度上是相对优于标准库提供的<code>deque</code>, 对于绝大多数使用者, 本质上还是在使用其定义出的结构来使用此类容器, 所以并不会设计的如此复杂, 从而考虑尽可能降低时间复杂度</p>]]></content>
      
      
      <categories>
          
          <category> STL 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板方法模式</title>
      <link href="/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h1><h2 id="应对问题"><a href="#应对问题" class="headerlink" title="应对问题"></a>应对问题</h2><p>在项目构建过程中, 对于某一些问题, 都是有着稳定的整体操作结构, 但是在各个子步骤中却有着许多的改变需求, 并且由于某些原因不能将子任务和整体结构同时实现</p><p>比如对于一个应用程序具有 5 个步骤</p><p><a href="https://imgtu.com/i/HR0VNn"><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://s4.ax1x.com/2022/02/15/HR0VNn.png" alt="HR0VNn.png"></a></p><p>作为 Library 开发人员, 设计了整个应用程序的架构和整体步骤, 但是对于 2, 4 步骤, 并不能知道作为程序开发者将如何实现这些步骤,  所以可以使用 <strong>模板方法模式</strong> 来保证流程的稳定</p><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><blockquote><p>定义一个操作中的算法的骨架 (稳定)，而将一些步骤延迟(变化)到子类中。Template Method使得子类可以不改变(复用)一个算法的结构即可重定义(override 重写)该算法的某些特定步骤                                                                                                                                ——《设计模式》GoF</p></blockquote><h2 id="结构-Structure"><a href="#结构-Structure" class="headerlink" title="结构 (Structure)"></a>结构 (Structure)</h2><p><a href="https://imgtu.com/i/HRc8s0"><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://s4.ax1x.com/2022/02/15/HRc8s0.png" alt="HRc8s0.png"></a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>对于整个算法(程序的某个任务)的具体骨架是稳定的, 但是对于其中某些步骤并不稳定的话, 可以设计一个抽象类, 将稳定的部分以及整体流程设计出来, 并将不稳定的, 变化的部分交给程序发开者通过继承的方式进行扩展</p><h3 id="Library"><a href="#Library" class="headerlink" title="Library"></a>Library</h3><p>Library 开发者提供一个抽象类 来提供整个程序的流程骨架以及部分稳定的步骤过程</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">lass Library&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//template method</span></span><br><span class="line">    <span class="comment">// 整体骨架流程</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">Step1</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Step2</span>()) &#123; </span><br><span class="line">            <span class="built_in">Step3</span>(); </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="built_in">Step4</span>(); </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Step5</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">Library</span>()&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 这些步骤是要组合成一个流程来进行使用的, 在大部分情况下单独使用没有意义&#x27;</span></span><br><span class="line"><span class="comment">    * 故不开放给外部调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Step1</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="comment">//.....</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Step3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//.....</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Step5</span><span class="params">()</span> </span>&#123; </span><br><span class="line"><span class="comment">//.....</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Library 事先并不知道应用者要如何实现这些步骤, </span></span><br><span class="line"><span class="comment">     * 所以将这两个步骤以纯虚函数的方式定义, 待应用开发者进行实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">Step2</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Step4</span><span class="params">()</span> </span>=<span class="number">0</span>; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="application-开发者"><a href="#application-开发者" class="headerlink" title="application 开发者"></a>application 开发者</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承 Library 并提供自己对于步骤 2 4 的实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span> :</span> <span class="keyword">public</span> Library &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">Step2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//... </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Step4</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//... </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="主程序中使用"><a href="#主程序中使用" class="headerlink" title="主程序中使用"></a>主程序中使用</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Library* pLib=<span class="keyword">new</span> <span class="built_in">Application</span>();</span><br><span class="line">    lib-&gt;<span class="built_in">Run</span>();</span><br><span class="line"><span class="keyword">delete</span> pLib;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li><p>Template Method 模式是一种非常基础的设计模式, 在面向对象系统中有着大量的应用. 它使用最简洁的机制 (虚函数的多态性) 为很多应用程序框架提供了灵活的扩展点, 是代码复用方面的基本实现结构</p></li><li><p>除了可以灵活应对子步骤的变化外, “不要调用我, 让我来调用你” 的反向控制结构是 Template Method 的典型应用.</p></li><li><p>在具体实现方面, 被 Template Method 调用的虚方法可以具有实现, 也可以没有任何实现 (抽象方法, 纯虚方法),  但一般推荐将它们设置为 protected 方法</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>priority_queue 源码分析</title>
      <link href="/STL-%E6%BA%90%E7%A0%81/priority_queue/"/>
      <url>/STL-%E6%BA%90%E7%A0%81/priority_queue/</url>
      
        <content type="html"><![CDATA[<h1 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前分析的 <code>heap</code> 是为了分析 <code>priority_queue</code> 做准备, <code>priority_queue </code> 是一个堆优先队列, 支持插入和删除元素,  但是对于插入和删除进行了限制, 对于插入只能在堆的最后进行插入, 只能获取和删除堆顶元素, 由于<code>priority_queue</code> 也是队列的一种体现, 所以为了<strong>维护队列</strong>的特性, 不提供迭代器以进行遍历操作. 同时它也不能被严格称作容器, 它是以支持<code>RandomAccessIterator</code> 类型迭代器容器和 <code>heap</code> 支持对容器数据进行堆操作的一个配置器</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="类型定义"><a href="#类型定义" class="headerlink" title="类型定义"></a>类型定义</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __STL_LIMITED_DEFAULT_TEMPLATES</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Sequence</span> =</span> vector&lt;T&gt;, </span><br><span class="line">          <span class="class"><span class="keyword">class</span> <span class="title">Compare</span> =</span> less&lt;<span class="keyword">typename</span> Sequence::value_type&gt; &gt;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Sequence</span>, <span class="keyword">class</span> <span class="title">Compare</span>&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">priority_queue</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 符合traits编程规范</span></span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">typename</span> Sequence::value_type value_type;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">typename</span> Sequence::size_type size_type;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">typename</span> Sequence::reference reference;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">typename</span> Sequence::const_reference const_reference;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  Sequence c;<span class="comment">// 定义vector容器的对象</span></span><br><span class="line">  Compare comp;<span class="comment">// 定义比较函数(伪函数)</span></span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于 <code>Sequence</code> 也可以是 <code>deque</code> 因为 <code>deque</code> 也支持 <code>RandomAccessIterator</code> 类型迭代器</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">priority_queue</span> &#123;</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">priority_queue</span>() : <span class="built_in">c</span>() &#123;&#125;<span class="comment">// 默认构造函数</span></span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">priority_queue</span><span class="params">(<span class="keyword">const</span> Compare&amp; x)</span> :  c(), comp(x) &#123;</span>&#125;<span class="comment">// 设置伪函数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STL_MEMBER_TEMPLATES</span></span><br><span class="line">    <span class="comment">// 接受以迭代器类型的参数</span></span><br><span class="line">    <span class="comment">// 接受两个迭代器以及函数. 传入的迭代器范围内表示的元素以comp定义的方式进行调整</span></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>&gt;</span></span><br><span class="line">  <span class="built_in">priority_queue</span>(InputIterator first, InputIterator last, <span class="keyword">const</span> Compare&amp; x)</span><br><span class="line">    : <span class="built_in">c</span>(first, last), <span class="built_in">comp</span>(x) &#123; <span class="built_in">make_heap</span>(c.<span class="built_in">begin</span>(), c.<span class="built_in">end</span>(), comp); &#125;</span><br><span class="line">    <span class="comment">// 接受两个迭代器. 传入的迭代器范围内表示的元素以标准库默认的优先级进行调整</span></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>&gt;</span></span><br><span class="line">  <span class="built_in">priority_queue</span>(InputIterator first, InputIterator last) </span><br><span class="line">    : <span class="built_in">c</span>(first, last) &#123; <span class="built_in">make_heap</span>(c.<span class="built_in">begin</span>(), c.<span class="built_in">end</span>(), comp); &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* __STL_MEMBER_TEMPLATES */</span></span></span><br><span class="line">     <span class="comment">// 接受两个迭代器以及函数. 传入的迭代器范围内表示的元素以comp定义的方式进行调整</span></span><br><span class="line">  <span class="built_in">priority_queue</span>(<span class="keyword">const</span> value_type* first, <span class="keyword">const</span> value_type* last, </span><br><span class="line">                 <span class="keyword">const</span> Compare&amp; x) : <span class="built_in">c</span>(first, last), <span class="built_in">comp</span>(x) &#123;</span><br><span class="line">    <span class="built_in">make_heap</span>(c.<span class="built_in">begin</span>(), c.<span class="built_in">end</span>(), comp);</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">// 接受两个迭代器. 传入的迭代器范围内表示的元素以标准库默认的优先级进行调整</span></span><br><span class="line">  <span class="built_in">priority_queue</span>(<span class="keyword">const</span> value_type* first, <span class="keyword">const</span> value_type* last) </span><br><span class="line">    : <span class="built_in">c</span>(first, last) &#123; <span class="built_in">make_heap</span>(c.<span class="built_in">begin</span>(), c.<span class="built_in">end</span>(), comp); &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __STL_MEMBER_TEMPLATES */</span></span></span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="属性获取"><a href="#属性获取" class="headerlink" title="属性获取"></a>属性获取</h3><p><code>priority_queue</code> 有三种获取其内部值的方法, 都是封装了 <code>Sequence</code> 的方法和 <code>heap</code> 中的函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">priority_queue</span> &#123;</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> c.<span class="built_in">empty</span>(); &#125;</span><br><span class="line">  <span class="function">size_type <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> c.<span class="built_in">size</span>(); &#125;</span><br><span class="line">  <span class="function">const_reference <span class="title">top</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> c.<span class="built_in">front</span>(); &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="push和pop实现"><a href="#push和pop实现" class="headerlink" title="push和pop实现"></a>push和pop实现</h3><p><strong>push</strong> 和 <strong>pop</strong> 具体都是采用的<code>heap</code>算法.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">priority_queue</span> &#123;</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> value_type&amp; x)</span> </span>&#123;</span><br><span class="line">    __STL_TRY &#123;</span><br><span class="line">      c.<span class="built_in">push_back</span>(x); </span><br><span class="line">        <span class="comment">// 间接使用heap算法</span></span><br><span class="line">      <span class="built_in">push_heap</span>(c.<span class="built_in">begin</span>(), c.<span class="built_in">end</span>(), comp);</span><br><span class="line">    &#125;</span><br><span class="line">    __STL_UNWIND(c.<span class="built_in">clear</span>());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    __STL_TRY &#123;</span><br><span class="line">     <span class="comment">// 间接使用heap算法</span></span><br><span class="line">      <span class="built_in">pop_heap</span>(c.<span class="built_in">begin</span>(), c.<span class="built_in">end</span>(), comp);</span><br><span class="line">      c.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    __STL_UNWIND(c.<span class="built_in">clear</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>priority_queue</code> 本身实现是很复杂的, 但是其内部都是封装了 <code>Sequence</code>, <code>heap </code>, 就比较简单明了, 就是将 <code>Sequence</code> 作为容器,  <code>heap</code> 作为算法来操作的配置器, 这也体现了STL的灵活性是很高的, 通过各个容器与算法的结合就能做出另一种功能的结构.</p>]]></content>
      
      
      <categories>
          
          <category> STL 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>heap 源码分析</title>
      <link href="/STL-%E6%BA%90%E7%A0%81/heap/"/>
      <url>/STL-%E6%BA%90%E7%A0%81/heap/</url>
      
        <content type="html"><![CDATA[<h1 id="STL-中的-heap"><a href="#STL-中的-heap" class="headerlink" title="STL 中的 heap"></a>STL 中的 heap</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>源码来自 <code>SIGSTL3.0</code></p><p>在看之前默认你已经拥有了关于 <strong>堆, 大小根堆, 堆排序</strong> 等前置知识. <strong>heap</strong> 严格来说并不属于容器, 它只是实现关于对操作的一些模板函数, 故没有迭代器和遍历等操作</p><h2 id="heap-作用描述"><a href="#heap-作用描述" class="headerlink" title="heap 作用描述"></a>heap 作用描述</h2><ul><li><p>将一段序列转换为满足堆的性质(大根堆或者小根堆)</p></li><li><p>进行堆排序</p></li><li><p>向上维护堆的性质</p></li><li><p>取出堆顶元素</p></li></ul><h2 id="heap-分析"><a href="#heap-分析" class="headerlink" title="heap 分析"></a>heap 分析</h2><h3 id="push-插入元素"><a href="#push-插入元素" class="headerlink" title="push 插入元素"></a><strong>push</strong> 插入元素</h3><p>插入函数为 <code>push_heap</code> 由于堆排序是不稳定的以及可能需要交换两个不连续位置的值 所以 <code>heap</code> 只接受 <code>RandomAccessIterator</code> 类型的迭代器</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">RandomAccessIterator</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_heap</span><span class="params">(RandomAccessIterator first, RandomAccessIterator last)</span> </span>&#123;</span><br><span class="line">  __push_heap_aux(first, last, <span class="built_in">distance_type</span>(first), <span class="built_in">value_type</span>(first));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">RandomAccessIterator</span>, <span class="keyword">class</span> <span class="title">Distance</span>, <span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> __push_heap_aux(RandomAccessIterator first, RandomAccessIterator last, Distance*, T*) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 这里传入的是两个迭代器的长度, 0, 还有最后一个数据</span></span><br><span class="line">  __push_heap(first, <span class="built_in">Distance</span>((last - first) - <span class="number">1</span>), <span class="built_in">Distance</span>(<span class="number">0</span>),  <span class="built_in">T</span>(*(last - <span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到 <code>push_heap</code> 作为接口函数调用了 <code>__push_heap_aux</code>  而它又作为接口函数封装了<code>__push_heap</code> 不难发现 <code>__push_heap</code> 就是 <code>push</code> 操作的核心代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">RandomAccessIterator</span>, <span class="keyword">class</span> <span class="title">Distance</span>, <span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> __push_heap(RandomAccessIterator first, Distance holeIndex,Distance topIndex, T value) </span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//取得要调整的叶子节点的上级节点</span></span><br><span class="line">  Distance parent = (holeIndex - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 这里判断的是当前没有达到堆顶并且传入的值大于根节点的值, 那就将根节点下移</span></span><br><span class="line">  <span class="keyword">while</span> (holeIndex &gt; topIndex &amp;&amp; *(first + parent) &lt; value) &#123;</span><br><span class="line">      <span class="comment">// 将根节点下移</span></span><br><span class="line">    *(first + holeIndex) = *(first + parent);</span><br><span class="line">    holeIndex = parent;</span><br><span class="line">    parent = (holeIndex - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">  &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将数组插入到合适的位置, 可能是根也可能是叶</span></span><br><span class="line">  *(first + holeIndex) = value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>这里的插入和一般上看到的入堆是有一些出入的, 我更倾向于把它看作一种自底向上的堆调整方式. </p></li><li><p><code>holeIndex</code> 作为的是要新数字的叶子节点位置 它可以是任意一个叶子节点, 正如它的名字一样 <strong>空洞下标</strong>  所以对于 <code>__push_heap</code> 函数要做的就是待这个空出的叶子节点的值确定之后 向上调整维护堆的性质即可, 但是在 <code>__push_heap_aux</code> 封装的过程中, 参数默认为<strong>该段序列的最后一个位置</strong>, 对应到满二叉树上即为<strong>最后一个叶子节点</strong> </p><p>这里可以对照下面的图理解一下</p><p><a href="https://imgtu.com/i/Hy8b3q"><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://s4.ax1x.com/2022/02/14/Hy8b3q.png" alt="Hy8b3q.png"></a></p><p>  当然也可以令其他叶子节点为空然后向上维护堆的性质 如下图</p><p><a href="https://imgtu.com/i/Hy8qg0"><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://s4.ax1x.com/2022/02/14/Hy8qg0.png" alt="Hy8qg0.png"></a></p><p>所以 <code>__push_heap</code> 函数的本质就是在一个固定大小的堆里维护某一个叶子节点到堆顶节点的链去保证整个堆的性质</p></li></ul><h3 id="pop-弹出元素"><a href="#pop-弹出元素" class="headerlink" title="pop 弹出元素"></a>pop 弹出元素</h3><p><code>pop</code> 操作用于弹出堆顶元素 并继续维护其余元素满足堆的性质 但是 <code>pop</code> 操作并没有真正意义上把元素删除掉，而是将顶部元素覆盖掉, 将多出的 <strong>(按照弹出前后逻辑上的元素数量比较)</strong> 放置在最后并不指向该元素 <code>pop</code> 的实现有两种, 一种是按照标准库默认的优先级判断实现, 另一种则是按照用户自己传入的 <strong>仿函数</strong>中自定义的判断标准, 判断优先级. 这里将两种实现都列举出来, 但只会以第一种方式作为例子进行分析.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">RandomAccessIterator</span>, <span class="keyword">class</span> <span class="title">Compare</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pop_heap</span><span class="params">(RandomAccessIterator first, RandomAccessIterator last,</span></span></span><br><span class="line"><span class="params"><span class="function">                     Compare comp)</span> </span>&#123;</span><br><span class="line">    __pop_heap_aux(first, last, <span class="built_in">value_type</span>(first), comp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">RandomAccessIterator</span>, <span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Compare</span>&gt;</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> __pop_heap_aux(RandomAccessIterator first, </span><br><span class="line">                  RandomAccessIterator last, T*, Compare comp) &#123;</span><br><span class="line">  __pop_heap(first, last - <span class="number">1</span>, last - <span class="number">1</span>, <span class="built_in">T</span>(*(last - <span class="number">1</span>)), comp,</span><br><span class="line">             <span class="built_in">distance_type</span>(first));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">RandomAccessIterator</span>, <span class="keyword">class</span> <span class="title">T</span>, </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Compare</span>, <span class="keyword">class</span> <span class="title">Distance</span>&gt;</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> __pop_heap(RandomAccessIterator first,    RandomAccessIterator last,</span><br><span class="line">                       RandomAccessIterator result, T value, </span><br><span class="line">                       Compare comp, Distance*) &#123;</span><br><span class="line">  *result = *first;</span><br><span class="line">  __adjust_heap(first, <span class="built_in">Distance</span>(<span class="number">0</span>), <span class="built_in">Distance</span>(last - first), </span><br><span class="line">                value, comp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">RandomAccessIterator</span>, <span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Distance</span>&gt;</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> __pop_heap(RandomAccessIterator first,             RandomAccessIterator last,</span><br><span class="line">           RandomAccessIterator result, T value, Distance*) &#123;</span><br><span class="line">  *result = *first;<span class="comment">// 因为这里是大根堆, 所以first的值就是最大值, 先将最大值保存.</span></span><br><span class="line">  __adjust_heap(first, <span class="built_in">Distance</span>(<span class="number">0</span>), <span class="built_in">Distance</span>(last - first), value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>依旧可以看出 <code>pop</code> 操作是在 <code>__pop_heap</code> 函数上进行了两次封装. 故只需要去分析 <code>__pop_heap</code> 函数即可</li></ul><p>这里重点分析第一个种形式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">RandomAccessIterator</span>, <span class="keyword">class</span> <span class="title">Distance</span>, <span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> __adjust_heap(RandomAccessIterator first, Distance holeIndex, Distance len, T value) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// holeIndex传入的是0</span></span><br><span class="line">  Distance topIndex = holeIndex;</span><br><span class="line">    <span class="comment">// secondChild是右孩子的一个节点</span></span><br><span class="line">  Distance secondChild = <span class="number">2</span> * holeIndex + <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">while</span> (secondChild &lt; len) &#123;</span><br><span class="line">      <span class="comment">// 比较左右节点, 根节点较下就将根节点下移, 比较大的节点上移</span></span><br><span class="line">    <span class="keyword">if</span> (*(first + secondChild) &lt; *(first + (secondChild - <span class="number">1</span>)))</span><br><span class="line">      secondChild--;</span><br><span class="line">    *(first + holeIndex) = *(first + secondChild);</span><br><span class="line">    holeIndex = secondChild;</span><br><span class="line">      <span class="comment">// 下一个左右节点</span></span><br><span class="line">    secondChild = <span class="number">2</span> * (secondChild + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (secondChild == len) &#123;</span><br><span class="line">      <span class="comment">// 没有右节点就找左节点并且上移</span></span><br><span class="line">    *(first + holeIndex) = *(first + (secondChild - <span class="number">1</span>));</span><br><span class="line">    holeIndex = secondChild - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">// 重新调整堆</span></span><br><span class="line">  __push_heap(first, holeIndex, topIndex, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cmpare版本只将比较修改成用户定义的函数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">RandomAccessIterator</span>, <span class="keyword">class</span> <span class="title">Distance</span>, <span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Compare</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> __adjust_heap(RandomAccessIterator first, Distance holeIndex,</span><br><span class="line">                   Distance len, T value, Compare comp) &#123;</span><br><span class="line">  Distance topIndex = holeIndex;</span><br><span class="line">  Distance secondChild = <span class="number">2</span> * holeIndex + <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">while</span> (secondChild &lt; len) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">comp</span>(*(first + secondChild), *(first + (secondChild - <span class="number">1</span>))))</span><br><span class="line">      secondChild--;</span><br><span class="line">    *(first + holeIndex) = *(first + secondChild);</span><br><span class="line">    holeIndex = secondChild;</span><br><span class="line">    secondChild = <span class="number">2</span> * (secondChild + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (secondChild == len) &#123;</span><br><span class="line">    *(first + holeIndex) = *(first + (secondChild - <span class="number">1</span>));</span><br><span class="line">    holeIndex = secondChild - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  __push_heap(first, holeIndex, topIndex, value, comp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>__pop_heap</code> 函数的本质就是在维护堆性质的情况下去把原堆顶进行覆盖, 然后再以覆盖堆顶的某个儿子作为堆顶再重复这个操作, 直到某个叶子节点为空时, 利用 <code>__push_heap</code> 函数将<strong>原来堆的最后一个叶子节点补充进这个空叶子节点并向上维护新的堆</strong> 即可 这时可以发现在堆的最后依旧会留有一个值为操作堆之前的数据, 但是由于弹出了堆顶元素, 所以堆的规模在逻辑上是减小了 1 的, 所以对于最后一个多出的元素无论是什么都是无关紧要的</li></ul><p>上面描述的比较绕, 具体可以看下面的图理解一下</p><ul><li><a href="https://imgtu.com/i/Hy8LvV"><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://s4.ax1x.com/2022/02/14/Hy8LvV.png" alt="Hy8LvV.png"></a>有一种特殊情况即为当空洞到达最后一个叶子节点的父节点时, 由于不能比较左右儿子的大小去选择使哪个节点为空, 所以只能选择左儿子为空</li></ul><p><a href="https://imgtu.com/i/Hy8HCn"><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://s4.ax1x.com/2022/02/14/Hy8HCn.png" alt="Hy8HCn.png"></a></p><p>在调整完毕后, 调用 <code>__push_heap</code> 函数去把最后一个叶子节点的值放入之前被置空的叶子节点后进行调整使剩下的完全二叉树满足堆的性质</p><ul><li><p>结合上面的图可以发现, <strong>除去置空点为根的子树</strong> , 以<strong>置空点左右儿子为根的子树</strong>  均满足堆的性质</p><p>当置空点为叶子节点时, 其余元素依旧构成了堆(由于该节点只是被逻辑置空 所以依旧可以认为当前是一棵完全二叉树)  所以只需要将最后一个叶子节点填入该置空叶子节点并维护其与堆顶的链, 就可以得到一个堆</p></li></ul><p>这时再结合上面的 <code>__push_heap</code> 函数的分析, 其实可以更好的理解它的思想. 从最后插入堆只是前面的 <code>push</code> 的一种情况而已, 而 <code>__push_heap</code> 的设计可以让它不只可以处理入堆操作, 也实现了修改维护堆性质的功能, 从而使用这项功能支持了 <code>pop</code> 操作的实现</p><h3 id="分割线-—————————————————————————"><a href="#分割线-—————————————————————————" class="headerlink" title="分割线 —————————————————————————-"></a>分割线 —————————————————————————-</h3><p>下面的两种操作</p><ul><li>建堆 </li><li>堆排序</li></ul><p>它们的实现与日常中见到的实现就基本没有差异了</p><h3 id="make-heap函数-将数组变为堆存放"><a href="#make-heap函数-将数组变为堆存放" class="headerlink" title="make_heap函数, 将数组变为堆存放."></a>make_heap函数, 将数组变为堆存放.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">RandomAccessIterator</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">make_heap</span><span class="params">(RandomAccessIterator first, RandomAccessIterator last)</span> </span>&#123;</span><br><span class="line">  __make_heap(first, last, <span class="built_in">value_type</span>(first), <span class="built_in">distance_type</span>(first));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">RandomAccessIterator</span>, <span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Distance</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> __make_heap(RandomAccessIterator first, RandomAccessIterator last, T*,</span><br><span class="line">                 Distance*) &#123;</span><br><span class="line">  <span class="keyword">if</span> (last - first &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 计算长度, 并找出中间的根值</span></span><br><span class="line">  Distance len = last - first;</span><br><span class="line">  Distance parent = (len - <span class="number">2</span>)/<span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="comment">// 一个个进行调整, 放到后面</span></span><br><span class="line">    __adjust_heap(first, parent, len, <span class="built_in">T</span>(*(first + parent)));</span><br><span class="line">    <span class="keyword">if</span> (parent == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    parent--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sort-堆排序其实就是每次将第一位数据弹出从而实现排序功能"><a href="#sort-堆排序其实就是每次将第一位数据弹出从而实现排序功能" class="headerlink" title="sort, 堆排序其实就是每次将第一位数据弹出从而实现排序功能."></a>sort, 堆排序其实就是每次将第一位数据弹出从而实现排序功能.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">RandomAccessIterator</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_heap</span><span class="params">(RandomAccessIterator first, RandomAccessIterator last)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (last - first &gt; <span class="number">1</span>) <span class="built_in">pop_heap</span>(first, last--);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">RandomAccessIterator</span>, <span class="keyword">class</span> <span class="title">Compare</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_heap</span><span class="params">(RandomAccessIterator first, RandomAccessIterator last,</span></span></span><br><span class="line"><span class="params"><span class="function">               Compare comp)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (last - first &gt; <span class="number">1</span>) <span class="built_in">pop_heap</span>(first, last--, comp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="heap-总结"><a href="#heap-总结" class="headerlink" title="heap 总结"></a>heap 总结</h3><p><code>heap</code> 没有自己的迭代器, 甚至它都不能被称作一个容器, 我认为比较合适的说法是将支持 <code>RandomAccessIterator</code> 的容器进行堆的操作. <code>heap</code> 中最重要的就是 <code>pop</code> 和 <code>push</code> 的实现</p><p>而且需要注意的是, <code>push</code> 操作在堆的最后进行插入时, 是要容器构建好最后一个位置的空间和值的</p><p><code>push</code> 操作本质还是用于维护插入后堆的性质的</p>]]></content>
      
      
      <categories>
          
          <category> STL 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式-Singleton-Pattern"><a href="#单例模式-Singleton-Pattern" class="headerlink" title="单例模式(Singleton Pattern)"></a>单例模式(Singleton Pattern)</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义:"></a>定义:</h2><p>​    该设计模式属于创建型模式, 其意图是保证一个类仅有一个实例, 并提供一个可以访问它的全局访问点, 保证所有的程序都可以访问该类所提供的唯一 一个实例.</p><p>对于概念的部分, 本文并不过多叙述, 主要还是侧重于代码层面的问题</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p><a href="https://imgtu.com/i/Hywy4O"><img src="https://s1.ax1x.com/2022/05/01/OCJm2n.gif" data-original="https://s4.ax1x.com/2022/02/14/Hywy4O.png" alt="Hywy4O.png"></a></p><h3 id="如果要构建一个单例模式"><a href="#如果要构建一个单例模式" class="headerlink" title="如果要构建一个单例模式:"></a>如果要构建一个单例模式:</h3><ol><li>要使其构造函数私有化, 保证不会在类外被其他程序创建</li><li>使用静态变量或者静态指针定义或指向该唯一对象</li><li>使用一个 public 静态方法来获取该对象</li></ol><h2 id="最简单的懒汉型单例模式"><a href="#最简单的懒汉型单例模式" class="headerlink" title="最简单的懒汉型单例模式"></a>最简单的懒汉型单例模式</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//****数据****</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> Singleton* p;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) <span class="comment">//1</span></span><br><span class="line">            p = <span class="keyword">new</span> <span class="built_in">Singleton</span>(); <span class="comment">//2</span></span><br><span class="line">        <span class="keyword">return</span> p; <span class="comment">//3 </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Singleton</span>() &#123;&#125;;</span><br><span class="line">    ~<span class="built_in">Singleton</span>() &#123; &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​    如果刚开始看起来这种型式的单例模式, 可能会认为这种写法是比较正确的. 事实上, 如果在只考虑单线程的情况下, 这种代码模式是正确的, 可是当在多线程的环境下, 当线程 Ⅰ 进入步骤 1 但是还没有执行步骤 2 时, 时间片耗尽, 此时 p 依旧是一个 <code>nullptr</code>  此时当线程 Ⅱ 在步骤 1 时发现, p 为空指针, 所以它也会进入步骤 2, 这就导致了该对象被多次创建, 这就违反了单例模式的设计原则,  并且会导致第一次创建对象的地址丢失, 导致内存泄漏, 于是考虑出加锁的形式来限制</p><h2 id="线程安全模式"><a href="#线程安全模式" class="headerlink" title="线程安全模式"></a>线程安全模式</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线程安全版本，但锁的代价过高</span></span><br><span class="line"><span class="function">Singleton* <span class="title">Singleton::getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Lock lock;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        p = <span class="keyword">new</span> <span class="built_in">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双检查锁机制"><a href="#双检查锁机制" class="headerlink" title="双检查锁机制"></a>双检查锁机制</h2><p>这个版本是线程安全的, 但是对于单例模式, 读操作是可以同时发生的, 只有写操作是需要保证只有一次操作的, 但是这个版本的代码则无论是否是读操作或是写操作, 都要进行加锁, 这样就导致了加锁的性能消耗过大</p><p>所以对于根据读写操作进行加锁的思想, 引出了 <strong>双检查锁机制</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//双检查锁，但由于内存读写reorder不安全</span></span><br><span class="line"><span class="function">Singleton* <span class="title">Singleton::getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        Lock lock;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) &#123; </span><br><span class="line">            p = <span class="keyword">new</span> <span class="built_in">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是对于双检查锁机制,  可能会有这样的疑问, 既然已经检查过 p 是否为空了, 为什么还要检查一次呢? 不妨模拟一下多线程环境下对于这段代码的访问顺序, 不难发现, 虽然在 p 为空时进行了加锁, 但是依旧可以有多个线程同时进入第 4 行, 既然进入了第 4 行, 如果不再进行检查, 即使加锁, 不同的线程也会在拿到锁之后执行完第一个 <code>if(p==nullptr)</code> 中的代码, 依旧会出现该对象被多次创建的问题, 所以双检查锁机制是必要的</p><h2 id="C-11版本之后的跨平台实现-volatile"><a href="#C-11版本之后的跨平台实现-volatile" class="headerlink" title="C++ 11版本之后的跨平台实现 (volatile)"></a>C++ 11版本之后的跨平台实现 (volatile)</h2><p>在使用了双检查锁机制后, 对于单例模式的实现似乎就已经无懈可击了, 不过在后来的使用中, 这种实现则被发现并不是绝对正确的. 问题的来源来自于编译器的优化方式, 对于不同版本的编译器, 其在底层创建对象的时候, 可能并不是先构造对象内存空间, 然后调用构造函数, 而是可能以某一种顺序执行, 这就带来了问题.</p><p>由于构造对象的过程并不是原子操作, 所以当线程第一次创建对象时, 时间片耗尽, 另一线程要去获取该对象, 由于此时 p 已经不为空, 则将会把一个没有进行初始化的对象返回, 从而导致错误, 为了解决这个问题,  <strong>c++ 11</strong> 中采用了原子操作的方式</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C++ 11版本之后的跨平台实现 (volatile)</span></span><br><span class="line">std::atomic&lt;Singleton*&gt; Singleton::m_instance;</span><br><span class="line">std::mutex Singleton::m_mutex;</span><br><span class="line"></span><br><span class="line"><span class="function">Singleton* <span class="title">Singleton::getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Singleton* tmp = m_instance.<span class="built_in">load</span>(std::memory_order_relaxed);</span><br><span class="line">    std::<span class="built_in">atomic_thread_fence</span>(std::memory_order_acquire);<span class="comment">//获取内存fence</span></span><br><span class="line">    <span class="keyword">if</span> (tmp == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(m_mutex)</span></span>;</span><br><span class="line">        tmp = m_instance.<span class="built_in">load</span>(std::memory_order_relaxed);</span><br><span class="line">        <span class="keyword">if</span> (tmp == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            tmp = <span class="keyword">new</span> Singleton;</span><br><span class="line">            std::<span class="built_in">atomic_thread_fence</span>(std::memory_order_release);<span class="comment">//释放内存fence</span></span><br><span class="line">            m_instance.<span class="built_in">store</span>(tmp, std::memory_order_relaxed);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的方式实现又太过复杂, 由于 <strong>c++11</strong> 之后在创建对象时强制将其设置为原子操作, 故直接使用下面的简略写法即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Singleton <span class="title">Singleton::getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Singleton singleton;</span><br><span class="line">    <span class="keyword">return</span> singleton;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vector 源码分析</title>
      <link href="/STL-%E6%BA%90%E7%A0%81/vector/"/>
      <url>/STL-%E6%BA%90%E7%A0%81/vector/</url>
      
        <content type="html"><![CDATA[<h1 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h1><p><code>vector</code> 是 <strong>STL</strong> 实现的一个动态数组类本文只是分析 <code>vector</code> 的结构以及一些重要的设计方法, 对于一些没有那么重要的方法或者函数将一笔掠过, 如果想仔细了解, 请自行阅读源码</p><p><code>vector</code> 的内容主要定义在 <code>stl_vector.h</code> 中, 该文件只是定义了 <code>vector</code> 对象以及相应类方法, 而且由于不直接透露 <code>vector</code> 的实现, 对其进行了一次封装, 将 <code>stl_vector.h</code> 与它所需要的头文件组合成<code>vector.h</code>, 直接使用 <code>stl_vector.h</code> 会缺少 <code>vector</code> 所依赖的函数或者方法的定义以及实现</p><h2 id="定义部分"><a href="#定义部分" class="headerlink" title="定义部分"></a>定义部分</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">vector</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">typedef</span> T value_type; </span><br><span class="line">  <span class="keyword">typedef</span> value_type* pointer; </span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">const</span> value_type* const_pointer;</span><br><span class="line">  <span class="keyword">typedef</span> value_type* iterator;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">const</span> value_type* const_iterator;</span><br><span class="line">  <span class="keyword">typedef</span> value_type&amp; reference;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">const</span> value_type&amp; const_reference;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">size_t</span> size_type;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span> difference_type;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STL_CLASS_PARTIAL_SPECIALIZATION</span></span><br><span class="line">  <span class="keyword">typedef</span> reverse_iterator&lt;const_iterator&gt; const_reverse_iterator;</span><br><span class="line">  <span class="keyword">typedef</span> reverse_iterator&lt;iterator&gt; reverse_iterator;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* __STL_CLASS_PARTIAL_SPECIALIZATION */</span></span></span><br><span class="line">  <span class="keyword">typedef</span> reverse_iterator&lt;const_iterator, value_type, const_reference, </span><br><span class="line">                           difference_type&gt;  const_reverse_iterator;</span><br><span class="line">  <span class="keyword">typedef</span> reverse_iterator&lt;iterator, value_type, reference, difference_type&gt;</span><br><span class="line">          reverse_iterator;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __STL_CLASS_PARTIAL_SPECIALIZATION */</span></span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  <span class="keyword">typedef</span> simple_alloc&lt;value_type, Alloc&gt; data_allocator;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> reverse_iterator&lt;const_iterator&gt; const_reverse_iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> simple_alloc&lt;value_type, Alloc&gt; data_allocator;</span><br></pre></td></tr></table></figure><ul><li><p>  <code>reverse_iterator</code> 为反向迭代器, 即 移动方向与正向迭代器相反</p></li><li><p>  <code>simple_alloc&lt;value_type, Alloc&gt; </code>  进行对象内存的构造以及释放</p></li><li><p>  在 <code>SGI_2.91</code> 中 <code>vector</code> 的迭代器就是原始的指针</p></li></ul><h2 id="vector-对象"><a href="#vector-对象" class="headerlink" title="vector 对象"></a><strong>vector</strong> 对象</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iterator start;</span><br><span class="line">iterator finish;</span><br><span class="line">iterator end_of_storage;</span><br></pre></td></tr></table></figure><ul><li><p>  <code>start </code>动态数组的起始地址</p></li><li><p>  <code>finish</code> 最后一个数据的下一个位置</p></li><li><p>  <code>end_of_storage</code> 整个动态数组最大容量位置的后一个位置</p></li><li><p>  可以看出 <code>vector</code> 本身并不是内含一个数组, 而且指向堆中一块内存的指针</p></li></ul><h2 id="获取基本数据"><a href="#获取基本数据" class="headerlink" title="获取基本数据"></a>获取基本数据</h2><h3 id="获取迭代器"><a href="#获取迭代器" class="headerlink" title="获取迭代器"></a>获取迭代器</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">iterator <span class="title">begin</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> start; &#125;</span><br><span class="line">  </span><br><span class="line"><span class="function">const_iterator <span class="title">begin</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> start; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">iterator <span class="title">end</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> finish; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">const_iterator <span class="title">end</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> finish; &#125;</span><br></pre></td></tr></table></figure><h3 id="获取反向迭代器"><a href="#获取反向迭代器" class="headerlink" title="获取反向迭代器"></a>获取反向迭代器</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">reverse_iterator <span class="title">rbegin</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">reverse_iterator</span>(<span class="built_in">end</span>()); &#125;</span><br><span class="line">  </span><br><span class="line"><span class="function">const_reverse_iterator <span class="title">rbegin</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">const_reverse_iterator</span>(<span class="built_in">end</span>()); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function">reverse_iterator <span class="title">rend</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">reverse_iterator</span>(<span class="built_in">begin</span>()); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">const_reverse_iterator <span class="title">rend</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="built_in">const_reverse_iterator</span>(<span class="built_in">begin</span>()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取容器基本信息"><a href="#获取容器基本信息" class="headerlink" title="获取容器基本信息"></a>获取容器基本信息</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//容器大小</span></span><br><span class="line"><span class="function">size_type <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">size_type</span>(<span class="built_in">end</span>() - <span class="built_in">begin</span>()); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//容器最大大小 最多可以记录 size_type(-1) 个字节 / 单个元素大小 </span></span><br><span class="line"><span class="function">size_type <span class="title">max_size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">size_type</span>(<span class="number">-1</span>) / <span class="built_in"><span class="keyword">sizeof</span></span>(T); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当前容器的容量</span></span><br><span class="line"><span class="function">size_type <span class="title">capacity</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">size_type</span>(end_of_storage - <span class="built_in">begin</span>()); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//容器是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">begin</span>() == <span class="built_in">end</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个元素</span></span><br><span class="line"><span class="function">reference <span class="title">front</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> *<span class="built_in">begin</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">const_reference <span class="title">front</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> *<span class="built_in">begin</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后一个元素</span></span><br><span class="line"><span class="function">reference <span class="title">back</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> *(<span class="built_in">end</span>() - <span class="number">1</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">const_reference <span class="title">back</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> *(<span class="built_in">end</span>() - <span class="number">1</span>); &#125;</span><br></pre></td></tr></table></figure><h2 id="vector-构造方法"><a href="#vector-构造方法" class="headerlink" title="vector 构造方法"></a>vector 构造方法</h2><h3 id="无参构造"><a href="#无参构造" class="headerlink" title="无参构造"></a>无参构造</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>() : <span class="built_in">start</span>(<span class="number">0</span>), <span class="built_in">finish</span>(<span class="number">0</span>), <span class="built_in">end_of_storage</span>(<span class="number">0</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><p>这里可以看出 <code>vector</code> 并没有预留出容量,  而是默认容量为空</p><p>下面这些构造方法都是调用了 <code>fill_initialize</code> 方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将容器初始化为长度为 n 且值均为 value </span></span><br><span class="line"><span class="built_in">vector</span>(size_type n, <span class="keyword">const</span> T&amp; value) &#123; <span class="built_in">fill_initialize</span>(n, value); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上面方法的 int 型重载</span></span><br><span class="line"><span class="built_in">vector</span>(<span class="keyword">int</span> n, <span class="keyword">const</span> T&amp; value) &#123; <span class="built_in">fill_initialize</span>(n, value); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上面方法的 long 型重载</span></span><br><span class="line"><span class="built_in">vector</span>(<span class="keyword">long</span> n, <span class="keyword">const</span> T&amp; value) &#123; <span class="built_in">fill_initialize</span>(n, value); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造长度为 n 且所有元素值均为该类型默认构造值, 而且要求在创建对象的时候显示调用该构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">vector</span><span class="params">(size_type n)</span> </span>&#123; <span class="built_in">fill_initialize</span>(n, <span class="built_in">T</span>()); &#125;</span><br></pre></td></tr></table></figure><p>上面的有参构造全部都调用了 <code>fill_initialize</code> 的辅助方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fill_initialize</span><span class="params">(size_type n, <span class="keyword">const</span> T&amp; value)</span> </span>&#123;</span><br><span class="line">start = <span class="built_in">allocate_and_fill</span>(n, value);</span><br><span class="line">finish = start + n;</span><br><span class="line">end_of_storage = finish;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法首先使用内存分配函数 <code>allocate_and_fill</code> 建立了一块长度为 $n$ 且值为 $value$ 的空间, 并将其赋值给 $start$ , $finish$ 为最后一个元素的下一个位置,  <code>end_of_storage</code> 此时为 $n$ 该容器被初始化为容量为 $n$ 且拥有 $n$ 个值为 $value$  的元素</p><h3 id="拷贝构造方法"><a href="#拷贝构造方法" class="headerlink" title="拷贝构造方法"></a>拷贝构造方法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>(<span class="keyword">const</span> vector&lt;T, Alloc&gt;&amp; x) &#123;</span><br><span class="line">    start = <span class="built_in">allocate_and_copy</span>(x.<span class="built_in">end</span>() - x.<span class="built_in">begin</span>(), x.<span class="built_in">begin</span>(), x.<span class="built_in">end</span>());</span><br><span class="line">    finish = start + (x.<span class="built_in">end</span>() - x.<span class="built_in">begin</span>());</span><br><span class="line">    end_of_storage = finish;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>  其本质就是调用 <code>allocate_and_copy</code> 函数来将要被拷贝的 <code>vector</code> 内元素赋值给当前创建的对象, 但是只是接收了被拷贝对象的元素值, <strong>并没有拷贝被拷贝对象的容量(仔细观察一下)</strong></li></ul><h3 id="接受一个范围来进行初始化的构造方法"><a href="#接受一个范围来进行初始化的构造方法" class="headerlink" title="接受一个范围来进行初始化的构造方法"></a>接受一个范围来进行初始化的构造方法</h3><p>如果定义允许使用类成员模板, 那么该构造方法就为接受一个输入型迭代器所表示的范围进行初始化, 代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>&gt;</span></span><br><span class="line"><span class="built_in">vector</span>(InputIterator first, InputIterator last) :</span><br><span class="line">    <span class="built_in">start</span>(<span class="number">0</span>), <span class="built_in">finish</span>(<span class="number">0</span>), <span class="built_in">end_of_storage</span>(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">range_initialize</span>(first, last, <span class="built_in">iterator_category</span>(first));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里调用了 <code>range_initialize</code> 函数来进行范围的初始化 第三个参数表示将会根据迭代种类来实例化合适的范围初始化函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">range_initialize</span><span class="params">(InputIterator first, InputIterator last,</span></span></span><br><span class="line"><span class="params"><span class="function">                    input_iterator_tag)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> ( ; first != last; ++first)</span><br><span class="line">        <span class="comment">//这个方法暂且不表 后文会提到</span></span><br><span class="line">  <span class="built_in">push_back</span>(*first);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">range_initialize</span><span class="params">(ForwardIterator first, ForwardIterator last,</span></span></span><br><span class="line"><span class="params"><span class="function">                        forward_iterator_tag)</span> </span>&#123;</span><br><span class="line">    size_type n = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">distance</span>(first, last, n);</span><br><span class="line">    start = <span class="built_in">allocate_and_copy</span>(n, first, last);</span><br><span class="line">    finish = start + n;</span><br><span class="line">    end_of_storage = finish;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>  如果是 <code>InputIterator</code> 类型迭代器, 那么只能采用一次向前移动一个单位</p></li><li><p>  如果是 <code>ForwardIterator</code> 类型迭代器, 那么就可以采取范围拷贝的方式来进行范围初始化</p></li></ul><p>如果当前不允许使用类成员模板, 那么构造方法就为接受当前 <code>vector </code> 的迭代器表示的范围进行初始化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>(const_iterator first, const_iterator last) &#123;</span><br><span class="line">    size_type n = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 这里没有直接计算迭代器距离, 而是调用了 distance 因为不是所有迭代器都可以直接做减法来计算距离</span></span><br><span class="line">    <span class="built_in">distance</span>(first, last, n);</span><br><span class="line">    start = <span class="built_in">allocate_and_copy</span>(n, first, last);</span><br><span class="line">    finish = start + n;</span><br><span class="line">    end_of_storage = finish;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="析构方法"><a href="#析构方法" class="headerlink" title="析构方法"></a>析构方法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~<span class="built_in">vector</span>() &#123; </span><br><span class="line">    <span class="built_in">destroy</span>(start, finish);</span><br><span class="line">    <span class="built_in">deallocate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>  没什么特别, 内部调用了内存管理的函数来对内存进行释放 相对没有那么重要</li></ul><h2 id="reserve-方法-重新设定容器大小"><a href="#reserve-方法-重新设定容器大小" class="headerlink" title="reserve 方法(重新设定容器大小)"></a>reserve 方法(重新设定容器大小)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reserve</span><span class="params">(size_type n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">capacity</span>() &lt; n) &#123;</span><br><span class="line">        <span class="keyword">const</span> size_type old_size = <span class="built_in">size</span>();</span><br><span class="line">        iterator tmp = <span class="built_in">allocate_and_copy</span>(n, start, finish);</span><br><span class="line">        <span class="built_in">destroy</span>(start, finish);</span><br><span class="line">        <span class="built_in">deallocate</span>();</span><br><span class="line">        start = tmp;</span><br><span class="line">        finish = tmp + old_size;</span><br><span class="line">        end_of_storage = start + n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>  该方法仅在要求重新设定的容器大小大于当前容器的最大容量时才会生效, 本质就是将重新开辟一块空间为 $n$ 的空间并将元素复制进去, 同时释放原来指向的空间, 并更新容器内所维护的数组块内存信息</li></ul><h2 id="交换方法-swap"><a href="#交换方法-swap" class="headerlink" title="交换方法 swap()"></a>交换方法 swap()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(vector&lt;T, Alloc&gt;&amp; x)</span> </span>&#123;</span><br><span class="line">    __STD::<span class="built_in">swap</span>(start, x.start);</span><br><span class="line">    __STD::<span class="built_in">swap</span>(finish, x.finish);</span><br><span class="line">    __STD::<span class="built_in">swap</span>(end_of_storage, x.end_of_storage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>  vector 没有选择交换内存空间的数据, 而是选择了交换维护元素空间的信息,  提高了效率</li></ul><h2 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h2><p>该部分分为 <strong>插入数据</strong> 和 <strong>删除数据</strong> 两方面来进行剖析</p><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>首先先介绍进行辅助插入数据的函数, 或者说 <code>vector</code> 提供的 <code>public</code> 的插入数据方式都是以这些函数为底层实现</p><h4 id="insert-aux-iterator-position-const-T-amp-x"><a href="#insert-aux-iterator-position-const-T-amp-x" class="headerlink" title="insert_aux(iterator position, const T&amp; x);"></a>insert_aux(iterator position, const T&amp; x);</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> vector&lt;T, Alloc&gt;::<span class="built_in">insert_aux</span>(iterator position, <span class="keyword">const</span> T&amp; x) &#123;</span><br><span class="line">  <span class="keyword">if</span> (finish != end_of_storage) &#123;</span><br><span class="line">    <span class="built_in">construct</span>(finish, *(finish - <span class="number">1</span>));</span><br><span class="line">    ++finish;</span><br><span class="line">    T x_copy = x;</span><br><span class="line">    <span class="built_in">copy_backward</span>(position, finish - <span class="number">2</span>, finish - <span class="number">1</span>);</span><br><span class="line">    *position = x_copy;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> size_type old_size = <span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">const</span> size_type len = old_size != <span class="number">0</span> ? <span class="number">2</span> * old_size : <span class="number">1</span>;</span><br><span class="line">    iterator new_start = data_allocator::<span class="built_in">allocate</span>(len);</span><br><span class="line">    iterator new_finish = new_start;</span><br><span class="line">    __STL_TRY &#123;</span><br><span class="line">      new_finish = <span class="built_in">uninitialized_copy</span>(start, position, new_start);</span><br><span class="line">      <span class="built_in">construct</span>(new_finish, x);</span><br><span class="line">      ++new_finish;</span><br><span class="line">      new_finish = <span class="built_in">uninitialized_copy</span>(position, finish, new_finish);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#       <span class="meta-keyword">ifdef</span>  __STL_USE_EXCEPTIONS </span></span><br><span class="line">    <span class="built_in"><span class="keyword">catch</span></span>(...) &#123;</span><br><span class="line">      <span class="built_in">destroy</span>(new_start, new_finish); </span><br><span class="line">      data_allocator::<span class="built_in">deallocate</span>(new_start, len);</span><br><span class="line">      <span class="keyword">throw</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#       <span class="meta-keyword">endif</span> <span class="comment">/* __STL_USE_EXCEPTIONS */</span></span></span><br><span class="line">    <span class="built_in">destroy</span>(<span class="built_in">begin</span>(), <span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">deallocate</span>();</span><br><span class="line">    start = new_start;</span><br><span class="line">    finish = new_finish;</span><br><span class="line">    end_of_storage = new_start + len;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数为要插入的迭代器的位置, 以及要插入的值.   插入要分两种情况</p><ul><li><p>  如果没有到达了容器的最大容量, 如果没有就将最后一个元素向后移动一个位置, 再将 <strong>position</strong> 到原来最后一个元素的前一个元素向后复制一个位置, 这样就在 <strong>position</strong>, 位置置空, 此时再插入要插入的元素即可</p></li><li><p>  如果到达了容器的最大容量, 那么就要开辟一块容量大小为当前最大容量两倍的空间作为容器将要管理的空间, 并将 <strong>begin 到position - 1</strong> 位置的元素复制到新的位置, 同时在 <strong>position</strong> 位置插入要插入的元素, 再将剩下的元素复制进新的容器内, 并将原容器的内存释放</p></li><li><p>  可以发现, <strong>vecotr</strong> 在扩容时会预留比原来最大容量多一倍的容量以应对之后的元素加入</p></li></ul><h4 id="push-back"><a href="#push-back" class="headerlink" title="push_back"></a>push_back</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">(<span class="keyword">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (finish != end_of_storage) &#123;</span><br><span class="line">        <span class="built_in">construct</span>(finish, x);</span><br><span class="line">        ++finish;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">insert_aux</span>(<span class="built_in">end</span>(), x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">iterator <span class="title">insert</span><span class="params">(iterator position, <span class="keyword">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">    size_type n = position - <span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">if</span> (finish != end_of_storage &amp;&amp; position == <span class="built_in">end</span>()) &#123;</span><br><span class="line">        <span class="built_in">construct</span>(finish, x);</span><br><span class="line">        ++finish;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">insert_aux</span>(position, x);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">begin</span>() + n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个方法就是以 <strong>insert_aux</strong> 为底层来实现, 来实现在指定位置或者最后位置插入数据</p><h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h4><p>下面的 <strong>insert</strong> 等方法都是将多个元素或者某个范围内的元素插入某个位置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> vector&lt;T, Alloc&gt;::<span class="built_in">insert</span>(iterator position, size_type n, <span class="keyword">const</span> T&amp; x) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">size_type</span>(end_of_storage - finish) &gt;= n) &#123;</span><br><span class="line">      T x_copy = x;</span><br><span class="line">      <span class="keyword">const</span> size_type elems_after = finish - position;</span><br><span class="line">      iterator old_finish = finish;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 如果 pos 到 finish 的元素数量 &gt; n 那么就可以直接通过移动来空出 n 个元素的位置</span></span><br><span class="line"><span class="comment">       * 否则就先再最后补出 n - elems_after 个元素, 然后将要移动的元素移动补出元素的 end() </span></span><br><span class="line"><span class="comment">       * 的最后位置, 这样即空出了 n 个元素的位置</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">if</span> (elems_after &gt; n) &#123;</span><br><span class="line">        <span class="built_in">uninitialized_copy</span>(finish - n, finish, finish);</span><br><span class="line">        finish += n;</span><br><span class="line">        <span class="built_in">copy_backward</span>(position, old_finish - n, old_finish);</span><br><span class="line">        <span class="built_in">fill</span>(position, position + n, x_copy);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">uninitialized_fill_n</span>(finish, n - elems_after, x_copy);</span><br><span class="line">        finish += n - elems_after;</span><br><span class="line">        <span class="built_in">uninitialized_copy</span>(position, old_finish, finish);</span><br><span class="line">        finish += elems_after;</span><br><span class="line">        <span class="built_in">fill</span>(position, old_finish, x_copy);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> size_type old_size = <span class="built_in">size</span>();        </span><br><span class="line">      <span class="keyword">const</span> size_type len = old_size + <span class="built_in">max</span>(old_size, n);</span><br><span class="line">      iterator new_start = data_allocator::<span class="built_in">allocate</span>(len);</span><br><span class="line">      iterator new_finish = new_start;</span><br><span class="line">      __STL_TRY &#123;</span><br><span class="line">        new_finish = <span class="built_in">uninitialized_copy</span>(start, position, new_start);</span><br><span class="line">        new_finish = <span class="built_in">uninitialized_fill_n</span>(new_finish, n, x);</span><br><span class="line">        new_finish = <span class="built_in">uninitialized_copy</span>(position, finish, new_finish);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="meta">#         <span class="meta-keyword">ifdef</span>  __STL_USE_EXCEPTIONS </span></span><br><span class="line">      <span class="built_in"><span class="keyword">catch</span></span>(...) &#123;</span><br><span class="line">        <span class="built_in">destroy</span>(new_start, new_finish);</span><br><span class="line">        data_allocator::<span class="built_in">deallocate</span>(new_start, len);</span><br><span class="line">        <span class="keyword">throw</span>;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="meta">#         <span class="meta-keyword">endif</span> <span class="comment">/* __STL_USE_EXCEPTIONS */</span></span></span><br><span class="line">      <span class="built_in">destroy</span>(start, finish);</span><br><span class="line">      <span class="built_in">deallocate</span>();</span><br><span class="line">      start = new_start;</span><br><span class="line">      finish = new_finish;</span><br><span class="line">      end_of_storage = new_start + len;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理其实与 <strong>insert_aux</strong> 类似, 都是先检查剩余空间够不够插入要求插入的元素数量, 如果足够就再次考虑需要将多少元素向后移动, 如果剩余空间不足以插入要求插入的元素数量, 那么就将进行扩容, 同时扩容大小是插入数据数量与原容器最大容量的 <strong>max</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上面 insert 方法的重载方法, 都是以调用 insert 方法实现</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span> <span class="params">(iterator pos, <span class="keyword">int</span> n, <span class="keyword">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">insert</span>(pos, (size_type) n, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span> <span class="params">(iterator pos, <span class="keyword">long</span> n, <span class="keyword">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">insert</span>(pos, (size_type) n, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="range-insert"><a href="#range-insert" class="headerlink" title="range_insert"></a>range_insert</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span> <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> vector&lt;T, Alloc&gt;::<span class="built_in">range_insert</span>(iterator pos,</span><br><span class="line">                                    InputIterator first, InputIterator last,</span><br><span class="line">                                    input_iterator_tag) &#123;</span><br><span class="line">  <span class="keyword">for</span> ( ; first != last; ++first) &#123;</span><br><span class="line">    pos = <span class="built_in">insert</span>(pos, *first);</span><br><span class="line">    ++pos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法调用了上面的 <strong>insert</strong>  方法来依次将该范围内元素插入 由于是 <strong>InputIterator</strong> 迭代器所以选择的是一次向前移动一步</p><p>该方法还有 <strong>ForwardIterator</strong> 迭代器的重载方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span> <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> vector&lt;T, Alloc&gt;::<span class="built_in">range_insert</span>(iterator position,</span><br><span class="line">                                    ForwardIterator first,</span><br><span class="line">                                    ForwardIterator last,</span><br><span class="line">                                    forward_iterator_tag) &#123;</span><br><span class="line">  <span class="keyword">if</span> (first != last) &#123;</span><br><span class="line">    size_type n = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//比上面的 insert 多了一步通过计算迭代器之间的距离来计算要插入的元素数量</span></span><br><span class="line">    <span class="built_in">distance</span>(first, last, n);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">size_type</span>(end_of_storage - finish) &gt;= n) &#123;</span><br><span class="line">      <span class="keyword">const</span> size_type elems_after = finish - position;</span><br><span class="line">      iterator old_finish = finish;</span><br><span class="line">      <span class="keyword">if</span> (elems_after &gt; n) &#123;</span><br><span class="line">        <span class="built_in">uninitialized_copy</span>(finish - n, finish, finish);</span><br><span class="line">        finish += n;</span><br><span class="line">        <span class="built_in">copy_backward</span>(position, old_finish - n, old_finish);</span><br><span class="line">        <span class="built_in">copy</span>(first, last, position);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        ForwardIterator mid = first;</span><br><span class="line">        <span class="built_in">advance</span>(mid, elems_after);</span><br><span class="line">        <span class="built_in">uninitialized_copy</span>(mid, last, finish);</span><br><span class="line">        finish += n - elems_after;</span><br><span class="line">        <span class="built_in">uninitialized_copy</span>(position, old_finish, finish);</span><br><span class="line">        finish += elems_after;</span><br><span class="line">        <span class="built_in">copy</span>(first, mid, position);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> size_type old_size = <span class="built_in">size</span>();</span><br><span class="line">      <span class="keyword">const</span> size_type len = old_size + <span class="built_in">max</span>(old_size, n);</span><br><span class="line">      iterator new_start = data_allocator::<span class="built_in">allocate</span>(len);</span><br><span class="line">      iterator new_finish = new_start;</span><br><span class="line">      __STL_TRY &#123;</span><br><span class="line">        new_finish = <span class="built_in">uninitialized_copy</span>(start, position, new_start);</span><br><span class="line">        new_finish = <span class="built_in">uninitialized_copy</span>(first, last, new_finish);</span><br><span class="line">        new_finish = <span class="built_in">uninitialized_copy</span>(position, finish, new_finish);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="meta">#         <span class="meta-keyword">ifdef</span> __STL_USE_EXCEPTIONS</span></span><br><span class="line">      <span class="built_in"><span class="keyword">catch</span></span>(...) &#123;</span><br><span class="line">        <span class="built_in">destroy</span>(new_start, new_finish);</span><br><span class="line">        data_allocator::<span class="built_in">deallocate</span>(new_start, len);</span><br><span class="line">        <span class="keyword">throw</span>;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="meta">#         <span class="meta-keyword">endif</span> <span class="comment">/* __STL_USE_EXCEPTIONS */</span></span></span><br><span class="line">      <span class="built_in">destroy</span>(start, finish);</span><br><span class="line">      <span class="built_in">deallocate</span>();</span><br><span class="line">      start = new_start;</span><br><span class="line">      finish = new_finish;</span><br><span class="line">      end_of_storage = new_start + len;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现思想及其原理与多个元素插入方法类似, 这里就不进行赘述</p><p>在禁用类成员模板的情况下, <strong>vector</strong> 也提供了相应的将两个迭代器之间的元素插入当前容器的某个位置的方法</p><p>原理思想与上述无异 此处直接展示代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> vector&lt;T, Alloc&gt;::<span class="built_in">insert</span>(iterator position, </span><br><span class="line">                              const_iterator first, </span><br><span class="line">                              const_iterator last) &#123;</span><br><span class="line">  <span class="keyword">if</span> (first != last) &#123;</span><br><span class="line">    size_type n = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">distance</span>(first, last, n);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">size_type</span>(end_of_storage - finish) &gt;= n) &#123;</span><br><span class="line">      <span class="keyword">const</span> size_type elems_after = finish - position;</span><br><span class="line">      iterator old_finish = finish;</span><br><span class="line">      <span class="keyword">if</span> (elems_after &gt; n) &#123;</span><br><span class="line">        <span class="built_in">uninitialized_copy</span>(finish - n, finish, finish);</span><br><span class="line">        finish += n;</span><br><span class="line">        <span class="built_in">copy_backward</span>(position, old_finish - n, old_finish);</span><br><span class="line">        <span class="built_in">copy</span>(first, last, position);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">uninitialized_copy</span>(first + elems_after, last, finish);</span><br><span class="line">        finish += n - elems_after;</span><br><span class="line">        <span class="built_in">uninitialized_copy</span>(position, old_finish, finish);</span><br><span class="line">        finish += elems_after;</span><br><span class="line">        <span class="built_in">copy</span>(first, first + elems_after, position);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> size_type old_size = <span class="built_in">size</span>();</span><br><span class="line">      <span class="keyword">const</span> size_type len = old_size + <span class="built_in">max</span>(old_size, n);</span><br><span class="line">      iterator new_start = data_allocator::<span class="built_in">allocate</span>(len);</span><br><span class="line">      iterator new_finish = new_start;</span><br><span class="line">      __STL_TRY &#123;</span><br><span class="line">        new_finish = <span class="built_in">uninitialized_copy</span>(start, position, new_start);</span><br><span class="line">        new_finish = <span class="built_in">uninitialized_copy</span>(first, last, new_finish);</span><br><span class="line">        new_finish = <span class="built_in">uninitialized_copy</span>(position, finish, new_finish);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="meta">#         <span class="meta-keyword">ifdef</span> __STL_USE_EXCEPTIONS</span></span><br><span class="line">      <span class="built_in"><span class="keyword">catch</span></span>(...) &#123;</span><br><span class="line">        <span class="built_in">destroy</span>(new_start, new_finish);</span><br><span class="line">        data_allocator::<span class="built_in">deallocate</span>(new_start, len);</span><br><span class="line">        <span class="keyword">throw</span>;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="meta">#         <span class="meta-keyword">endif</span> <span class="comment">/* __STL_USE_EXCEPTIONS */</span></span></span><br><span class="line">      <span class="built_in">destroy</span>(start, finish);</span><br><span class="line">      <span class="built_in">deallocate</span>();</span><br><span class="line">      start = new_start;</span><br><span class="line">      finish = new_finish;</span><br><span class="line">      end_of_storage = new_start + len;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><h4 id="pop-back"><a href="#pop-back" class="headerlink" title="pop_back"></a>pop_back</h4><p>直接选择移动 <strong>end()</strong> 位置向前移动一位并将该位置元素摧毁释放掉</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_back</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    --finish;</span><br><span class="line">    <span class="built_in">destroy</span>(finish);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="erase"><a href="#erase" class="headerlink" title="erase"></a>erase</h4><p>该方法有重载方法, 第一个是删除某个位置元素, 而第二个是删除 <strong>first - last</strong> 范围内的元素, 代码很简单清晰</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">iterator <span class="title">erase</span><span class="params">(iterator position)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (position + <span class="number">1</span> != <span class="built_in">end</span>())</span><br><span class="line">        <span class="built_in">copy</span>(position + <span class="number">1</span>, finish, position);</span><br><span class="line">    --finish;</span><br><span class="line">    <span class="built_in">destroy</span>(finish);</span><br><span class="line">    <span class="keyword">return</span> position;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">iterator <span class="title">erase</span><span class="params">(iterator first, iterator last)</span> </span>&#123;</span><br><span class="line">    iterator i = <span class="built_in">copy</span>(last, finish, first);</span><br><span class="line">    <span class="built_in">destroy</span>(i, finish);</span><br><span class="line">    finish = finish - (last - first);</span><br><span class="line">    <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重新设置容器容量-resize"><a href="#重新设置容器容量-resize" class="headerlink" title="重新设置容器容量 resize()"></a>重新设置容器容量 resize()</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 如果新设置的容量小于当前容量, 那么就删除掉多余元素 反之则在最后插入不足的元素数量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(size_type new_size, <span class="keyword">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (new_size &lt; <span class="built_in">size</span>()) </span><br><span class="line">        <span class="built_in">erase</span>(<span class="built_in">begin</span>() + new_size, <span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">insert</span>(<span class="built_in">end</span>(), new_size - <span class="built_in">size</span>(), x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*可以发现该方法只是上面方法的重载方法, 对于没有指定修改容量后元素值的一律按照默认值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(size_type new_size)</span> </span>&#123; <span class="built_in">resize</span>(new_size, <span class="built_in">T</span>()); &#125;</span><br></pre></td></tr></table></figure><h2 id="重载运算符"><a href="#重载运算符" class="headerlink" title="重载运算符"></a>重载运算符</h2><h3 id="operator"><a href="#operator" class="headerlink" title="operator[]"></a>operator[]</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reference <span class="keyword">operator</span>[](size_type n) &#123; <span class="keyword">return</span> *(<span class="built_in">begin</span>() + n); &#125;</span><br><span class="line">const_reference <span class="keyword">operator</span>[](size_type n) <span class="keyword">const</span> &#123; <span class="keyword">return</span> *(<span class="built_in">begin</span>() + n); &#125;</span><br></pre></td></tr></table></figure><h3 id="operator-1"><a href="#operator-1" class="headerlink" title="operator="></a>operator=</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line">vector&lt;T, Alloc&gt;&amp; vector&lt;T, Alloc&gt;::<span class="keyword">operator</span>=(<span class="keyword">const</span> vector&lt;T, Alloc&gt;&amp; x) &#123;</span><br><span class="line">  <span class="comment">//首先判断是不是自己赋值给自己, 如果是就不需要进行后续操作了</span></span><br><span class="line">  <span class="keyword">if</span> (&amp;x != <span class="keyword">this</span>) &#123;</span><br><span class="line">    <span class="comment">//如果被赋值对象的最大容量小于 x 对象的当前容量, 就要进行扩容</span></span><br><span class="line">    <span class="keyword">if</span> (x.<span class="built_in">size</span>() &gt; <span class="built_in">capacity</span>()) &#123;</span><br><span class="line">      iterator tmp = <span class="built_in">allocate_and_copy</span>(x.<span class="built_in">end</span>() - x.<span class="built_in">begin</span>(),</span><br><span class="line">                                       x.<span class="built_in">begin</span>(), x.<span class="built_in">end</span>());</span><br><span class="line">      <span class="built_in">destroy</span>(start, finish);</span><br><span class="line">      <span class="built_in">deallocate</span>();</span><br><span class="line">      start = tmp;</span><br><span class="line">      end_of_storage = start + (x.<span class="built_in">end</span>() - x.<span class="built_in">begin</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//反之要删除掉多余元素</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">size</span>() &gt;= x.<span class="built_in">size</span>()) &#123;</span><br><span class="line">      iterator i = <span class="built_in">copy</span>(x.<span class="built_in">begin</span>(), x.<span class="built_in">end</span>(), <span class="built_in">begin</span>());</span><br><span class="line">      <span class="built_in">destroy</span>(i, finish);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">copy</span>(x.<span class="built_in">begin</span>(), x.<span class="built_in">begin</span>() + <span class="built_in">size</span>(), start);</span><br><span class="line">      <span class="built_in">uninitialized_copy</span>(x.<span class="built_in">begin</span>() + <span class="built_in">size</span>(), x.<span class="built_in">end</span>(), finish);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新 end()</span></span><br><span class="line">    finish = start + x.<span class="built_in">size</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="operator-2"><a href="#operator-2" class="headerlink" title="operator=="></a>operator==</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//大小相同且 equal(x.begin(), x.end(), y.begin()) 为真即可</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> vector&lt;T, Alloc&gt;&amp; x, <span class="keyword">const</span> vector&lt;T, Alloc&gt;&amp; y) &#123;</span><br><span class="line">  <span class="keyword">return</span> x.<span class="built_in">size</span>() == y.<span class="built_in">size</span>() &amp;&amp; <span class="built_in">equal</span>(x.<span class="built_in">begin</span>(), x.<span class="built_in">end</span>(), y.<span class="built_in">begin</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="operator-lt"><a href="#operator-lt" class="headerlink" title="operator&lt;"></a>operator&lt;</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按照字典序的比较规则进行比较</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> vector&lt;T, Alloc&gt;&amp; x, <span class="keyword">const</span> vector&lt;T, Alloc&gt;&amp; y) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">lexicographical_compare</span>(x.<span class="built_in">begin</span>(), x.<span class="built_in">end</span>(), y.<span class="built_in">begin</span>(), y.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STL 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
